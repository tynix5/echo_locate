
echo_locate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f70  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002108  08002108  00003108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002168  08002168  00004004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002168  08002168  00004004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002168  08002168  00004004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002168  08002168  00003168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800216c  0800216c  0000316c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08002170  00004000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005b18  20000004  08002174  00004004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005b1c  08002174  00004b1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000493e  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010ab  00000000  00000000  00008972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00002c32  00000000  00000000  00009a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000300  00000000  00000000  0000c650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000434  00000000  00000000  0000c950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025560  00000000  00000000  0000cd84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000739f  00000000  00000000  000322e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083ea5  00000000  00000000  00039683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000bd528  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000888  00000000  00000000  000bd56c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  000bddf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080020f0 	.word	0x080020f0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080020f0 	.word	0x080020f0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <sysclock_config>:
}

void sysclock_config(void)
{
	// 16 MHz HSI oscillator is default on reset, but select anyways
	RCC->CR |= RCC_CR_HSION;
 8000b24:	4a1b      	ldr	r2, [pc, #108]	@ (8000b94 <sysclock_config+0x70>)
 8000b26:	6813      	ldr	r3, [r2, #0]
 8000b28:	f043 0301 	orr.w	r3, r3, #1
{
 8000b2c:	b410      	push	{r4}
	RCC->CR |= RCC_CR_HSION;
 8000b2e:	6013      	str	r3, [r2, #0]
	// wait for HSI to be ready
	while (!((RCC->CR) & RCC_CR_HSIRDY));
 8000b30:	6813      	ldr	r3, [r2, #0]
 8000b32:	0799      	lsls	r1, r3, #30
 8000b34:	d5fc      	bpl.n	8000b30 <sysclock_config+0xc>

	// enable power interface clock for APB1
	RCC->APB1ENR = RCC_APB1ENR_PWREN;

	// configure VCO to scale 2 per CubeMX
	PWR->CR |= PWR_CR_VOS_1;
 8000b36:	4b18      	ldr	r3, [pc, #96]	@ (8000b98 <sysclock_config+0x74>)
	// configure FLASH
	// instruction cache, prefetch enable, and data cache enabled
	uint32_t flash;
	flash = FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN;
	flash |= 2;		// 2 wait states for flash
	FLASH->ACR = flash;
 8000b38:	4818      	ldr	r0, [pc, #96]	@ (8000b9c <sysclock_config+0x78>)
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000b3a:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8000b3e:	6411      	str	r1, [r2, #64]	@ 0x40
	PWR->CR |= PWR_CR_VOS_1;
 8000b40:	6819      	ldr	r1, [r3, #0]
 8000b42:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8000b46:	6019      	str	r1, [r3, #0]
	PWR->CR &= ~PWR_CR_VOS_0;
 8000b48:	6819      	ldr	r1, [r3, #0]
 8000b4a:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8000b4e:	6019      	str	r1, [r3, #0]
	FLASH->ACR = flash;
 8000b50:	f240 7402 	movw	r4, #1794	@ 0x702
	// configure bus prescalers
	uint32_t cfgr = 0;
	cfgr &= ~RCC_CFGR_PPRE2_2;		// APB2 prescaler of 1 (84MHz)
	cfgr |= RCC_CFGR_PPRE1_2;		// APB1 prescaler of 2 (42MHZ)
	cfgr &= ~RCC_CFGR_HPRE;			// AHB prescaler of 1 (84MHz)
	RCC->CFGR = cfgr;
 8000b54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
	FLASH->ACR = flash;
 8000b58:	6004      	str	r4, [r0, #0]
	RCC->CFGR = cfgr;
 8000b5a:	6093      	str	r3, [r2, #8]

	// configure main PLL
	uint32_t pll_cfg = RCC->PLLCFGR;
 8000b5c:	6851      	ldr	r1, [r2, #4]
	pll_cfg &= ~RCC_PLLCFGR_PLLP;	// main PLL division factor of 2

	pll_cfg &= ~RCC_PLLCFGR_PLLN;
	pll_cfg |= 168UL << 6;	// pll multiplication factor for VCO (x168)

	pll_cfg &= ~RCC_PLLCFGR_PLLM;
 8000b5e:	4810      	ldr	r0, [pc, #64]	@ (8000ba0 <sysclock_config+0x7c>)
	pll_cfg |= 16UL << 0;	// pll division factor for main PLL and audio PLL (/16)
 8000b60:	4b10      	ldr	r3, [pc, #64]	@ (8000ba4 <sysclock_config+0x80>)
 8000b62:	4001      	ands	r1, r0
 8000b64:	430b      	orrs	r3, r1

	RCC->PLLCFGR = pll_cfg;
 8000b66:	6053      	str	r3, [r2, #4]

	// enable PLL and wait for ready
	RCC->CR |= RCC_CR_PLLON;
 8000b68:	6813      	ldr	r3, [r2, #0]
	while (!((RCC->CR) & RCC_CR_PLLRDY));
 8000b6a:	490a      	ldr	r1, [pc, #40]	@ (8000b94 <sysclock_config+0x70>)
	RCC->CR |= RCC_CR_PLLON;
 8000b6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000b70:	6013      	str	r3, [r2, #0]
	while (!((RCC->CR) & RCC_CR_PLLRDY));
 8000b72:	680b      	ldr	r3, [r1, #0]
 8000b74:	019a      	lsls	r2, r3, #6
 8000b76:	d5fc      	bpl.n	8000b72 <sysclock_config+0x4e>

	// select clock source
	cfgr = RCC->CFGR;
 8000b78:	688b      	ldr	r3, [r1, #8]
	cfgr |= RCC_CFGR_SW_1;		// select PLL as system clock
	cfgr &= ~RCC_CFGR_SW_0;
	RCC->CFGR = cfgr;

	// wait for PLL clock source to become active
	while (!((RCC->CFGR) & RCC_CFGR_SWS_1));
 8000b7a:	4a06      	ldr	r2, [pc, #24]	@ (8000b94 <sysclock_config+0x70>)
 8000b7c:	f023 0301 	bic.w	r3, r3, #1
	cfgr &= ~RCC_CFGR_SW_0;
 8000b80:	f043 0302 	orr.w	r3, r3, #2
	RCC->CFGR = cfgr;
 8000b84:	608b      	str	r3, [r1, #8]
	while (!((RCC->CFGR) & RCC_CFGR_SWS_1));
 8000b86:	6893      	ldr	r3, [r2, #8]
 8000b88:	071b      	lsls	r3, r3, #28
 8000b8a:	d5fc      	bpl.n	8000b86 <sysclock_config+0x62>
}
 8000b8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40007000 	.word	0x40007000
 8000b9c:	40023c00 	.word	0x40023c00
 8000ba0:	f0fc8000 	.word	0xf0fc8000
 8000ba4:	04002a10 	.word	0x04002a10

08000ba8 <adc1_dma_config>:

void adc1_dma_config(void)
{
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;				// enable ADC1 clock
 8000ba8:	4964      	ldr	r1, [pc, #400]	@ (8000d3c <adc1_dma_config+0x194>)
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;			// enable GPIOA clock

	// PA0 as analog input
	GPIOA->MODER |= GPIO_MODER_MODER0_0 | GPIO_MODER_MODER0_1;
 8000baa:	4b65      	ldr	r3, [pc, #404]	@ (8000d40 <adc1_dma_config+0x198>)
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;				// enable ADC1 clock
 8000bac:	6c48      	ldr	r0, [r1, #68]	@ 0x44
	// PA1 as analog input
	GPIOA->MODER |= GPIO_MODER_MODER1_0 | GPIO_MODER_MODER1_1;
	// PA4 as analog input
	GPIOA->MODER |= GPIO_MODER_MODER4_0 | GPIO_MODER_MODER4_1;

	ADC1->CR2 &= ~ADC_CR2_ADON;						// turn off ADC to configure
 8000bae:	4a65      	ldr	r2, [pc, #404]	@ (8000d44 <adc1_dma_config+0x19c>)
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;				// enable ADC1 clock
 8000bb0:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
{
 8000bb4:	b410      	push	{r4}
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;				// enable ADC1 clock
 8000bb6:	6448      	str	r0, [r1, #68]	@ 0x44
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;			// enable GPIOA clock
 8000bb8:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 8000bba:	f040 0001 	orr.w	r0, r0, #1
 8000bbe:	6308      	str	r0, [r1, #48]	@ 0x30
	GPIOA->MODER |= GPIO_MODER_MODER0_0 | GPIO_MODER_MODER0_1;
 8000bc0:	6818      	ldr	r0, [r3, #0]
 8000bc2:	f040 0003 	orr.w	r0, r0, #3
 8000bc6:	6018      	str	r0, [r3, #0]
	GPIOA->MODER |= GPIO_MODER_MODER1_0 | GPIO_MODER_MODER1_1;
 8000bc8:	6818      	ldr	r0, [r3, #0]
 8000bca:	f040 000c 	orr.w	r0, r0, #12
 8000bce:	6018      	str	r0, [r3, #0]
	GPIOA->MODER |= GPIO_MODER_MODER4_0 | GPIO_MODER_MODER4_1;
 8000bd0:	6818      	ldr	r0, [r3, #0]
 8000bd2:	f440 7040 	orr.w	r0, r0, #768	@ 0x300
 8000bd6:	6018      	str	r0, [r3, #0]
	ADC1->CR2 &= ~ADC_CR2_ADON;						// turn off ADC to configure
 8000bd8:	6893      	ldr	r3, [r2, #8]

	// APB2 clock (84 MHz) / 4 = 21 MHz
	// MAX ADC clock freq is 36 MHz (pg 106 datasheet)
	ADC->CCR &= ~ADC_CCR_ADCPRE;
 8000bda:	485b      	ldr	r0, [pc, #364]	@ (8000d48 <adc1_dma_config+0x1a0>)
	ADC1->CR2 &= ~ADC_CR2_ADON;						// turn off ADC to configure
 8000bdc:	f023 0301 	bic.w	r3, r3, #1
 8000be0:	6093      	str	r3, [r2, #8]
	ADC->CCR &= ~ADC_CCR_ADCPRE;
 8000be2:	6844      	ldr	r4, [r0, #4]


	/* DMA2 Channel 0, Stream 0 --> ADC1 */
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;		// enable DMA2 clock

	DMA2_Stream0->CR &= ~DMA_SxCR_EN;		// disable stream
 8000be4:	4b59      	ldr	r3, [pc, #356]	@ (8000d4c <adc1_dma_config+0x1a4>)
	ADC->CCR &= ~ADC_CCR_ADCPRE;
 8000be6:	f424 3440 	bic.w	r4, r4, #196608	@ 0x30000
 8000bea:	6044      	str	r4, [r0, #4]
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 8000bec:	6844      	ldr	r4, [r0, #4]
 8000bee:	f444 3480 	orr.w	r4, r4, #65536	@ 0x10000
 8000bf2:	6044      	str	r4, [r0, #4]
	ADC1->CR2 |= ADC_CR2_EXTEN_0;
 8000bf4:	6890      	ldr	r0, [r2, #8]
 8000bf6:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8000bfa:	6090      	str	r0, [r2, #8]
	ADC1->CR2 &= ~ADC_CR2_EXTEN_1;
 8000bfc:	6890      	ldr	r0, [r2, #8]
 8000bfe:	f020 5000 	bic.w	r0, r0, #536870912	@ 0x20000000
 8000c02:	6090      	str	r0, [r2, #8]
	ADC1->CR2 |= ADC_CR2_EXTSEL_1 | ADC_CR2_EXTSEL_2;
 8000c04:	6890      	ldr	r0, [r2, #8]
 8000c06:	f040 60c0 	orr.w	r0, r0, #100663296	@ 0x6000000
 8000c0a:	6090      	str	r0, [r2, #8]
	ADC1->CR2 &= ~(ADC_CR2_EXTSEL_0 | ADC_CR2_EXTSEL_3);
 8000c0c:	6890      	ldr	r0, [r2, #8]
 8000c0e:	f020 6010 	bic.w	r0, r0, #150994944	@ 0x9000000
 8000c12:	6090      	str	r0, [r2, #8]
	ADC1->CR1 |= ADC_CR1_SCAN;
 8000c14:	6850      	ldr	r0, [r2, #4]
 8000c16:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 8000c1a:	6050      	str	r0, [r2, #4]
	ADC1->CR2 &= ~ADC_CR2_EOCS;
 8000c1c:	6890      	ldr	r0, [r2, #8]
 8000c1e:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
 8000c22:	6090      	str	r0, [r2, #8]
	ADC1->SMPR2 &= ~(ADC_SMPR2_SMP0 | ADC_SMPR2_SMP1 | ADC_SMPR2_SMP2);
 8000c24:	6910      	ldr	r0, [r2, #16]
 8000c26:	f36f 0008 	bfc	r0, #0, #9
 8000c2a:	6110      	str	r0, [r2, #16]
	ADC1->SQR1 &= ~ADC_SQR1_L;
 8000c2c:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8000c2e:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
 8000c32:	62d0      	str	r0, [r2, #44]	@ 0x2c
	ADC1->SQR1 |= ADC_SQR1_L_1;
 8000c34:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8000c36:	f440 1000 	orr.w	r0, r0, #2097152	@ 0x200000
 8000c3a:	62d0      	str	r0, [r2, #44]	@ 0x2c
	ADC1->SQR3 &= ~ADC_SQR3_SQ1;
 8000c3c:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8000c3e:	f020 001f 	bic.w	r0, r0, #31
 8000c42:	6350      	str	r0, [r2, #52]	@ 0x34
	ADC1->SQR3 &= ~ADC_SQR3_SQ2;
 8000c44:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8000c46:	f420 7078 	bic.w	r0, r0, #992	@ 0x3e0
 8000c4a:	6350      	str	r0, [r2, #52]	@ 0x34
	ADC1->SQR3 |= ADC_SQR3_SQ2_0;
 8000c4c:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8000c4e:	f040 0020 	orr.w	r0, r0, #32
 8000c52:	6350      	str	r0, [r2, #52]	@ 0x34
	ADC1->SQR3 &= ~ADC_SQR3_SQ3;
 8000c54:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8000c56:	f420 40f8 	bic.w	r0, r0, #31744	@ 0x7c00
 8000c5a:	6350      	str	r0, [r2, #52]	@ 0x34
	ADC1->SQR3 |= ADC_SQR3_SQ3_2;
 8000c5c:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8000c5e:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 8000c62:	6350      	str	r0, [r2, #52]	@ 0x34
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;		// enable DMA2 clock
 8000c64:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8000c66:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8000c6a:	630a      	str	r2, [r1, #48]	@ 0x30
	DMA2_Stream0->CR &= ~DMA_SxCR_EN;		// disable stream
 8000c6c:	691a      	ldr	r2, [r3, #16]
 8000c6e:	f022 0201 	bic.w	r2, r2, #1
 8000c72:	611a      	str	r2, [r3, #16]
	while (DMA2_Stream0->CR & DMA_SxCR_EN);	// wait for stream to disable
 8000c74:	691a      	ldr	r2, [r3, #16]
 8000c76:	07d2      	lsls	r2, r2, #31
 8000c78:	d4fc      	bmi.n	8000c74 <adc1_dma_config+0xcc>

	DMA2_Stream0->PAR = (uint32_t)&(ADC1->DR);// peripheral address
 8000c7a:	4c35      	ldr	r4, [pc, #212]	@ (8000d50 <adc1_dma_config+0x1a8>)
	DMA2_Stream0->M0AR = (uint32_t)stream0;	// destination memory address (CT = 0)
	DMA2_Stream0->M1AR = (uint32_t)stream1;	// destination memory address (CT = 1)
 8000c7c:	4935      	ldr	r1, [pc, #212]	@ (8000d54 <adc1_dma_config+0x1ac>)
	DMA2_Stream0->M0AR = (uint32_t)stream0;	// destination memory address (CT = 0)
 8000c7e:	4836      	ldr	r0, [pc, #216]	@ (8000d58 <adc1_dma_config+0x1b0>)
	DMA2_Stream0->PAR = (uint32_t)&(ADC1->DR);// peripheral address
 8000c80:	619c      	str	r4, [r3, #24]
	DMA2_Stream0->NDTR = BLOCK_SIZE;		// number of units to be transmitted
 8000c82:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
	DMA2_Stream0->M0AR = (uint32_t)stream0;	// destination memory address (CT = 0)
 8000c86:	61d8      	str	r0, [r3, #28]
	DMA2_Stream0->M1AR = (uint32_t)stream1;	// destination memory address (CT = 1)
 8000c88:	6219      	str	r1, [r3, #32]
	DMA2_Stream0->NDTR = BLOCK_SIZE;		// number of units to be transmitted
 8000c8a:	615a      	str	r2, [r3, #20]

	DMA2_Stream0->CR &= ~DMA_SxCR_CHSEL;	// channel 0 selected
 8000c8c:	6919      	ldr	r1, [r3, #16]
	DMA2_Stream0->CR &= ~DMA_SxCR_CT;


	DMA2_Stream0->CR |= DMA_SxCR_EN;		// enable DMA stream

	ADC1->CR2 |= ADC_CR2_DMA;				// enable DMA
 8000c8e:	4a2d      	ldr	r2, [pc, #180]	@ (8000d44 <adc1_dma_config+0x19c>)
	DMA2_Stream0->CR &= ~DMA_SxCR_CHSEL;	// channel 0 selected
 8000c90:	f021 6160 	bic.w	r1, r1, #234881024	@ 0xe000000
 8000c94:	6119      	str	r1, [r3, #16]
	DMA2_Stream0->CR &= ~DMA_SxCR_PFCTRL;	// DMA is the flow controller
 8000c96:	6919      	ldr	r1, [r3, #16]
 8000c98:	f021 0120 	bic.w	r1, r1, #32
 8000c9c:	6119      	str	r1, [r3, #16]
	DMA2_Stream0->CR |= DMA_SxCR_PL_0;
 8000c9e:	6919      	ldr	r1, [r3, #16]
 8000ca0:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8000ca4:	6119      	str	r1, [r3, #16]
	DMA2_Stream0->CR &= ~DMA_SxCR_PL_1;
 8000ca6:	6919      	ldr	r1, [r3, #16]
 8000ca8:	f421 3100 	bic.w	r1, r1, #131072	@ 0x20000
 8000cac:	6119      	str	r1, [r3, #16]
	DMA2_Stream0->FCR |= DMA_SxFCR_DMDIS;
 8000cae:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000cb0:	f041 0104 	orr.w	r1, r1, #4
 8000cb4:	6259      	str	r1, [r3, #36]	@ 0x24
	DMA2_Stream0->FCR |= DMA_SxFCR_FTH_0;
 8000cb6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000cb8:	f041 0101 	orr.w	r1, r1, #1
 8000cbc:	6259      	str	r1, [r3, #36]	@ 0x24
	DMA2_Stream0->FCR &= ~DMA_SxFCR_FTH_1;
 8000cbe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000cc0:	f021 0102 	bic.w	r1, r1, #2
 8000cc4:	6259      	str	r1, [r3, #36]	@ 0x24
	DMA2_Stream0->CR |= DMA_SxCR_MSIZE_0;
 8000cc6:	6919      	ldr	r1, [r3, #16]
 8000cc8:	f441 5100 	orr.w	r1, r1, #8192	@ 0x2000
 8000ccc:	6119      	str	r1, [r3, #16]
	DMA2_Stream0->CR &= ~DMA_SxCR_MSIZE_1;
 8000cce:	6919      	ldr	r1, [r3, #16]
 8000cd0:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8000cd4:	6119      	str	r1, [r3, #16]
	DMA2_Stream0->CR |= DMA_SxCR_PSIZE_0;
 8000cd6:	6919      	ldr	r1, [r3, #16]
 8000cd8:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
 8000cdc:	6119      	str	r1, [r3, #16]
	DMA2_Stream0->CR &= ~DMA_SxCR_PSIZE_1;
 8000cde:	6919      	ldr	r1, [r3, #16]
 8000ce0:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 8000ce4:	6119      	str	r1, [r3, #16]
	DMA2_Stream0->CR |= DMA_SxCR_MINC;
 8000ce6:	6919      	ldr	r1, [r3, #16]
 8000ce8:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 8000cec:	6119      	str	r1, [r3, #16]
	DMA2_Stream0->CR &= ~DMA_SxCR_PINC;
 8000cee:	6919      	ldr	r1, [r3, #16]
 8000cf0:	f421 7100 	bic.w	r1, r1, #512	@ 0x200
 8000cf4:	6119      	str	r1, [r3, #16]
	DMA2_Stream0->CR &= ~DMA_SxCR_DIR;
 8000cf6:	6919      	ldr	r1, [r3, #16]
 8000cf8:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8000cfc:	6119      	str	r1, [r3, #16]
	DMA2_Stream0->CR |= DMA_SxCR_CIRC;
 8000cfe:	6919      	ldr	r1, [r3, #16]
	ADC1->CR2 |= ADC_CR2_DDS;				// DMA requests issued as long as DMA=1
	ADC1->CR2 |= ADC_CR2_ADON;				// turn on ADC
}
 8000d00:	f85d 4b04 	ldr.w	r4, [sp], #4
	DMA2_Stream0->CR |= DMA_SxCR_CIRC;
 8000d04:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8000d08:	6119      	str	r1, [r3, #16]
	DMA2_Stream0->CR |= DMA_SxCR_DBM;
 8000d0a:	6919      	ldr	r1, [r3, #16]
 8000d0c:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
 8000d10:	6119      	str	r1, [r3, #16]
	DMA2_Stream0->CR &= ~DMA_SxCR_CT;
 8000d12:	6919      	ldr	r1, [r3, #16]
 8000d14:	f421 2100 	bic.w	r1, r1, #524288	@ 0x80000
 8000d18:	6119      	str	r1, [r3, #16]
	DMA2_Stream0->CR |= DMA_SxCR_EN;		// enable DMA stream
 8000d1a:	6919      	ldr	r1, [r3, #16]
 8000d1c:	f041 0101 	orr.w	r1, r1, #1
 8000d20:	6119      	str	r1, [r3, #16]
	ADC1->CR2 |= ADC_CR2_DMA;				// enable DMA
 8000d22:	6893      	ldr	r3, [r2, #8]
 8000d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d28:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_DDS;				// DMA requests issued as long as DMA=1
 8000d2a:	6893      	ldr	r3, [r2, #8]
 8000d2c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d30:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_ADON;				// turn on ADC
 8000d32:	6893      	ldr	r3, [r2, #8]
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6093      	str	r3, [r2, #8]
}
 8000d3a:	4770      	bx	lr
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020000 	.word	0x40020000
 8000d44:	40012000 	.word	0x40012000
 8000d48:	40012300 	.word	0x40012300
 8000d4c:	40026400 	.word	0x40026400
 8000d50:	4001204c 	.word	0x4001204c
 8000d54:	20004470 	.word	0x20004470
 8000d58:	20004fb0 	.word	0x20004fb0

08000d5c <tim2_trig_config>:

void tim2_trig_config(void)
{
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;				// enable TIM2 clock
 8000d5c:	4910      	ldr	r1, [pc, #64]	@ (8000da0 <tim2_trig_config+0x44>)
 8000d5e:	6c0a      	ldr	r2, [r1, #64]	@ 0x40

	TIM2->CR1 &= ~TIM_CR1_DIR;			// upcounting
 8000d60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;				// enable TIM2 clock
 8000d64:	f042 0201 	orr.w	r2, r2, #1
 8000d68:	640a      	str	r2, [r1, #64]	@ 0x40
	TIM2->CR1 &= ~TIM_CR1_DIR;			// upcounting
 8000d6a:	681a      	ldr	r2, [r3, #0]
	TIM2->PSC = 0;						// /1 prescaler
 8000d6c:	2000      	movs	r0, #0
	TIM2->CR1 &= ~TIM_CR1_DIR;			// upcounting
 8000d6e:	f022 0210 	bic.w	r2, r2, #16
	TIM2->ARR = 2099;					// 40kHz frequency
 8000d72:	f640 0133 	movw	r1, #2099	@ 0x833
	TIM2->CR1 &= ~TIM_CR1_DIR;			// upcounting
 8000d76:	601a      	str	r2, [r3, #0]
	TIM2->PSC = 0;						// /1 prescaler
 8000d78:	6298      	str	r0, [r3, #40]	@ 0x28
	TIM2->ARR = 2099;					// 40kHz frequency
 8000d7a:	62d9      	str	r1, [r3, #44]	@ 0x2c

	TIM2->CR2 |= TIM_CR2_MMS_1;
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	f042 0220 	orr.w	r2, r2, #32
 8000d82:	605a      	str	r2, [r3, #4]
	TIM2->CR2 &= ~(TIM_CR2_MMS_0 | TIM_CR2_MMS_2);		// update event as TRGO
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	f022 0250 	bic.w	r2, r2, #80	@ 0x50
 8000d8a:	605a      	str	r2, [r3, #4]

	TIM2->EGR |= TIM_EGR_UG;			// generate update event
 8000d8c:	695a      	ldr	r2, [r3, #20]
 8000d8e:	f042 0201 	orr.w	r2, r2, #1
 8000d92:	615a      	str	r2, [r3, #20]

	TIM2->CR1 |= TIM_CR1_CEN;			// enable counter
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	f042 0201 	orr.w	r2, r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]
}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800

08000da4 <stream_splice>:

	TIM5->CR1 |= TIM_CR1_CEN;			// enable counter
}

void stream_splice(void)
{
 8000da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	{
		uint32_t ind = i / 3;

		// DMA is targeting M1AR ---> read from M0AR memory
		// TO DO: check ranges of mic0
		if (dma_tgt)
 8000da8:	4b2b      	ldr	r3, [pc, #172]	@ (8000e58 <stream_splice+0xb4>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	bb43      	cbnz	r3, 8000e00 <stream_splice+0x5c>
 8000dae:	4f2b      	ldr	r7, [pc, #172]	@ (8000e5c <stream_splice+0xb8>)
 8000db0:	4e2b      	ldr	r6, [pc, #172]	@ (8000e60 <stream_splice+0xbc>)
 8000db2:	4d2c      	ldr	r5, [pc, #176]	@ (8000e64 <stream_splice+0xc0>)
 8000db4:	4c2c      	ldr	r4, [pc, #176]	@ (8000e68 <stream_splice+0xc4>)
		uint32_t ind = i / 3;
 8000db6:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8000e6c <stream_splice+0xc8>
 8000dba:	f107 0802 	add.w	r8, r7, #2
 8000dbe:	f107 0c04 	add.w	ip, r7, #4
			mic1_samp[ind] = ((int16_t)stream0[i+1] - 2048) << 4;
			mic2_samp[ind] = ((int16_t)stream0[i+2] - 2048) << 4;
		}
		else
		{
			mic0_samp[ind] = ((int16_t)stream1[i] - 2048) << 4;
 8000dc2:	f837 9013 	ldrh.w	r9, [r7, r3, lsl #1]
			mic1_samp[ind] = ((int16_t)stream1[i+1] - 2048) << 4;
 8000dc6:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
			mic2_samp[ind] = ((int16_t)stream1[i+2] - 2048) << 4;
 8000dca:	f83c 1013 	ldrh.w	r1, [ip, r3, lsl #1]
		uint32_t ind = i / 3;
 8000dce:	fbae a203 	umull	sl, r2, lr, r3
 8000dd2:	0852      	lsrs	r2, r2, #1
			mic0_samp[ind] = ((int16_t)stream1[i] - 2048) << 4;
 8000dd4:	f5a9 6900 	sub.w	r9, r9, #2048	@ 0x800
			mic1_samp[ind] = ((int16_t)stream1[i+1] - 2048) << 4;
 8000dd8:	f5a0 6000 	sub.w	r0, r0, #2048	@ 0x800
			mic2_samp[ind] = ((int16_t)stream1[i+2] - 2048) << 4;
 8000ddc:	f5a1 6100 	sub.w	r1, r1, #2048	@ 0x800
	for (uint32_t i = 0; i < BLOCK_SIZE; i += 3)
 8000de0:	3303      	adds	r3, #3
			mic0_samp[ind] = ((int16_t)stream1[i] - 2048) << 4;
 8000de2:	ea4f 1909 	mov.w	r9, r9, lsl #4
			mic1_samp[ind] = ((int16_t)stream1[i+1] - 2048) << 4;
 8000de6:	0100      	lsls	r0, r0, #4
			mic2_samp[ind] = ((int16_t)stream1[i+2] - 2048) << 4;
 8000de8:	0109      	lsls	r1, r1, #4
	for (uint32_t i = 0; i < BLOCK_SIZE; i += 3)
 8000dea:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
			mic0_samp[ind] = ((int16_t)stream1[i] - 2048) << 4;
 8000dee:	f826 9012 	strh.w	r9, [r6, r2, lsl #1]
			mic1_samp[ind] = ((int16_t)stream1[i+1] - 2048) << 4;
 8000df2:	f825 0012 	strh.w	r0, [r5, r2, lsl #1]
			mic2_samp[ind] = ((int16_t)stream0[i+2] - 2048) << 4;
 8000df6:	f824 1012 	strh.w	r1, [r4, r2, lsl #1]
	for (uint32_t i = 0; i < BLOCK_SIZE; i += 3)
 8000dfa:	d1e2      	bne.n	8000dc2 <stream_splice+0x1e>
		}
	}
}
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 8000e70 <stream_splice+0xcc>
 8000e04:	4e16      	ldr	r6, [pc, #88]	@ (8000e60 <stream_splice+0xbc>)
 8000e06:	4d17      	ldr	r5, [pc, #92]	@ (8000e64 <stream_splice+0xc0>)
 8000e08:	4c17      	ldr	r4, [pc, #92]	@ (8000e68 <stream_splice+0xc4>)
		uint32_t ind = i / 3;
 8000e0a:	f8df 8060 	ldr.w	r8, [pc, #96]	@ 8000e6c <stream_splice+0xc8>
	for (uint32_t i = 0; i < BLOCK_SIZE; i += 3)
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f10c 0702 	add.w	r7, ip, #2
 8000e14:	f10c 0e04 	add.w	lr, ip, #4
			mic0_samp[ind] = ((int16_t)stream0[i] - 2048) << 4;
 8000e18:	f83c 9013 	ldrh.w	r9, [ip, r3, lsl #1]
			mic1_samp[ind] = ((int16_t)stream0[i+1] - 2048) << 4;
 8000e1c:	f837 0013 	ldrh.w	r0, [r7, r3, lsl #1]
			mic2_samp[ind] = ((int16_t)stream0[i+2] - 2048) << 4;
 8000e20:	f83e 1013 	ldrh.w	r1, [lr, r3, lsl #1]
		uint32_t ind = i / 3;
 8000e24:	fba8 a203 	umull	sl, r2, r8, r3
 8000e28:	0852      	lsrs	r2, r2, #1
			mic0_samp[ind] = ((int16_t)stream0[i] - 2048) << 4;
 8000e2a:	f5a9 6900 	sub.w	r9, r9, #2048	@ 0x800
			mic1_samp[ind] = ((int16_t)stream0[i+1] - 2048) << 4;
 8000e2e:	f5a0 6000 	sub.w	r0, r0, #2048	@ 0x800
			mic2_samp[ind] = ((int16_t)stream0[i+2] - 2048) << 4;
 8000e32:	f5a1 6100 	sub.w	r1, r1, #2048	@ 0x800
	for (uint32_t i = 0; i < BLOCK_SIZE; i += 3)
 8000e36:	3303      	adds	r3, #3
			mic0_samp[ind] = ((int16_t)stream0[i] - 2048) << 4;
 8000e38:	ea4f 1909 	mov.w	r9, r9, lsl #4
			mic1_samp[ind] = ((int16_t)stream0[i+1] - 2048) << 4;
 8000e3c:	0100      	lsls	r0, r0, #4
			mic2_samp[ind] = ((int16_t)stream0[i+2] - 2048) << 4;
 8000e3e:	0109      	lsls	r1, r1, #4
	for (uint32_t i = 0; i < BLOCK_SIZE; i += 3)
 8000e40:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
			mic0_samp[ind] = ((int16_t)stream0[i] - 2048) << 4;
 8000e44:	f826 9012 	strh.w	r9, [r6, r2, lsl #1]
			mic1_samp[ind] = ((int16_t)stream0[i+1] - 2048) << 4;
 8000e48:	f825 0012 	strh.w	r0, [r5, r2, lsl #1]
			mic2_samp[ind] = ((int16_t)stream0[i+2] - 2048) << 4;
 8000e4c:	f824 1012 	strh.w	r1, [r4, r2, lsl #1]
	for (uint32_t i = 0; i < BLOCK_SIZE; i += 3)
 8000e50:	d1e2      	bne.n	8000e18 <stream_splice+0x74>
}
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	bf00      	nop
 8000e58:	2000392e 	.word	0x2000392e
 8000e5c:	20004470 	.word	0x20004470
 8000e60:	200040b0 	.word	0x200040b0
 8000e64:	20003cf0 	.word	0x20003cf0
 8000e68:	20003930 	.word	0x20003930
 8000e6c:	aaaaaaab 	.word	0xaaaaaaab
 8000e70:	20004fb0 	.word	0x20004fb0
 8000e74:	00000000 	.word	0x00000000

08000e78 <compute_event_pos>:

void compute_event_pos(float * x, float * y, float mic0_x, float mic0_y,
					   float mic1_x, float mic1_y, float mic2_x, float mic2_y,
					   float mic1_delay, float mic2_delay)
{
 8000e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const float eps = 1e-6;

	for (uint8_t i = 0; i < 10; i++)
	{
		// distances from mic1 and mic2 to mic0
		float d10 = SPEED_OF_SOUND * mic1_delay;
 8000e7c:	eddf 7a82 	vldr	s15, [pc, #520]	@ 8001088 <compute_event_pos+0x210>
{
 8000e80:	ed2d 8b10 	vpush	{d8-d15}
		float d10 = SPEED_OF_SOUND * mic1_delay;
 8000e84:	ee23 7a27 	vmul.f32	s14, s6, s15

		// solve system
		// ([J]^T)[J]delta = -([J]^T)[f]
		// delta = inv(([J]^T)[J]) * (-([J]^T)[f])
		float det = prod11 * prod22 - prod12 * prod21;
		if (fabsf(det) < 1e-6) break;
 8000e88:	a57b      	add	r5, pc, #492	@ (adr r5, 8001078 <compute_event_pos+0x200>)
 8000e8a:	e9d5 4500 	ldrd	r4, r5, [r5]
		float d20 = SPEED_OF_SOUND * mic2_delay;
 8000e8e:	ee63 7aa7 	vmul.f32	s15, s7, s15
		else if (dy < -max_step)	dy = -max_step;

		*x += dx;
		*y += dy;

		if (sqrtf(dx * dx + dy * dy) < 1e-5) break;
 8000e92:	a77b      	add	r7, pc, #492	@ (adr r7, 8001080 <compute_event_pos+0x208>)
 8000e94:	e9d7 6700 	ldrd	r6, r7, [r7]
{
 8000e98:	b082      	sub	sp, #8
		float r0 = sqrtf(powf(*x - mic0_x, 2) + powf(*y - mic0_y, 2));
 8000e9a:	ed91 8a00 	vldr	s16, [r1]
		float j11 = (*x - mic1_x) / (r1 + eps) - (*x - mic0_x) / (r0 + eps);
 8000e9e:	eddf 8a7b 	vldr	s17, [pc, #492]	@ 800108c <compute_event_pos+0x214>
		else if (dx < -max_step)	dx = -max_step;
 8000ea2:	eddf ea7b 	vldr	s29, [pc, #492]	@ 8001090 <compute_event_pos+0x218>
 8000ea6:	ed9f ea7b 	vldr	s28, [pc, #492]	@ 8001094 <compute_event_pos+0x21c>
		float d10 = SPEED_OF_SOUND * mic1_delay;
 8000eaa:	ed8d 7a00 	vstr	s14, [sp]
{
 8000eae:	4689      	mov	r9, r1
 8000eb0:	eef0 9a40 	vmov.f32	s19, s0
 8000eb4:	eeb0 9a60 	vmov.f32	s18, s1
 8000eb8:	eef0 ba41 	vmov.f32	s23, s2
 8000ebc:	eeb0 ba61 	vmov.f32	s22, s3
 8000ec0:	eef0 aa42 	vmov.f32	s21, s4
 8000ec4:	eeb0 aa62 	vmov.f32	s20, s5
		float d20 = SPEED_OF_SOUND * mic2_delay;
 8000ec8:	edcd 7a01 	vstr	s15, [sp, #4]
{
 8000ecc:	4682      	mov	sl, r0
		float r0 = sqrtf(powf(*x - mic0_x, 2) + powf(*y - mic0_y, 2));
 8000ece:	f04f 080a 	mov.w	r8, #10
 8000ed2:	edda da00 	vldr	s27, [sl]
 8000ed6:	ee78 7a49 	vsub.f32	s15, s16, s18
 8000eda:	ee7d 5ae9 	vsub.f32	s11, s27, s19
		float r1 = sqrtf(powf(*x - mic1_x, 2) + powf(*y - mic1_y, 2));
 8000ede:	ee38 5a4b 	vsub.f32	s10, s16, s22
		float r2 = sqrtf(powf(*x - mic2_x, 2) + powf(*y - mic2_y, 2));
 8000ee2:	ee38 4a4a 	vsub.f32	s8, s16, s20
		float r0 = sqrtf(powf(*x - mic0_x, 2) + powf(*y - mic0_y, 2));
 8000ee6:	ee67 7aa7 	vmul.f32	s15, s15, s15
		float r1 = sqrtf(powf(*x - mic1_x, 2) + powf(*y - mic1_y, 2));
 8000eea:	ee7d 4aeb 	vsub.f32	s9, s27, s23
		float r0 = sqrtf(powf(*x - mic0_x, 2) + powf(*y - mic0_y, 2));
 8000eee:	eee5 7aa5 	vfma.f32	s15, s11, s11
		float r2 = sqrtf(powf(*x - mic2_x, 2) + powf(*y - mic2_y, 2));
 8000ef2:	ee3d 6aea 	vsub.f32	s12, s27, s21
		float r1 = sqrtf(powf(*x - mic1_x, 2) + powf(*y - mic1_y, 2));
 8000ef6:	ee25 7a05 	vmul.f32	s14, s10, s10
		float r2 = sqrtf(powf(*x - mic2_x, 2) + powf(*y - mic2_y, 2));
 8000efa:	ee64 6a04 	vmul.f32	s13, s8, s8
		float r1 = sqrtf(powf(*x - mic1_x, 2) + powf(*y - mic1_y, 2));
 8000efe:	eea4 7aa4 	vfma.f32	s14, s9, s9
		float r2 = sqrtf(powf(*x - mic2_x, 2) + powf(*y - mic2_y, 2));
 8000f02:	eee6 6a06 	vfma.f32	s13, s12, s12
		if (r0 == 0 || r1 == 0 || r2 == 0) break;
 8000f06:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		float r1 = sqrtf(powf(*x - mic1_x, 2) + powf(*y - mic1_y, 2));
 8000f0e:	eef1 5ac7 	vsqrt.f32	s11, s14
		float r2 = sqrtf(powf(*x - mic2_x, 2) + powf(*y - mic2_y, 2));
 8000f12:	eeb1 dae6 	vsqrt.f32	s26, s13
		float r0 = sqrtf(powf(*x - mic0_x, 2) + powf(*y - mic0_y, 2));
 8000f16:	eef1 3ae7 	vsqrt.f32	s7, s15
		float j12 = (*y - mic1_y) / (r1 + eps) - (*y - mic0_y) / (r0 + eps);
 8000f1a:	ee39 2a48 	vsub.f32	s4, s18, s16
		float j11 = (*x - mic1_x) / (r1 + eps) - (*x - mic0_x) / (r0 + eps);
 8000f1e:	ee39 3aed 	vsub.f32	s6, s19, s27
		if (r0 == 0 || r1 == 0 || r2 == 0) break;
 8000f22:	f000 80a1 	beq.w	8001068 <compute_event_pos+0x1f0>
 8000f26:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8000f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f2e:	f000 809b 	beq.w	8001068 <compute_event_pos+0x1f0>
 8000f32:	eef5 6a40 	vcmp.f32	s13, #0.0
 8000f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f3a:	f000 8095 	beq.w	8001068 <compute_event_pos+0x1f0>
		float j21 = (*x - mic2_x) / (r2 + eps) - (*x - mic0_x) / (r0 + eps);
 8000f3e:	ee3d 7a28 	vadd.f32	s14, s26, s17
		float j11 = (*x - mic1_x) / (r1 + eps) - (*x - mic0_x) / (r0 + eps);
 8000f42:	ee73 6aa8 	vadd.f32	s13, s7, s17
 8000f46:	ee75 1aa8 	vadd.f32	s3, s11, s17
 8000f4a:	eec3 2a26 	vdiv.f32	s5, s6, s13
		float j21 = (*x - mic2_x) / (r2 + eps) - (*x - mic0_x) / (r0 + eps);
 8000f4e:	eec6 7a07 	vdiv.f32	s15, s12, s14
		float j12 = (*y - mic1_y) / (r1 + eps) - (*y - mic0_y) / (r0 + eps);
 8000f52:	ee82 3a26 	vdiv.f32	s6, s4, s13
		float j22 = (*y - mic2_y) / (r2 + eps) - (*y - mic0_y) / (r0 + eps);
 8000f56:	ee84 6a07 	vdiv.f32	s12, s8, s14
		float j11 = (*x - mic1_x) / (r1 + eps) - (*x - mic0_x) / (r0 + eps);
 8000f5a:	eec4 6aa1 	vdiv.f32	s13, s9, s3
		float j12 = (*y - mic1_y) / (r1 + eps) - (*y - mic0_y) / (r0 + eps);
 8000f5e:	ee85 7a21 	vdiv.f32	s14, s10, s3
		float j21 = (*x - mic2_x) / (r2 + eps) - (*x - mic0_x) / (r0 + eps);
 8000f62:	ee77 7aa2 	vadd.f32	s15, s15, s5
		float j22 = (*y - mic2_y) / (r2 + eps) - (*y - mic0_y) / (r0 + eps);
 8000f66:	ee36 6a03 	vadd.f32	s12, s12, s6
		float res2 = r2 - r0 - d20;
 8000f6a:	ed9d 5a01 	vldr	s10, [sp, #4]
		float j11 = (*x - mic1_x) / (r1 + eps) - (*x - mic0_x) / (r0 + eps);
 8000f6e:	ee76 6aa2 	vadd.f32	s13, s13, s5
		float j12 = (*y - mic1_y) / (r1 + eps) - (*y - mic0_y) / (r0 + eps);
 8000f72:	ee37 7a03 	vadd.f32	s14, s14, s6
		float prod12 = j11 * j12 + j21 * j22;
 8000f76:	ee67 fa86 	vmul.f32	s31, s15, s12
		float res2 = r2 - r0 - d20;
 8000f7a:	ee3d da45 	vsub.f32	s26, s26, s10
		float res1 = r1 - r0 - d10;
 8000f7e:	ed9d 5a00 	vldr	s10, [sp]
		float prod12 = j11 * j12 + j21 * j22;
 8000f82:	eee6 fa87 	vfma.f32	s31, s13, s14
		float res1 = r1 - r0 - d10;
 8000f86:	ee75 5ac5 	vsub.f32	s11, s11, s10
		float prod11 = j11 * j11 + j21 * j21;
 8000f8a:	ee67 4aa7 	vmul.f32	s9, s15, s15
		float prod22 = j12 * j12 + j22 * j22;
 8000f8e:	ee26 5a06 	vmul.f32	s10, s12, s12
		float prod11 = j11 * j11 + j21 * j21;
 8000f92:	eee6 4aa6 	vfma.f32	s9, s13, s13
		float prod22 = j12 * j12 + j22 * j22;
 8000f96:	eea7 5a07 	vfma.f32	s10, s14, s14
		float det = prod11 * prod22 - prod12 * prod21;
 8000f9a:	ee2f faef 	vnmul.f32	s30, s31, s31
		float res2 = r2 - r0 - d20;
 8000f9e:	ee3d da63 	vsub.f32	s26, s26, s7
		float det = prod11 * prod22 - prod12 * prod21;
 8000fa2:	eea4 fa85 	vfma.f32	s30, s9, s10
		float res1 = r1 - r0 - d10;
 8000fa6:	ee75 5ae3 	vsub.f32	s11, s11, s7
		float g1 = j11 * res1 + j21 * res2;
 8000faa:	ee2d 8a27 	vmul.f32	s16, s26, s15
		float g2 = j12 * res1 + j22 * res2;
 8000fae:	ee2d da06 	vmul.f32	s26, s26, s12
		if (fabsf(det) < 1e-6) break;
 8000fb2:	eef0 7acf 	vabs.f32	s15, s30
 8000fb6:	ee17 0a90 	vmov	r0, s15
		float g1 = j11 * res1 + j21 * res2;
 8000fba:	eea5 8aa6 	vfma.f32	s16, s11, s13
		float g2 = j12 * res1 + j22 * res2;
 8000fbe:	eea5 da87 	vfma.f32	s26, s11, s14
		float prod11 = j11 * j11 + j21 * j21;
 8000fc2:	eef0 ca64 	vmov.f32	s25, s9
		float prod22 = j12 * j12 + j22 * j22;
 8000fc6:	eeb0 ca45 	vmov.f32	s24, s10
		if (fabsf(det) < 1e-6) break;
 8000fca:	f7ff fa69 	bl	80004a0 <__aeabi_f2d>
 8000fce:	4622      	mov	r2, r4
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	f7ff fd2f 	bl	8000a34 <__aeabi_dcmplt>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	d146      	bne.n	8001068 <compute_event_pos+0x1f0>
		float dx = (-prod22 * g1 + prod12 * g2) / det;
 8000fda:	ee6f 7a8d 	vmul.f32	s15, s31, s26
		float dy = (prod21 * g1 - prod11 * g2) / det;
 8000fde:	ee2d da6c 	vnmul.f32	s26, s26, s25
 8000fe2:	eeec 7a48 	vfms.f32	s15, s24, s16
 8000fe6:	eeaf da88 	vfma.f32	s26, s31, s16
		float dx = (-prod22 * g1 + prod12 * g2) / det;
 8000fea:	ee87 7a8f 	vdiv.f32	s14, s15, s30
		float dy = (prod21 * g1 - prod11 * g2) / det;
 8000fee:	eecd 7a0f 	vdiv.f32	s15, s26, s30
		else if (dx < -max_step)	dx = -max_step;
 8000ff2:	eeb4 7aee 	vcmpe.f32	s14, s29
 8000ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffa:	bfb8      	it	lt
 8000ffc:	eeb0 7a6e 	vmovlt.f32	s14, s29
 8001000:	eeb4 7ace 	vcmpe.f32	s14, s28
 8001004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		else if (dy < -max_step)	dy = -max_step;
 8001008:	eef4 7aee 	vcmpe.f32	s15, s29
 800100c:	bf88      	it	hi
 800100e:	eeb0 7a4e 	vmovhi.f32	s14, s28
 8001012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001016:	bfb8      	it	lt
 8001018:	eef0 7a6e 	vmovlt.f32	s15, s29
 800101c:	eef4 7ace 	vcmpe.f32	s15, s28
 8001020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001024:	bf88      	it	hi
 8001026:	eef0 7a4e 	vmovhi.f32	s15, s28
		if (sqrtf(dx * dx + dy * dy) < 1e-5) break;
 800102a:	ee67 6aa7 	vmul.f32	s13, s15, s15
		*x += dx;
 800102e:	ee7d da87 	vadd.f32	s27, s27, s14
		if (sqrtf(dx * dx + dy * dy) < 1e-5) break;
 8001032:	eee7 6a07 	vfma.f32	s13, s14, s14
		*x += dx;
 8001036:	edca da00 	vstr	s27, [sl]
		*y += dy;
 800103a:	ed99 6a00 	vldr	s12, [r9]
 800103e:	ee37 8a86 	vadd.f32	s16, s15, s12
		if (sqrtf(dx * dx + dy * dy) < 1e-5) break;
 8001042:	eef1 7ae6 	vsqrt.f32	s15, s13
		*y += dy;
 8001046:	ed89 8a00 	vstr	s16, [r9]
		if (sqrtf(dx * dx + dy * dy) < 1e-5) break;
 800104a:	ee17 0a90 	vmov	r0, s15
 800104e:	f7ff fa27 	bl	80004a0 <__aeabi_f2d>
 8001052:	4632      	mov	r2, r6
 8001054:	463b      	mov	r3, r7
 8001056:	f7ff fced 	bl	8000a34 <__aeabi_dcmplt>
 800105a:	b928      	cbnz	r0, 8001068 <compute_event_pos+0x1f0>
	for (uint8_t i = 0; i < 10; i++)
 800105c:	f108 33ff 	add.w	r3, r8, #4294967295
 8001060:	f013 08ff 	ands.w	r8, r3, #255	@ 0xff
 8001064:	f47f af35 	bne.w	8000ed2 <compute_event_pos+0x5a>
	}

}
 8001068:	b002      	add	sp, #8
 800106a:	ecbd 8b10 	vpop	{d8-d15}
 800106e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001072:	bf00      	nop
 8001074:	f3af 8000 	nop.w
 8001078:	a0b5ed8d 	.word	0xa0b5ed8d
 800107c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001080:	88e368f1 	.word	0x88e368f1
 8001084:	3ee4f8b5 	.word	0x3ee4f8b5
 8001088:	43ab8000 	.word	0x43ab8000
 800108c:	358637bd 	.word	0x358637bd
 8001090:	be4ccccd 	.word	0xbe4ccccd
 8001094:	3e4ccccd 	.word	0x3e4ccccd

08001098 <main>:
{
 8001098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800109c:	ed2d 8b02 	vpush	{d8}
 80010a0:	b08f      	sub	sp, #60	@ 0x3c
	arm_fir_init_q15(&hfir0, NUM_FILTER_TAPS, ftaps_q15, mic0_state, SAMPLE_SIZE);
 80010a2:	f44f 74f0 	mov.w	r4, #480	@ 0x1e0
	sysclock_config();
 80010a6:	f7ff fd3d 	bl	8000b24 <sysclock_config>
	arm_fir_init_q15(&hfir0, NUM_FILTER_TAPS, ftaps_q15, mic0_state, SAMPLE_SIZE);
 80010aa:	4bc3      	ldr	r3, [pc, #780]	@ (80013b8 <main+0x320>)
 80010ac:	4ac3      	ldr	r2, [pc, #780]	@ (80013bc <main+0x324>)
 80010ae:	9400      	str	r4, [sp, #0]
 80010b0:	2130      	movs	r1, #48	@ 0x30
 80010b2:	48c3      	ldr	r0, [pc, #780]	@ (80013c0 <main+0x328>)
	GPIOA->MODER &= ~GPIO_MODER_MODER10;
 80010b4:	f8df 8380 	ldr.w	r8, [pc, #896]	@ 8001438 <main+0x3a0>
	float last_update = 0;
 80010b8:	eddf 8ac2 	vldr	s17, [pc, #776]	@ 80013c4 <main+0x32c>
 80010bc:	4ec2      	ldr	r6, [pc, #776]	@ (80013c8 <main+0x330>)
 80010be:	4dc3      	ldr	r5, [pc, #780]	@ (80013cc <main+0x334>)
 80010c0:	4fc3      	ldr	r7, [pc, #780]	@ (80013d0 <main+0x338>)
	arm_fir_init_q15(&hfir0, NUM_FILTER_TAPS, ftaps_q15, mic0_state, SAMPLE_SIZE);
 80010c2:	f000 fd7d 	bl	8001bc0 <arm_fir_init_q15>
	arm_fir_init_q15(&hfir1, NUM_FILTER_TAPS, ftaps_q15, mic1_state, SAMPLE_SIZE);
 80010c6:	4bc3      	ldr	r3, [pc, #780]	@ (80013d4 <main+0x33c>)
 80010c8:	4abc      	ldr	r2, [pc, #752]	@ (80013bc <main+0x324>)
 80010ca:	9400      	str	r4, [sp, #0]
 80010cc:	2130      	movs	r1, #48	@ 0x30
 80010ce:	48c2      	ldr	r0, [pc, #776]	@ (80013d8 <main+0x340>)
 80010d0:	f000 fd76 	bl	8001bc0 <arm_fir_init_q15>
	arm_fir_init_q15(&hfir2, NUM_FILTER_TAPS, ftaps_q15, mic2_state, SAMPLE_SIZE);
 80010d4:	4bc1      	ldr	r3, [pc, #772]	@ (80013dc <main+0x344>)
 80010d6:	4ab9      	ldr	r2, [pc, #740]	@ (80013bc <main+0x324>)
 80010d8:	9400      	str	r4, [sp, #0]
 80010da:	2130      	movs	r1, #48	@ 0x30
 80010dc:	48c0      	ldr	r0, [pc, #768]	@ (80013e0 <main+0x348>)
 80010de:	4cc1      	ldr	r4, [pc, #772]	@ (80013e4 <main+0x34c>)
 80010e0:	f000 fd6e 	bl	8001bc0 <arm_fir_init_q15>
	uart2_set_fcpu(84000000);
 80010e4:	48c0      	ldr	r0, [pc, #768]	@ (80013e8 <main+0x350>)
 80010e6:	f000 fe67 	bl	8001db8 <uart2_set_fcpu>
	uart2_dma1_config(115200, USART_DATA_8, USART_STOP_1);
 80010ea:	2200      	movs	r2, #0
 80010ec:	4611      	mov	r1, r2
 80010ee:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 80010f2:	f000 fe71 	bl	8001dd8 <uart2_dma1_config>
	RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;				// enable TIM2 clock
 80010f6:	49bd      	ldr	r1, [pc, #756]	@ (80013ec <main+0x354>)
	TIM5->CR1 &= ~TIM_CR1_DIR;			// upcounting
 80010f8:	4bbd      	ldr	r3, [pc, #756]	@ (80013f0 <main+0x358>)
	RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;				// enable TIM2 clock
 80010fa:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80010fc:	f042 0208 	orr.w	r2, r2, #8
 8001100:	640a      	str	r2, [r1, #64]	@ 0x40
	TIM5->CR1 &= ~TIM_CR1_DIR;			// upcounting
 8001102:	681a      	ldr	r2, [r3, #0]
	TIM5->PSC = 839;					// 100kHz frequency
 8001104:	f240 3047 	movw	r0, #839	@ 0x347
	TIM5->ARR = 0xffffffff;
 8001108:	f04f 31ff 	mov.w	r1, #4294967295
	TIM5->CR1 &= ~TIM_CR1_DIR;			// upcounting
 800110c:	f022 0210 	bic.w	r2, r2, #16
 8001110:	601a      	str	r2, [r3, #0]
	TIM5->PSC = 839;					// 100kHz frequency
 8001112:	6298      	str	r0, [r3, #40]	@ 0x28
	TIM5->ARR = 0xffffffff;
 8001114:	62d9      	str	r1, [r3, #44]	@ 0x2c
	TIM5->EGR |= TIM_EGR_UG;			// generate update event
 8001116:	695a      	ldr	r2, [r3, #20]
 8001118:	f042 0201 	orr.w	r2, r2, #1
 800111c:	615a      	str	r2, [r3, #20]
	TIM5->CR1 |= TIM_CR1_CEN;			// enable counter
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	f042 0201 	orr.w	r2, r2, #1
 8001124:	601a      	str	r2, [r3, #0]
	tim2_trig_config();
 8001126:	f7ff fe19 	bl	8000d5c <tim2_trig_config>
	adc1_dma_config();
 800112a:	f7ff fd3d 	bl	8000ba8 <adc1_dma_config>
	GPIOA->MODER &= ~GPIO_MODER_MODER10;
 800112e:	f8d8 3000 	ldr.w	r3, [r8]
 8001132:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8001136:	f8c8 3000 	str.w	r3, [r8]
	GPIOA->MODER |= GPIO_MODER_MODER10_0;
 800113a:	f8d8 3000 	ldr.w	r3, [r8]
	uint32_t samples = 0;
 800113e:	f04f 0e00 	mov.w	lr, #0
	GPIOA->MODER |= GPIO_MODER_MODER10_0;
 8001142:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
	uint32_t ref_sample = 0;
 8001146:	f8cd e01c 	str.w	lr, [sp, #28]
	GPIOA->MODER |= GPIO_MODER_MODER10_0;
 800114a:	f8c8 3000 	str.w	r3, [r8]
	GPIOA->MODER &= ~GPIO_MODER_MODER8;
 800114e:	f8d8 3000 	ldr.w	r3, [r8]
	uint8_t detected_event = 0;								// has reference microphone detected an event?
 8001152:	f8cd e014 	str.w	lr, [sp, #20]
	GPIOA->MODER &= ~GPIO_MODER_MODER8;
 8001156:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800115a:	f8c8 3000 	str.w	r3, [r8]
	GPIOA->MODER |= GPIO_MODER_MODER8_0;
 800115e:	f8d8 3000 	ldr.w	r3, [r8]
	uint32_t prev_ticks = 0, ticks = 0;
 8001162:	f8cd e010 	str.w	lr, [sp, #16]
	GPIOA->MODER |= GPIO_MODER_MODER8_0;
 8001166:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800116a:	f8c8 3000 	str.w	r3, [r8]
	uint8_t window_ind = 0;
 800116e:	46f3      	mov	fp, lr
		if (!detected_event && ref_time - last_update > UPDATE_PERIOD)
 8001170:	f8cd e008 	str.w	lr, [sp, #8]
		GPIOA->ODR |= GPIO_ODR_OD10;
 8001174:	f8d8 3014 	ldr.w	r3, [r8, #20]
		while (!!(DMA2_Stream0->CR & DMA_SxCR_CT) == dma_tgt);		// wait for stream to complete
 8001178:	499e      	ldr	r1, [pc, #632]	@ (80013f4 <main+0x35c>)
		GPIOA->ODR |= GPIO_ODR_OD10;
 800117a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800117e:	f8c8 3014 	str.w	r3, [r8, #20]
		while (!!(DMA2_Stream0->CR & DMA_SxCR_CT) == dma_tgt);		// wait for stream to complete
 8001182:	4b9d      	ldr	r3, [pc, #628]	@ (80013f8 <main+0x360>)
 8001184:	781a      	ldrb	r2, [r3, #0]
 8001186:	690b      	ldr	r3, [r1, #16]
 8001188:	f3c3 43c0 	ubfx	r3, r3, #19, #1
 800118c:	4293      	cmp	r3, r2
 800118e:	d0fa      	beq.n	8001186 <main+0xee>
		samples += SAMPLE_SIZE;
 8001190:	9b02      	ldr	r3, [sp, #8]
 8001192:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8001196:	9302      	str	r3, [sp, #8]
		ticks = TIM5->CNT;
 8001198:	4b95      	ldr	r3, [pc, #596]	@ (80013f0 <main+0x358>)
 800119a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119c:	9303      	str	r3, [sp, #12]
		GPIOA->ODR &= ~GPIO_ODR_OD10;
 800119e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80011a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80011a6:	f8c8 3014 	str.w	r3, [r8, #20]
		dma_tgt = !dma_tgt;											// switch DMA targets
 80011aa:	fab2 f282 	clz	r2, r2
 80011ae:	4b92      	ldr	r3, [pc, #584]	@ (80013f8 <main+0x360>)
 80011b0:	0952      	lsrs	r2, r2, #5
 80011b2:	701a      	strb	r2, [r3, #0]
		DMA2->LIFCR |= DMA_LIFCR_CTCIF0 | DMA_LIFCR_CHTIF0;			// clear transfer complete and half complete flag
 80011b4:	688b      	ldr	r3, [r1, #8]
 80011b6:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80011ba:	608b      	str	r3, [r1, #8]
		GPIOA->ODR |= GPIO_ODR_OD8;
 80011bc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80011c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011c4:	f8c8 3014 	str.w	r3, [r8, #20]
		stream_splice();
 80011c8:	f7ff fdec 	bl	8000da4 <stream_splice>
		arm_fir_fast_q15(&hfir0, mic0_samp, mic0_filt, SAMPLE_SIZE);
 80011cc:	498b      	ldr	r1, [pc, #556]	@ (80013fc <main+0x364>)
 80011ce:	487c      	ldr	r0, [pc, #496]	@ (80013c0 <main+0x328>)
 80011d0:	4a8b      	ldr	r2, [pc, #556]	@ (8001400 <main+0x368>)
 80011d2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80011d6:	f000 fc83 	bl	8001ae0 <arm_fir_fast_q15>
		arm_fir_fast_q15(&hfir1, mic1_samp, mic1_filt, SAMPLE_SIZE);
 80011da:	498a      	ldr	r1, [pc, #552]	@ (8001404 <main+0x36c>)
 80011dc:	487e      	ldr	r0, [pc, #504]	@ (80013d8 <main+0x340>)
 80011de:	4a8a      	ldr	r2, [pc, #552]	@ (8001408 <main+0x370>)
 80011e0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80011e4:	f000 fc7c 	bl	8001ae0 <arm_fir_fast_q15>
		arm_copy_q15(mic0_filt, mic0_buff + window_ind * SAMPLE_SIZE, SAMPLE_SIZE);
 80011e8:	ebcb 190b 	rsb	r9, fp, fp, lsl #4
		arm_fir_fast_q15(&hfir2, mic2_samp, mic2_filt, SAMPLE_SIZE);
 80011ec:	4987      	ldr	r1, [pc, #540]	@ (800140c <main+0x374>)
 80011ee:	487c      	ldr	r0, [pc, #496]	@ (80013e0 <main+0x348>)
 80011f0:	4a87      	ldr	r2, [pc, #540]	@ (8001410 <main+0x378>)
 80011f2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80011f6:	f000 fc73 	bl	8001ae0 <arm_fir_fast_q15>
		arm_copy_q15(mic0_filt, mic0_buff + window_ind * SAMPLE_SIZE, SAMPLE_SIZE);
 80011fa:	ea4f 1a89 	mov.w	sl, r9, lsl #6
 80011fe:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8001202:	487f      	ldr	r0, [pc, #508]	@ (8001400 <main+0x368>)
 8001204:	9306      	str	r3, [sp, #24]
 8001206:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800120a:	eb06 1189 	add.w	r1, r6, r9, lsl #6
 800120e:	f000 fd7f 	bl	8001d10 <arm_copy_q15>
		arm_copy_q15(mic1_filt, mic1_buff + window_ind * SAMPLE_SIZE, SAMPLE_SIZE);
 8001212:	487d      	ldr	r0, [pc, #500]	@ (8001408 <main+0x370>)
 8001214:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001218:	eb05 010a 	add.w	r1, r5, sl
 800121c:	f000 fd78 	bl	8001d10 <arm_copy_q15>
		arm_copy_q15(mic2_filt, mic2_buff + window_ind * SAMPLE_SIZE, SAMPLE_SIZE);
 8001220:	487b      	ldr	r0, [pc, #492]	@ (8001410 <main+0x378>)
 8001222:	eb04 010a 	add.w	r1, r4, sl
 8001226:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800122a:	f000 fd71 	bl	8001d10 <arm_copy_q15>
		if (!detected_event && ref_time - last_update > UPDATE_PERIOD)
 800122e:	9b05      	ldr	r3, [sp, #20]
 8001230:	bb3b      	cbnz	r3, 8001282 <main+0x1ea>
		float ref_time = prev_ticks * TIME_PERIOD;
 8001232:	eddd 7a04 	vldr	s15, [sp, #16]
 8001236:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800123a:	eddf 7a76 	vldr	s15, [pc, #472]	@ 8001414 <main+0x37c>
 800123e:	ee28 8a27 	vmul.f32	s16, s16, s15
		if (!detected_event && ref_time - last_update > UPDATE_PERIOD)
 8001242:	ee78 7a68 	vsub.f32	s15, s16, s17
 8001246:	ee17 0a90 	vmov	r0, s15
 800124a:	f7ff f929 	bl	80004a0 <__aeabi_f2d>
 800124e:	a358      	add	r3, pc, #352	@ (adr r3, 80013b0 <main+0x318>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f7ff fc0c 	bl	8000a70 <__aeabi_dcmpgt>
 8001258:	2800      	cmp	r0, #0
 800125a:	f040 80ef 	bne.w	800143c <main+0x3a4>
		ticks = TIM5->CNT;
 800125e:	9b03      	ldr	r3, [sp, #12]
 8001260:	9304      	str	r3, [sp, #16]
		if (++window_ind == WINDOW_SIZE)
 8001262:	f10b 0b01 	add.w	fp, fp, #1
		GPIOA->ODR &= ~GPIO_ODR_OD8;
 8001266:	f8d8 3014 	ldr.w	r3, [r8, #20]
		if (++window_ind == WINDOW_SIZE)
 800126a:	fa5f fb8b 	uxtb.w	fp, fp
			window_ind = 0;
 800126e:	f1bb 0f02 	cmp.w	fp, #2
		GPIOA->ODR &= ~GPIO_ODR_OD8;
 8001272:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
			window_ind = 0;
 8001276:	bf08      	it	eq
 8001278:	f04f 0b00 	moveq.w	fp, #0
		GPIOA->ODR &= ~GPIO_ODR_OD8;
 800127c:	f8c8 3014 	str.w	r3, [r8, #20]
	{
 8001280:	e778      	b.n	8001174 <main+0xdc>
		else if (detected_event && ref_sample + SAMPLES_AFTER_DET < samples) 				// make sure enough samples have been taken after peak detected
 8001282:	9b07      	ldr	r3, [sp, #28]
 8001284:	9902      	ldr	r1, [sp, #8]
 8001286:	f103 02bd 	add.w	r2, r3, #189	@ 0xbd
 800128a:	428a      	cmp	r2, r1
 800128c:	d2e7      	bcs.n	800125e <main+0x1c6>
			if (start_sample > -1 && stop_sample < BUFFER_SIZE)			// full length of correlation input is contiguous
 800128e:	3b0a      	subs	r3, #10
 8001290:	f100 810c 	bmi.w	80014ac <main+0x414>
 8001294:	f5b2 7f70 	cmp.w	r2, #960	@ 0x3c0
 8001298:	f280 810b 	bge.w	80014b2 <main+0x41a>
				arm_copy_q15(mic0_buff + start_sample, mic0_corr_buff, CORR_IN_SIZE);
 800129c:	ea4f 0943 	mov.w	r9, r3, lsl #1
 80012a0:	eb06 0043 	add.w	r0, r6, r3, lsl #1
 80012a4:	495c      	ldr	r1, [pc, #368]	@ (8001418 <main+0x380>)
 80012a6:	22c8      	movs	r2, #200	@ 0xc8
 80012a8:	f000 fd32 	bl	8001d10 <arm_copy_q15>
				arm_copy_q15(mic1_buff + start_sample, mic1_corr_buff, CORR_IN_SIZE);
 80012ac:	495b      	ldr	r1, [pc, #364]	@ (800141c <main+0x384>)
 80012ae:	22c8      	movs	r2, #200	@ 0xc8
 80012b0:	eb05 0009 	add.w	r0, r5, r9
 80012b4:	f000 fd2c 	bl	8001d10 <arm_copy_q15>
				arm_copy_q15(mic2_buff + start_sample, mic2_corr_buff, CORR_IN_SIZE);
 80012b8:	4959      	ldr	r1, [pc, #356]	@ (8001420 <main+0x388>)
 80012ba:	eb04 0009 	add.w	r0, r4, r9
 80012be:	22c8      	movs	r2, #200	@ 0xc8
 80012c0:	f000 fd26 	bl	8001d10 <arm_copy_q15>
			arm_fill_q15(0, corr_mic01, CORR_OUT_SIZE);
 80012c4:	4957      	ldr	r1, [pc, #348]	@ (8001424 <main+0x38c>)
 80012c6:	f240 128f 	movw	r2, #399	@ 0x18f
 80012ca:	2000      	movs	r0, #0
 80012cc:	f000 fd4a 	bl	8001d64 <arm_fill_q15>
			arm_fill_q15(0, corr_mic02, CORR_OUT_SIZE);
 80012d0:	4955      	ldr	r1, [pc, #340]	@ (8001428 <main+0x390>)
 80012d2:	f240 128f 	movw	r2, #399	@ 0x18f
 80012d6:	2000      	movs	r0, #0
 80012d8:	f000 fd44 	bl	8001d64 <arm_fill_q15>
			arm_correlate_fast_q15(mic0_corr_buff, CORR_IN_SIZE, mic1_corr_buff, CORR_IN_SIZE, corr_mic01);
 80012dc:	4b51      	ldr	r3, [pc, #324]	@ (8001424 <main+0x38c>)
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	23c8      	movs	r3, #200	@ 0xc8
 80012e2:	4619      	mov	r1, r3
 80012e4:	4a4d      	ldr	r2, [pc, #308]	@ (800141c <main+0x384>)
 80012e6:	484c      	ldr	r0, [pc, #304]	@ (8001418 <main+0x380>)
 80012e8:	f000 f9a4 	bl	8001634 <arm_correlate_fast_q15>
			arm_correlate_fast_q15(mic0_corr_buff, CORR_IN_SIZE, mic2_corr_buff, CORR_IN_SIZE, corr_mic02);
 80012ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001428 <main+0x390>)
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	23c8      	movs	r3, #200	@ 0xc8
 80012f2:	4619      	mov	r1, r3
 80012f4:	4a4a      	ldr	r2, [pc, #296]	@ (8001420 <main+0x388>)
 80012f6:	4848      	ldr	r0, [pc, #288]	@ (8001418 <main+0x380>)
 80012f8:	f000 f99c 	bl	8001634 <arm_correlate_fast_q15>
			arm_absmax_q15(corr_mic01, CORR_OUT_SIZE, &corr_peak_01, &corr_peak_01_ind);
 80012fc:	4849      	ldr	r0, [pc, #292]	@ (8001424 <main+0x38c>)
 80012fe:	ab0a      	add	r3, sp, #40	@ 0x28
 8001300:	aa09      	add	r2, sp, #36	@ 0x24
 8001302:	f240 118f 	movw	r1, #399	@ 0x18f
 8001306:	f000 fc71 	bl	8001bec <arm_absmax_q15>
			arm_absmax_q15(corr_mic02, CORR_OUT_SIZE, &corr_peak_02, &corr_peak_02_ind);
 800130a:	ab0b      	add	r3, sp, #44	@ 0x2c
 800130c:	4846      	ldr	r0, [pc, #280]	@ (8001428 <main+0x390>)
 800130e:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 8001312:	f240 118f 	movw	r1, #399	@ 0x18f
 8001316:	f000 fc69 	bl	8001bec <arm_absmax_q15>
			float mic1_delay = ((int32_t) corr_peak_01_ind - (CORR_IN_SIZE - 1)) * SAMPLE_PERIOD;
 800131a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800131c:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 800142c <main+0x394>
			if (fabs(mic1_delay) < MAX_TDOA && fabs(mic2_delay) < MAX_TDOA)
 8001320:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8001430 <main+0x398>
			float mic1_delay = ((int32_t) corr_peak_01_ind - (CORR_IN_SIZE - 1)) * SAMPLE_PERIOD;
 8001324:	3bc7      	subs	r3, #199	@ 0xc7
 8001326:	ee03 3a10 	vmov	s6, r3
 800132a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800132e:	ee23 3a07 	vmul.f32	s6, s6, s14
			if (fabs(mic1_delay) < MAX_TDOA && fabs(mic2_delay) < MAX_TDOA)
 8001332:	eef0 6ac3 	vabs.f32	s13, s6
 8001336:	eef4 6ae7 	vcmpe.f32	s13, s15
 800133a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133e:	d532      	bpl.n	80013a6 <main+0x30e>
			float mic2_delay = ((int32_t) corr_peak_02_ind - (CORR_IN_SIZE - 1)) * SAMPLE_PERIOD;
 8001340:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8001342:	3bc7      	subs	r3, #199	@ 0xc7
 8001344:	ee03 3a90 	vmov	s7, r3
 8001348:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 800134c:	ee63 3a87 	vmul.f32	s7, s7, s14
			if (fabs(mic1_delay) < MAX_TDOA && fabs(mic2_delay) < MAX_TDOA)
 8001350:	eeb0 7ae3 	vabs.f32	s14, s7
 8001354:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135c:	d523      	bpl.n	80013a6 <main+0x30e>
				if (mic1_delay > 0 && mic2_delay > 0)
 800135e:	eeb5 3ac0 	vcmpe.f32	s6, #0.0
 8001362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001366:	f340 80f6 	ble.w	8001556 <main+0x4be>
 800136a:	eef5 3ac0 	vcmpe.f32	s7, #0.0
 800136e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001372:	f340 80f4 	ble.w	800155e <main+0x4c6>
 8001376:	4b2f      	ldr	r3, [pc, #188]	@ (8001434 <main+0x39c>)
 8001378:	461a      	mov	r2, r3
				compute_event_pos(&coords.coords_f[0], &coords.coords_f[1], MIC0_XPOS,
 800137a:	ed9f 1a12 	vldr	s2, [pc, #72]	@ 80013c4 <main+0x32c>
					coords.coords_f[0] = 0.1;
 800137e:	930c      	str	r3, [sp, #48]	@ 0x30
				compute_event_pos(&coords.coords_f[0], &coords.coords_f[1], MIC0_XPOS,
 8001380:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 8001384:	a90d      	add	r1, sp, #52	@ 0x34
 8001386:	a80c      	add	r0, sp, #48	@ 0x30
 8001388:	eeb0 2a62 	vmov.f32	s4, s5
 800138c:	eef0 1a62 	vmov.f32	s3, s5
 8001390:	eef0 0a41 	vmov.f32	s1, s2
 8001394:	eeb0 0a41 	vmov.f32	s0, s2
					coords.coords_f[1] = 0.1;
 8001398:	920d      	str	r2, [sp, #52]	@ 0x34
				compute_event_pos(&coords.coords_f[0], &coords.coords_f[1], MIC0_XPOS,
 800139a:	f7ff fd6d 	bl	8000e78 <compute_event_pos>
				uart2_dma1_write(8, coords.serial);
 800139e:	a90c      	add	r1, sp, #48	@ 0x30
 80013a0:	2008      	movs	r0, #8
 80013a2:	f000 fe3b 	bl	800201c <uart2_dma1_write>
			detected_event = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	9305      	str	r3, [sp, #20]
 80013aa:	e758      	b.n	800125e <main+0x1c6>
 80013ac:	f3af 8000 	nop.w
 80013b0:	9999999a 	.word	0x9999999a
 80013b4:	3f999999 	.word	0x3f999999
 80013b8:	20003510 	.word	0x20003510
 80013bc:	08002108 	.word	0x08002108
 80013c0:	20005b08 	.word	0x20005b08
 80013c4:	00000000 	.word	0x00000000
 80013c8:	20001a10 	.word	0x20001a10
 80013cc:	20001290 	.word	0x20001290
 80013d0:	20000b0e 	.word	0x20000b0e
 80013d4:	200030f0 	.word	0x200030f0
 80013d8:	20005afc 	.word	0x20005afc
 80013dc:	20002cd0 	.word	0x20002cd0
 80013e0:	20005af0 	.word	0x20005af0
 80013e4:	20000b10 	.word	0x20000b10
 80013e8:	0501bd00 	.word	0x0501bd00
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40000c00 	.word	0x40000c00
 80013f4:	40026400 	.word	0x40026400
 80013f8:	2000392e 	.word	0x2000392e
 80013fc:	200040b0 	.word	0x200040b0
 8001400:	20002910 	.word	0x20002910
 8001404:	20003cf0 	.word	0x20003cf0
 8001408:	20002550 	.word	0x20002550
 800140c:	20003930 	.word	0x20003930
 8001410:	20002190 	.word	0x20002190
 8001414:	3727c5ac 	.word	0x3727c5ac
 8001418:	20000980 	.word	0x20000980
 800141c:	200007f0 	.word	0x200007f0
 8001420:	20000660 	.word	0x20000660
 8001424:	20000340 	.word	0x20000340
 8001428:	20000020 	.word	0x20000020
 800142c:	37d1b717 	.word	0x37d1b717
 8001430:	3ba3d70a 	.word	0x3ba3d70a
 8001434:	3dcccccd 	.word	0x3dcccccd
 8001438:	40020000 	.word	0x40020000
			arm_absmax_q15(mic0_filt, SAMPLE_SIZE, &mic0_filt_peak, &mic0_filt_peak_ind);
 800143c:	484f      	ldr	r0, [pc, #316]	@ (800157c <main+0x4e4>)
 800143e:	ab0a      	add	r3, sp, #40	@ 0x28
 8001440:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 8001444:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001448:	f000 fbd0 	bl	8001bec <arm_absmax_q15>
			arm_absmax_q15(mic1_filt, SAMPLE_SIZE, &mic1_filt_peak, &mic1_filt_peak_ind);
 800144c:	484c      	ldr	r0, [pc, #304]	@ (8001580 <main+0x4e8>)
 800144e:	ab0b      	add	r3, sp, #44	@ 0x2c
 8001450:	aa09      	add	r2, sp, #36	@ 0x24
 8001452:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001456:	f000 fbc9 	bl	8001bec <arm_absmax_q15>
			arm_absmax_q15(mic2_filt, SAMPLE_SIZE, &mic2_filt_peak, &mic2_filt_peak_ind);
 800145a:	ab0c      	add	r3, sp, #48	@ 0x30
 800145c:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 8001460:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001464:	4847      	ldr	r0, [pc, #284]	@ (8001584 <main+0x4ec>)
 8001466:	f000 fbc1 	bl	8001bec <arm_absmax_q15>
			if (mic0_filt_peak_ind < mic1_filt_peak_ind && mic0_filt_peak_ind < mic2_filt_peak_ind && abs(mic0_filt_peak) > ENERGY_THRESH)
 800146a:	e9dd 310a 	ldrd	r3, r1, [sp, #40]	@ 0x28
 800146e:	428b      	cmp	r3, r1
 8001470:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8001472:	d239      	bcs.n	80014e8 <main+0x450>
 8001474:	4293      	cmp	r3, r2
 8001476:	d24b      	bcs.n	8001510 <main+0x478>
 8001478:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	@ 0x22
 800147c:	2a00      	cmp	r2, #0
 800147e:	bfb8      	it	lt
 8001480:	4252      	neglt	r2, r2
 8001482:	b292      	uxth	r2, r2
 8001484:	f5b2 6ffa 	cmp.w	r2, #2000	@ 0x7d0
 8001488:	f67f aee9 	bls.w	800125e <main+0x1c6>
				last_update = ref_time + mic0_filt_peak_ind * SAMPLE_PERIOD;	// update last time peak was detected
 800148c:	ee07 3a90 	vmov	s15, r3
 8001490:	eeb8 7a67 	vcvt.f32.u32	s14, s15
				ref_sample = mic0_filt_peak_ind + window_ind * SAMPLE_SIZE;	// get global sample # for reference in buffer
 8001494:	eb03 1349 	add.w	r3, r3, r9, lsl #5
				last_update = ref_time + mic1_filt_peak_ind * SAMPLE_PERIOD;
 8001498:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8001588 <main+0x4f0>
				ref_sample = mic1_filt_peak_ind + window_ind * SAMPLE_SIZE;
 800149c:	9307      	str	r3, [sp, #28]
				last_update = ref_time + mic1_filt_peak_ind * SAMPLE_PERIOD;
 800149e:	eea7 8a27 	vfma.f32	s16, s14, s15
				detected_event = 1;
 80014a2:	2301      	movs	r3, #1
 80014a4:	9305      	str	r3, [sp, #20]
				last_update = ref_time + mic1_filt_peak_ind * SAMPLE_PERIOD;
 80014a6:	eef0 8a48 	vmov.f32	s17, s16
				detected_event = 1;
 80014aa:	e6d8      	b.n	800125e <main+0x1c6>
					curr_sample = BUFFER_SIZE + start_sample;			// if start is on other end of buffer, move pointer back
 80014ac:	9b07      	ldr	r3, [sp, #28]
 80014ae:	f203 33b6 	addw	r3, r3, #950	@ 0x3b6
				for (uint32_t i = 0; i < CORR_IN_SIZE; i++)
 80014b2:	4a36      	ldr	r2, [pc, #216]	@ (800158c <main+0x4f4>)
 80014b4:	4836      	ldr	r0, [pc, #216]	@ (8001590 <main+0x4f8>)
 80014b6:	4937      	ldr	r1, [pc, #220]	@ (8001594 <main+0x4fc>)
					mic0_corr_buff[i] = mic0_buff[curr_sample];
 80014b8:	f836 9013 	ldrh.w	r9, [r6, r3, lsl #1]
					mic1_corr_buff[i] = mic1_buff[curr_sample];
 80014bc:	f835 e013 	ldrh.w	lr, [r5, r3, lsl #1]
					mic2_corr_buff[i] = mic2_buff[curr_sample];
 80014c0:	f834 c013 	ldrh.w	ip, [r4, r3, lsl #1]
					mic0_corr_buff[i] = mic0_buff[curr_sample];
 80014c4:	f822 9f02 	strh.w	r9, [r2, #2]!
					if (++curr_sample == BUFFER_SIZE)					// wrap pointer back to front on overflow
 80014c8:	3301      	adds	r3, #1
 80014ca:	f5b3 7f70 	cmp.w	r3, #960	@ 0x3c0
					mic1_corr_buff[i] = mic1_buff[curr_sample];
 80014ce:	f820 ef02 	strh.w	lr, [r0, #2]!
					mic2_corr_buff[i] = mic2_buff[curr_sample];
 80014d2:	f821 cf02 	strh.w	ip, [r1, #2]!
					if (++curr_sample == BUFFER_SIZE)					// wrap pointer back to front on overflow
 80014d6:	d002      	beq.n	80014de <main+0x446>
				for (uint32_t i = 0; i < CORR_IN_SIZE; i++)
 80014d8:	4297      	cmp	r7, r2
 80014da:	d1ed      	bne.n	80014b8 <main+0x420>
 80014dc:	e6f2      	b.n	80012c4 <main+0x22c>
 80014de:	4297      	cmp	r7, r2
 80014e0:	f43f aef0 	beq.w	80012c4 <main+0x22c>
 80014e4:	2300      	movs	r3, #0
 80014e6:	e7e7      	b.n	80014b8 <main+0x420>
			else if (mic1_filt_peak_ind < mic0_filt_peak_ind && mic1_filt_peak_ind < mic2_filt_peak_ind && abs(mic1_filt_peak) > ENERGY_THRESH)
 80014e8:	d93d      	bls.n	8001566 <main+0x4ce>
 80014ea:	4291      	cmp	r1, r2
 80014ec:	d210      	bcs.n	8001510 <main+0x478>
 80014ee:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	bfb8      	it	lt
 80014f6:	425b      	neglt	r3, r3
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80014fe:	f67f aeae 	bls.w	800125e <main+0x1c6>
				last_update = ref_time + mic1_filt_peak_ind * SAMPLE_PERIOD;
 8001502:	ee07 1a90 	vmov	s15, r1
				ref_sample = mic1_filt_peak_ind + window_ind * SAMPLE_SIZE;
 8001506:	eb01 1349 	add.w	r3, r1, r9, lsl #5
				last_update = ref_time + mic1_filt_peak_ind * SAMPLE_PERIOD;
 800150a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800150e:	e7c3      	b.n	8001498 <main+0x400>
			else if (mic2_filt_peak_ind < mic0_filt_peak_ind && mic2_filt_peak_ind < mic1_filt_peak_ind && abs(mic2_filt_peak) > ENERGY_THRESH)
 8001510:	4293      	cmp	r3, r2
 8001512:	f67f aea4 	bls.w	800125e <main+0x1c6>
 8001516:	4291      	cmp	r1, r2
 8001518:	f67f aea1 	bls.w	800125e <main+0x1c6>
 800151c:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	@ 0x26
 8001520:	2b00      	cmp	r3, #0
 8001522:	bfb8      	it	lt
 8001524:	425b      	neglt	r3, r3
 8001526:	b29b      	uxth	r3, r3
 8001528:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800152c:	f67f ae97 	bls.w	800125e <main+0x1c6>
				last_update = ref_time + mic2_filt_peak_ind * SAMPLE_PERIOD;
 8001530:	ee07 2a90 	vmov	s15, r2
 8001534:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001538:	eddf 7a13 	vldr	s15, [pc, #76]	@ 8001588 <main+0x4f0>
				ref_sample = mic2_filt_peak_ind + window_ind * SAMPLE_SIZE;
 800153c:	9b06      	ldr	r3, [sp, #24]
				last_update = ref_time + mic2_filt_peak_ind * SAMPLE_PERIOD;
 800153e:	eea7 8a27 	vfma.f32	s16, s14, s15
				ref_sample = mic2_filt_peak_ind + window_ind * SAMPLE_SIZE;
 8001542:	eba3 030b 	sub.w	r3, r3, fp
 8001546:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800154a:	9307      	str	r3, [sp, #28]
				detected_event = 1;
 800154c:	2301      	movs	r3, #1
				last_update = ref_time + mic2_filt_peak_ind * SAMPLE_PERIOD;
 800154e:	eef0 8a48 	vmov.f32	s17, s16
				detected_event = 1;
 8001552:	9305      	str	r3, [sp, #20]
		{
 8001554:	e683      	b.n	800125e <main+0x1c6>
				else if (mic1_delay < 0 && mic2_delay > 0)
 8001556:	d409      	bmi.n	800156c <main+0x4d4>
 8001558:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <main+0x500>)
 800155a:	461a      	mov	r2, r3
 800155c:	e70d      	b.n	800137a <main+0x2e2>
				else if (mic1_delay > 0 && mic2_delay < 0)
 800155e:	d5fb      	bpl.n	8001558 <main+0x4c0>
 8001560:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <main+0x504>)
 8001562:	461a      	mov	r2, r3
 8001564:	e709      	b.n	800137a <main+0x2e2>
			else if (mic2_filt_peak_ind < mic0_filt_peak_ind && mic2_filt_peak_ind < mic1_filt_peak_ind && abs(mic2_filt_peak) > ENERGY_THRESH)
 8001566:	4293      	cmp	r3, r2
 8001568:	d8d8      	bhi.n	800151c <main+0x484>
 800156a:	e678      	b.n	800125e <main+0x1c6>
				else if (mic1_delay < 0 && mic2_delay > 0)
 800156c:	eef5 3ac0 	vcmpe.f32	s7, #0.0
 8001570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001574:	ddf0      	ble.n	8001558 <main+0x4c0>
 8001576:	4b0a      	ldr	r3, [pc, #40]	@ (80015a0 <main+0x508>)
 8001578:	4a0a      	ldr	r2, [pc, #40]	@ (80015a4 <main+0x50c>)
 800157a:	e6fe      	b.n	800137a <main+0x2e2>
 800157c:	20002910 	.word	0x20002910
 8001580:	20002550 	.word	0x20002550
 8001584:	20002190 	.word	0x20002190
 8001588:	37d1b717 	.word	0x37d1b717
 800158c:	2000097e 	.word	0x2000097e
 8001590:	200007ee 	.word	0x200007ee
 8001594:	2000065e 	.word	0x2000065e
 8001598:	3f4ccccd 	.word	0x3f4ccccd
 800159c:	3f333333 	.word	0x3f333333
 80015a0:	3f666666 	.word	0x3f666666
 80015a4:	3dcccccd 	.word	0x3dcccccd

080015a8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015a8:	e7fe      	b.n	80015a8 <NMI_Handler>
 80015aa:	bf00      	nop

080015ac <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ac:	e7fe      	b.n	80015ac <HardFault_Handler>
 80015ae:	bf00      	nop

080015b0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <MemManage_Handler>
 80015b2:	bf00      	nop

080015b4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <BusFault_Handler>
 80015b6:	bf00      	nop

080015b8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <UsageFault_Handler>
 80015ba:	bf00      	nop

080015bc <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop

080015c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop

080015c4 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop

080015c8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c8:	f000 bbea 	b.w	8001da0 <HAL_IncTick>

080015cc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015cc:	4a03      	ldr	r2, [pc, #12]	@ (80015dc <SystemInit+0x10>)
 80015ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80015d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015d6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001618 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015e4:	f7ff fff2 	bl	80015cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015e8:	480c      	ldr	r0, [pc, #48]	@ (800161c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ea:	490d      	ldr	r1, [pc, #52]	@ (8001620 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001624 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f0:	e002      	b.n	80015f8 <LoopCopyDataInit>

080015f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f6:	3304      	adds	r3, #4

080015f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015fc:	d3f9      	bcc.n	80015f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001628 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001600:	4c0a      	ldr	r4, [pc, #40]	@ (800162c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001604:	e001      	b.n	800160a <LoopFillZerobss>

08001606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001608:	3204      	adds	r2, #4

0800160a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800160c:	d3fb      	bcc.n	8001606 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800160e:	f000 fd4b 	bl	80020a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001612:	f7ff fd41 	bl	8001098 <main>
  bx  lr    
 8001616:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001618:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800161c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001620:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001624:	08002170 	.word	0x08002170
  ldr r2, =_sbss
 8001628:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800162c:	20005b1c 	.word	0x20005b1c

08001630 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001630:	e7fe      	b.n	8001630 <ADC_IRQHandler>
	...

08001634 <arm_correlate_fast_q15>:
  const q15_t * pSrcA,
        uint32_t srcALen,
  const q15_t * pSrcB,
        uint32_t srcBLen,
        q15_t * pDst)
{
 8001634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001638:	460d      	mov	r5, r1
 800163a:	b08f      	sub	sp, #60	@ 0x3c
   * we include zeroes in the output instead of zero padding either of the the inputs*/
  /* If srcALen > srcBLen,
   * (srcALen - srcBLen) zeroes has to included in the starting of the output buffer */
  /* If srcALen < srcBLen,
   * (srcALen - srcBLen) zeroes has to included in the ending of the output buffer */
  if (srcALen >= srcBLen)
 800163c:	429d      	cmp	r5, r3
{
 800163e:	9305      	str	r3, [sp, #20]
 8001640:	4611      	mov	r1, r2
  if (srcALen >= srcBLen)
 8001642:	f0c0 815b 	bcc.w	80018fc <arm_correlate_fast_q15+0x2c8>
     * Instead, (outBlockSize - (srcALen + srcBLen - 1))
     * number of output samples are made zero */
    j = outBlockSize - (srcALen + (srcBLen - 1U));

    /* Updating the pointer position to non zero value */
    pOut += j;
 8001646:	9a18      	ldr	r2, [sp, #96]	@ 0x60
    j = outBlockSize - (srcALen + (srcBLen - 1U));
 8001648:	1aeb      	subs	r3, r5, r3
    pOut += j;
 800164a:	eb02 0443 	add.w	r4, r2, r3, lsl #1
 800164e:	f04f 0b02 	mov.w	fp, #2
   * for every iteration. */

  /* The algorithm is implemented in three stages.
     The loop counters of each stage is initiated here. */
  blockSize1 = srcBLen - 1U;
  blockSize2 = srcALen - (srcBLen - 1U);
 8001652:	9b05      	ldr	r3, [sp, #20]
 8001654:	3501      	adds	r5, #1
 8001656:	1aea      	subs	r2, r5, r3

  /* Working pointer of inputA */
  px = pIn1;

  /* Working pointer of inputB */
  pSrc1 = pIn2 + (srcBLen - 1U);
 8001658:	f103 4800 	add.w	r8, r3, #2147483648	@ 0x80000000
  blockSize2 = srcALen - (srcBLen - 1U);
 800165c:	9209      	str	r2, [sp, #36]	@ 0x24
  pSrc1 = pIn2 + (srcBLen - 1U);
 800165e:	f108 38ff 	add.w	r8, r8, #4294967295
  /* ------------------------
   * Stage1 process
   * ----------------------*/

  /* The first loop starts here */
  while (blockSize1 > 0U)
 8001662:	1e5a      	subs	r2, r3, #1
  pSrc1 = pIn2 + (srcBLen - 1U);
 8001664:	eb01 0848 	add.w	r8, r1, r8, lsl #1
  while (blockSize1 > 0U)
 8001668:	f000 822c 	beq.w	8001ac4 <arm_correlate_fast_q15+0x490>
  count = 1U;
 800166c:	e9cd 2401 	strd	r2, r4, [sp, #4]
  while (blockSize1 > 0U)
 8001670:	46a2      	mov	sl, r4
  count = 1U;
 8001672:	f04f 0c01 	mov.w	ip, #1
 8001676:	460c      	mov	r4, r1
 8001678:	469e      	mov	lr, r3
    /* Apply loop unrolling and compute 4 MACs simultaneously. */
    k = count >> 2U;

    /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
     ** a second loop below computes MACs for the remaining 1 to 3 samples. */
    while (k > 0U)
 800167a:	ea5f 069c 	movs.w	r6, ip, lsr #2
      k--;
    }

    /* If the count is not a multiple of 4, compute any remaining MACs here.
       No loop unrolling is used. */
    k = count % 0x4U;
 800167e:	f00c 0703 	and.w	r7, ip, #3
    while (k > 0U)
 8001682:	d07f      	beq.n	8001784 <arm_correlate_fast_q15+0x150>
 8001684:	4601      	mov	r1, r0
 8001686:	4642      	mov	r2, r8
    k = count >> 2U;
 8001688:	4635      	mov	r5, r6
    sum = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	f8cd 8000 	str.w	r8, [sp]
  q15_t const * pQ15)
{
  q31_t val;

#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (&val, pQ15, 4);
 8001690:	f8d1 8000 	ldr.w	r8, [r1]
 8001694:	f8d2 9000 	ldr.w	r9, [r2]

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001698:	fb28 3809 	smlad	r8, r8, r9, r3
 800169c:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80016a0:	6853      	ldr	r3, [r2, #4]
 80016a2:	3108      	adds	r1, #8
 80016a4:	3208      	adds	r2, #8
 80016a6:	fb29 8303 	smlad	r3, r9, r3, r8
    while (k > 0U)
 80016aa:	3d01      	subs	r5, #1
 80016ac:	d1f0      	bne.n	8001690 <arm_correlate_fast_q15+0x5c>

    while (k > 0U)
 80016ae:	f8dd 8000 	ldr.w	r8, [sp]
 80016b2:	b1cf      	cbz	r7, 80016e8 <arm_correlate_fast_q15+0xb4>
 80016b4:	eb00 01c6 	add.w	r1, r0, r6, lsl #3
 80016b8:	eb08 06c6 	add.w	r6, r8, r6, lsl #3
    {
      /* Perform the multiply-accumulates */
      /* x[0] * y[srcBLen - 1] */
      sum = __SMLAD(*px++, *py++, sum);
 80016bc:	f9b1 2000 	ldrsh.w	r2, [r1]
 80016c0:	f9b6 5000 	ldrsh.w	r5, [r6]
 80016c4:	fb22 3205 	smlad	r2, r2, r5, r3
    while (k > 0U)
 80016c8:	2f01      	cmp	r7, #1
 80016ca:	d059      	beq.n	8001780 <arm_correlate_fast_q15+0x14c>
      sum = __SMLAD(*px++, *py++, sum);
 80016cc:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80016d0:	f9b6 5002 	ldrsh.w	r5, [r6, #2]
 80016d4:	fb23 2205 	smlad	r2, r3, r5, r2
    while (k > 0U)
 80016d8:	2f02      	cmp	r7, #2
 80016da:	d051      	beq.n	8001780 <arm_correlate_fast_q15+0x14c>
      sum = __SMLAD(*px++, *py++, sum);
 80016dc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80016e0:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 80016e4:	fb23 2301 	smlad	r3, r3, r1, r2
    /* Update the inputA and inputB pointers for next MAC calculation */
    py = pSrc1 - count;
    px = pIn1;

    /* Increment MAC count */
    count++;
 80016e8:	f10c 0c01 	add.w	ip, ip, #1
    *pOut = (q15_t) (sum >> 15);
 80016ec:	13db      	asrs	r3, r3, #15
  while (blockSize1 > 0U)
 80016ee:	45e6      	cmp	lr, ip
    *pOut = (q15_t) (sum >> 15);
 80016f0:	f8aa 3000 	strh.w	r3, [sl]
    py = pSrc1 - count;
 80016f4:	f1a8 0802 	sub.w	r8, r8, #2
    pOut += inc;
 80016f8:	44da      	add	sl, fp
  while (blockSize1 > 0U)
 80016fa:	d1be      	bne.n	800167a <arm_correlate_fast_q15+0x46>
   * -------------------*/

  /* Stage2 depends on srcBLen as in this stage srcBLen number of MACS are performed.
   * So, to loop unroll over blockSize2,
   * srcBLen should be greater than or equal to 4 */
  if (srcBLen >= 4U)
 80016fc:	9b05      	ldr	r3, [sp, #20]
 80016fe:	9a01      	ldr	r2, [sp, #4]
 8001700:	4621      	mov	r1, r4
 8001702:	9c02      	ldr	r4, [sp, #8]
 8001704:	2b03      	cmp	r3, #3
 8001706:	fb0b 4402 	mla	r4, fp, r2, r4
  {
    /* Loop unroll over blockSize2, by 4 */
    blkCnt = blockSize2 >> 2U;

    while (blkCnt > 0U)
 800170a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  if (srcBLen >= 4U)
 800170c:	d83e      	bhi.n	800178c <arm_correlate_fast_q15+0x158>
  {
    /* If the srcBLen is not a multiple of 4,
     * the blockSize2 loop cannot be unrolled by 4 */
    blkCnt = blockSize2;

    while (blkCnt > 0U)
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 81df 	beq.w	8001ad2 <arm_correlate_fast_q15+0x49e>
 8001714:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001716:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800171a:	005d      	lsls	r5, r3, #1
 800171c:	eb00 0c43 	add.w	ip, r0, r3, lsl #1
  px = pIn1;
 8001720:	4606      	mov	r6, r0
 8001722:	4627      	mov	r7, r4
 8001724:	f101 0e02 	add.w	lr, r1, #2
 8001728:	e00c      	b.n	8001744 <arm_correlate_fast_q15+0x110>
      k = srcBLen;

      while (k > 0U)
      {
        /* Perform the multiply-accumulate */
        sum += ((q31_t) *px++ * *py++);
 800172a:	f8b6 9004 	ldrh.w	r9, [r6, #4]
 800172e:	f8b1 a004 	ldrh.w	sl, [r1, #4]

      /* Increment MAC count */
      count++;

      /* Update the inputA and inputB pointers for next MAC calculation */
      px = pIn1 + count;
 8001732:	3602      	adds	r6, #2
        sum += ((q31_t) *px++ * *py++);
 8001734:	fb19 330a 	smlabb	r3, r9, sl, r3
      *pOut = (q15_t) (sum >> 15);
 8001738:	13db      	asrs	r3, r3, #15
    while (blkCnt > 0U)
 800173a:	4566      	cmp	r6, ip
      *pOut = (q15_t) (sum >> 15);
 800173c:	803b      	strh	r3, [r7, #0]
      pOut += inc;
 800173e:	445f      	add	r7, fp
    while (blkCnt > 0U)
 8001740:	f000 81b7 	beq.w	8001ab2 <arm_correlate_fast_q15+0x47e>
        sum += ((q31_t) *px++ * *py++);
 8001744:	880b      	ldrh	r3, [r1, #0]
 8001746:	f8b6 9000 	ldrh.w	r9, [r6]
 800174a:	fb13 f309 	smulbb	r3, r3, r9
      while (k > 0U)
 800174e:	2a00      	cmp	r2, #0
 8001750:	f000 809f 	beq.w	8001892 <arm_correlate_fast_q15+0x25e>
        sum += ((q31_t) *px++ * *py++);
 8001754:	f8b6 a002 	ldrh.w	sl, [r6, #2]
 8001758:	f8be 9000 	ldrh.w	r9, [lr]
      while (k > 0U)
 800175c:	f1b8 0f02 	cmp.w	r8, #2
        sum += ((q31_t) *px++ * *py++);
 8001760:	fb19 330a 	smlabb	r3, r9, sl, r3
      while (k > 0U)
 8001764:	d1e1      	bne.n	800172a <arm_correlate_fast_q15+0xf6>
      px = pIn1 + count;
 8001766:	3602      	adds	r6, #2
      *pOut = (q15_t) (sum >> 15);
 8001768:	13db      	asrs	r3, r3, #15
    while (blkCnt > 0U)
 800176a:	45b4      	cmp	ip, r6
      *pOut = (q15_t) (sum >> 15);
 800176c:	803b      	strh	r3, [r7, #0]
      pOut += inc;
 800176e:	445f      	add	r7, fp
    while (blkCnt > 0U)
 8001770:	f000 819f 	beq.w	8001ab2 <arm_correlate_fast_q15+0x47e>
        sum += ((q31_t) *px++ * *py++);
 8001774:	880b      	ldrh	r3, [r1, #0]
 8001776:	f8b6 9000 	ldrh.w	r9, [r6]
 800177a:	fb13 f309 	smulbb	r3, r3, r9
      while (k > 0U)
 800177e:	e7e9      	b.n	8001754 <arm_correlate_fast_q15+0x120>
      sum = __SMLAD(*px++, *py++, sum);
 8001780:	4613      	mov	r3, r2
 8001782:	e7b1      	b.n	80016e8 <arm_correlate_fast_q15+0xb4>
    sum = 0;
 8001784:	4633      	mov	r3, r6
    while (k > 0U)
 8001786:	4601      	mov	r1, r0
 8001788:	4646      	mov	r6, r8
 800178a:	e797      	b.n	80016bc <arm_correlate_fast_q15+0x88>
    while (blkCnt > 0U)
 800178c:	089d      	lsrs	r5, r3, #2
 800178e:	f000 819e 	beq.w	8001ace <arm_correlate_fast_q15+0x49a>
      k = srcBLen >> 2U;
 8001792:	9f05      	ldr	r7, [sp, #20]
    blkCnt = blockSize2 >> 2U;
 8001794:	9501      	str	r5, [sp, #4]
      k = srcBLen >> 2U;
 8001796:	08be      	lsrs	r6, r7, #2
 8001798:	eb00 03c6 	add.w	r3, r0, r6, lsl #3
 800179c:	f1a3 0904 	sub.w	r9, r3, #4
 80017a0:	1e73      	subs	r3, r6, #1
 80017a2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80017a6:	9303      	str	r3, [sp, #12]
      k = srcBLen % 0x4U;
 80017a8:	f007 0303 	and.w	r3, r7, #3
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	e9cd 240a 	strd	r2, r4, [sp, #40]	@ 0x28
 80017b2:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80017b6:	e9cd 500c 	strd	r5, r0, [sp, #48]	@ 0x30
 80017ba:	9304      	str	r3, [sp, #16]
 80017bc:	f1cb 0300 	rsb	r3, fp, #0
      k = srcBLen >> 2U;
 80017c0:	9607      	str	r6, [sp, #28]
 80017c2:	eb04 080b 	add.w	r8, r4, fp
  px = pIn1;
 80017c6:	4682      	mov	sl, r0
 80017c8:	9308      	str	r3, [sp, #32]
 80017ca:	9106      	str	r1, [sp, #24]
      k = srcBLen >> 2U;
 80017cc:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
      acc3 = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f8da 2000 	ldr.w	r2, [sl]
 80017d6:	f8da 6002 	ldr.w	r6, [sl, #2]
      acc0 = 0;
 80017da:	f8cd a008 	str.w	sl, [sp, #8]
	  px += 2U;
 80017de:	f10a 0004 	add.w	r0, sl, #4
      acc2 = 0;
 80017e2:	461f      	mov	r7, r3
      acc0 = 0;
 80017e4:	46ca      	mov	sl, r9
      acc1 = 0;
 80017e6:	461d      	mov	r5, r3
      acc0 = 0;
 80017e8:	461c      	mov	r4, r3
 80017ea:	46c1      	mov	r9, r8
 80017ec:	f8dc 1000 	ldr.w	r1, [ip]
 80017f0:	fb22 4201 	smlad	r2, r2, r1, r4
 80017f4:	fb26 5501 	smlad	r5, r6, r1, r5
 80017f8:	6804      	ldr	r4, [r0, #0]
 80017fa:	f8d0 8002 	ldr.w	r8, [r0, #2]
 80017fe:	fb24 7701 	smlad	r7, r4, r1, r7
 8001802:	fb28 3301 	smlad	r3, r8, r1, r3
 8001806:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800180a:	f10c 0c08 	add.w	ip, ip, #8
 800180e:	fb24 2401 	smlad	r4, r4, r1, r2
 8001812:	fb28 5501 	smlad	r5, r8, r1, r5
 8001816:	6842      	ldr	r2, [r0, #4]
 8001818:	f8d0 6006 	ldr.w	r6, [r0, #6]
		px += 4U;
 800181c:	3008      	adds	r0, #8
 800181e:	fb22 7701 	smlad	r7, r2, r1, r7
 8001822:	fb26 3301 	smlad	r3, r6, r1, r3
      } while (--k);
 8001826:	f1be 0e01 	subs.w	lr, lr, #1
 800182a:	d1df      	bne.n	80017ec <arm_correlate_fast_q15+0x1b8>
      if (k == 1U)
 800182c:	9800      	ldr	r0, [sp, #0]
 800182e:	46c8      	mov	r8, r9
 8001830:	2801      	cmp	r0, #1
 8001832:	46d1      	mov	r9, sl
 8001834:	f109 0108 	add.w	r1, r9, #8
 8001838:	f8dd a008 	ldr.w	sl, [sp, #8]
 800183c:	d04f      	beq.n	80018de <arm_correlate_fast_q15+0x2aa>
      if (k == 2U)
 800183e:	2802      	cmp	r0, #2
 8001840:	d130      	bne.n	80018a4 <arm_correlate_fast_q15+0x270>
 8001842:	9803      	ldr	r0, [sp, #12]
 8001844:	6880      	ldr	r0, [r0, #8]
 8001846:	fb22 4400 	smlad	r4, r2, r0, r4
 800184a:	fb26 5500 	smlad	r5, r6, r0, r5
 800184e:	680a      	ldr	r2, [r1, #0]
 8001850:	fb22 7700 	smlad	r7, r2, r0, r7
 8001854:	f8d1 2002 	ldr.w	r2, [r1, #2]
 8001858:	fb22 3300 	smlad	r3, r2, r0, r3
      *pOut = (q15_t) (acc0 >> 15);
 800185c:	9a08      	ldr	r2, [sp, #32]
      *pOut = (q15_t) (acc3 >> 15);
 800185e:	13db      	asrs	r3, r3, #15
      *pOut = (q15_t) (acc0 >> 15);
 8001860:	13e4      	asrs	r4, r4, #15
      *pOut = (q15_t) (acc1 >> 15);
 8001862:	13ed      	asrs	r5, r5, #15
      *pOut = (q15_t) (acc2 >> 15);
 8001864:	13ff      	asrs	r7, r7, #15
      *pOut = (q15_t) (acc0 >> 15);
 8001866:	f828 4002 	strh.w	r4, [r8, r2]
      *pOut = (q15_t) (acc1 >> 15);
 800186a:	f8a8 5000 	strh.w	r5, [r8]
      *pOut = (q15_t) (acc2 >> 15);
 800186e:	f828 700b 	strh.w	r7, [r8, fp]
      *pOut = (q15_t) (acc3 >> 15);
 8001872:	f828 301b 	strh.w	r3, [r8, fp, lsl #1]
    while (blkCnt > 0U)
 8001876:	9b04      	ldr	r3, [sp, #16]
 8001878:	4498      	add	r8, r3
 800187a:	9b01      	ldr	r3, [sp, #4]
 800187c:	3b01      	subs	r3, #1
      px = pIn1 + count;
 800187e:	f10a 0a08 	add.w	sl, sl, #8
    while (blkCnt > 0U)
 8001882:	9301      	str	r3, [sp, #4]
 8001884:	d04b      	beq.n	800191e <arm_correlate_fast_q15+0x2ea>
 8001886:	4689      	mov	r9, r1
 8001888:	e7a0      	b.n	80017cc <arm_correlate_fast_q15+0x198>
        sum += ((q31_t) *px++ * *py++);
 800188a:	880b      	ldrh	r3, [r1, #0]
 800188c:	8832      	ldrh	r2, [r6, #0]
 800188e:	fb13 f302 	smulbb	r3, r3, r2
      px = pIn1 + count;
 8001892:	3602      	adds	r6, #2
      *pOut = (q15_t) (sum >> 15);
 8001894:	13db      	asrs	r3, r3, #15
    while (blkCnt > 0U)
 8001896:	45b4      	cmp	ip, r6
      *pOut = (q15_t) (sum >> 15);
 8001898:	803b      	strh	r3, [r7, #0]
      pOut += inc;
 800189a:	445f      	add	r7, fp
    while (blkCnt > 0U)
 800189c:	d1f5      	bne.n	800188a <arm_correlate_fast_q15+0x256>

    /* Decrement the loop counter */
    blockSize3--;
  }

}
 800189e:	b00f      	add	sp, #60	@ 0x3c
 80018a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (k == 3U)
 80018a4:	2803      	cmp	r0, #3
 80018a6:	d1d9      	bne.n	800185c <arm_correlate_fast_q15+0x228>
 80018a8:	9803      	ldr	r0, [sp, #12]
 80018aa:	f8d1 c002 	ldr.w	ip, [r1, #2]
 80018ae:	6880      	ldr	r0, [r0, #8]
 80018b0:	fb22 4200 	smlad	r2, r2, r0, r4
 80018b4:	fb26 5500 	smlad	r5, r6, r0, r5
 80018b8:	680c      	ldr	r4, [r1, #0]
 80018ba:	fb24 7700 	smlad	r7, r4, r0, r7
 80018be:	fb2c 3e00 	smlad	lr, ip, r0, r3
        c0 = (*py);
 80018c2:	9803      	ldr	r0, [sp, #12]
 80018c4:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
        c0 = c0 & 0x0000FFFF;
 80018c8:	b280      	uxth	r0, r0

__STATIC_FORCEINLINE uint32_t __SMLADX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80018ca:	fb26 2410 	smladx	r4, r6, r0, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80018ce:	fb2c 5500 	smlad	r5, ip, r0, r5
  __ASM volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80018d2:	fb2c 7710 	smladx	r7, ip, r0, r7
 80018d6:	684b      	ldr	r3, [r1, #4]
 80018d8:	fb23 e310 	smladx	r3, r3, r0, lr
  return(result);
 80018dc:	e7be      	b.n	800185c <arm_correlate_fast_q15+0x228>
        c0 = *py;
 80018de:	9803      	ldr	r0, [sp, #12]
 80018e0:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
        c0 = c0 & 0x0000FFFF;
 80018e4:	b280      	uxth	r0, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80018e6:	fb22 4400 	smlad	r4, r2, r0, r4
 80018ea:	fb26 5500 	smlad	r5, r6, r0, r5
  __ASM volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80018ee:	fb26 7710 	smladx	r7, r6, r0, r7
 80018f2:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80018f6:	fb22 3310 	smladx	r3, r2, r0, r3
      if (k == 3U)
 80018fa:	e7af      	b.n	800185c <arm_correlate_fast_q15+0x228>
    pOut = pDst + ((srcALen + srcBLen) - 2U);
 80018fc:	461c      	mov	r4, r3
 80018fe:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8001902:	4606      	mov	r6, r0
 8001904:	3b02      	subs	r3, #2
    pIn1 = pSrcB;
 8001906:	4608      	mov	r0, r1
    pOut = pDst + ((srcALen + srcBLen) - 2U);
 8001908:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800190a:	442b      	add	r3, r5
 800190c:	462a      	mov	r2, r5
    srcBLen = srcALen;
 800190e:	9205      	str	r2, [sp, #20]
    srcALen = j;
 8001910:	4625      	mov	r5, r4
    pOut = pDst + ((srcALen + srcBLen) - 2U);
 8001912:	f06f 0b01 	mvn.w	fp, #1
 8001916:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    pIn2 = pSrcA;
 800191a:	4631      	mov	r1, r6
 800191c:	e699      	b.n	8001652 <arm_correlate_fast_q15+0x1e>
 800191e:	e9dd 500c 	ldrd	r5, r0, [sp, #48]	@ 0x30
 8001922:	e9dd 240a 	ldrd	r2, r4, [sp, #40]	@ 0x28
 8001926:	9b04      	ldr	r3, [sp, #16]
 8001928:	9906      	ldr	r1, [sp, #24]
 800192a:	fb03 4405 	mla	r4, r3, r5, r4
 800192e:	eb00 0ec5 	add.w	lr, r0, r5, lsl #3
 8001932:	00ad      	lsls	r5, r5, #2
    while (blkCnt > 0U)
 8001934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001936:	f013 0603 	ands.w	r6, r3, #3
 800193a:	d06b      	beq.n	8001a14 <arm_correlate_fast_q15+0x3e0>
      k = srcBLen >> 2U;
 800193c:	9b05      	ldr	r3, [sp, #20]
 800193e:	f105 0c01 	add.w	ip, r5, #1
 8001942:	089f      	lsrs	r7, r3, #2
      k = srcBLen % 0x4U;
 8001944:	f003 0a03 	and.w	sl, r3, #3
 8001948:	4435      	add	r5, r6
 800194a:	1c83      	adds	r3, r0, #2
 800194c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8001950:	00fd      	lsls	r5, r7, #3
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	9501      	str	r5, [sp, #4]
 8001956:	eb01 08c7 	add.w	r8, r1, r7, lsl #3
 800195a:	e9cd 2603 	strd	r2, r6, [sp, #12]
      k = srcBLen >> 2U;
 800195e:	9702      	str	r7, [sp, #8]
 8001960:	e9dd 7600 	ldrd	r7, r6, [sp]
 8001964:	f101 0308 	add.w	r3, r1, #8
 8001968:	e9cd 0105 	strd	r0, r1, [sp, #20]
 800196c:	4655      	mov	r5, sl
 800196e:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
      k = srcBLen % 0x4U;
 8001972:	46a1      	mov	r9, r4
 8001974:	4621      	mov	r1, r4
 8001976:	469a      	mov	sl, r3
      sum = 0;
 8001978:	e9cd 9100 	strd	r9, r1, [sp]
      k = srcBLen >> 2U;
 800197c:	9c02      	ldr	r4, [sp, #8]
 800197e:	f10e 0008 	add.w	r0, lr, #8
 8001982:	4652      	mov	r2, sl
      sum = 0;
 8001984:	2300      	movs	r3, #0
        sum += ((q31_t) *px++ * *py++);
 8001986:	f830 9c08 	ldrh.w	r9, [r0, #-8]
 800198a:	f832 1c08 	ldrh.w	r1, [r2, #-8]
 800198e:	fb19 3301 	smlabb	r3, r9, r1, r3
        sum += ((q31_t) *px++ * *py++);
 8001992:	f830 9c06 	ldrh.w	r9, [r0, #-6]
 8001996:	f832 1c06 	ldrh.w	r1, [r2, #-6]
 800199a:	fb19 3301 	smlabb	r3, r9, r1, r3
        sum += ((q31_t) *px++ * *py++);
 800199e:	f830 9c04 	ldrh.w	r9, [r0, #-4]
 80019a2:	f832 1c04 	ldrh.w	r1, [r2, #-4]
 80019a6:	fb19 3301 	smlabb	r3, r9, r1, r3
        sum += ((q31_t) *px++ * *py++);
 80019aa:	f830 9c02 	ldrh.w	r9, [r0, #-2]
 80019ae:	f832 1c02 	ldrh.w	r1, [r2, #-2]
      while (k > 0U)
 80019b2:	3c01      	subs	r4, #1
 80019b4:	f100 0008 	add.w	r0, r0, #8
        sum += ((q31_t) *px++ * *py++);
 80019b8:	fb19 3301 	smlabb	r3, r9, r1, r3
      while (k > 0U)
 80019bc:	f102 0208 	add.w	r2, r2, #8
 80019c0:	d1e1      	bne.n	8001986 <arm_correlate_fast_q15+0x352>
 80019c2:	e9dd 9100 	ldrd	r9, r1, [sp]
 80019c6:	eb0e 0206 	add.w	r2, lr, r6
      while (k > 0U)
 80019ca:	b19d      	cbz	r5, 80019f4 <arm_correlate_fast_q15+0x3c0>
        sum += ((q31_t) * px++ * *py++);
 80019cc:	f83e 0006 	ldrh.w	r0, [lr, r6]
 80019d0:	f8b8 4000 	ldrh.w	r4, [r8]
      while (k > 0U)
 80019d4:	2d01      	cmp	r5, #1
        sum += ((q31_t) * px++ * *py++);
 80019d6:	fb14 3300 	smlabb	r3, r4, r0, r3
      while (k > 0U)
 80019da:	d00b      	beq.n	80019f4 <arm_correlate_fast_q15+0x3c0>
        sum += ((q31_t) * px++ * *py++);
 80019dc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80019e0:	8850      	ldrh	r0, [r2, #2]
      while (k > 0U)
 80019e2:	2d02      	cmp	r5, #2
        sum += ((q31_t) * px++ * *py++);
 80019e4:	fb14 3300 	smlabb	r3, r4, r0, r3
      while (k > 0U)
 80019e8:	d004      	beq.n	80019f4 <arm_correlate_fast_q15+0x3c0>
        sum += ((q31_t) * px++ * *py++);
 80019ea:	8890      	ldrh	r0, [r2, #4]
 80019ec:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80019f0:	fb10 3302 	smlabb	r3, r0, r2, r3
      px = pIn1 + count;
 80019f4:	46e6      	mov	lr, ip
    while (blkCnt > 0U)
 80019f6:	f10c 0c02 	add.w	ip, ip, #2
      *pOut = (q15_t) (sum >> 15);
 80019fa:	13db      	asrs	r3, r3, #15
    while (blkCnt > 0U)
 80019fc:	4567      	cmp	r7, ip
      *pOut = (q15_t) (sum >> 15);
 80019fe:	f8a9 3000 	strh.w	r3, [r9]
      pOut += inc;
 8001a02:	44d9      	add	r9, fp
    while (blkCnt > 0U)
 8001a04:	d1b8      	bne.n	8001978 <arm_correlate_fast_q15+0x344>
 8001a06:	e9dd 2603 	ldrd	r2, r6, [sp, #12]
 8001a0a:	460c      	mov	r4, r1
 8001a0c:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8001a10:	fb0b 4406 	mla	r4, fp, r6, r4
  pSrc1 = (pIn1 + srcALen) - (srcBLen - 1U);
 8001a14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001a16:	eb00 0e43 	add.w	lr, r0, r3, lsl #1
    while (k > 0U)
 8001a1a:	0890      	lsrs	r0, r2, #2
 8001a1c:	d05c      	beq.n	8001ad8 <arm_correlate_fast_q15+0x4a4>
  px = pIn1;
 8001a1e:	4676      	mov	r6, lr
 8001a20:	460d      	mov	r5, r1
    k = count >> 2U;
 8001a22:	4607      	mov	r7, r0
    sum = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	f8d6 c000 	ldr.w	ip, [r6]
 8001a2a:	f8d5 8000 	ldr.w	r8, [r5]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001a2e:	fb2c 3308 	smlad	r3, ip, r8, r3
 8001a32:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8001a36:	f8d5 8004 	ldr.w	r8, [r5, #4]
      sum = __SMLAD(read_q15x2_ia ((q15_t **) &px), read_q15x2_ia ((q15_t **) &py), sum);
 8001a3a:	3608      	adds	r6, #8
 8001a3c:	3508      	adds	r5, #8
 8001a3e:	fb2c 3308 	smlad	r3, ip, r8, r3
    while (k > 0U)
 8001a42:	3f01      	subs	r7, #1
 8001a44:	d1ef      	bne.n	8001a26 <arm_correlate_fast_q15+0x3f2>
 8001a46:	eb01 06c0 	add.w	r6, r1, r0, lsl #3
 8001a4a:	eb0e 00c0 	add.w	r0, lr, r0, lsl #3
    while (k > 0U)
 8001a4e:	f012 0703 	ands.w	r7, r2, #3
 8001a52:	d015      	beq.n	8001a80 <arm_correlate_fast_q15+0x44c>
      sum = __SMLAD(*px++, *py++, sum);
 8001a54:	f9b0 5000 	ldrsh.w	r5, [r0]
 8001a58:	f9b6 c000 	ldrsh.w	ip, [r6]
 8001a5c:	fb25 350c 	smlad	r5, r5, ip, r3
    while (k > 0U)
 8001a60:	2f01      	cmp	r7, #1
 8001a62:	d024      	beq.n	8001aae <arm_correlate_fast_q15+0x47a>
      sum = __SMLAD(*px++, *py++, sum);
 8001a64:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8001a68:	f9b6 c002 	ldrsh.w	ip, [r6, #2]
 8001a6c:	fb23 530c 	smlad	r3, r3, ip, r5
    while (k > 0U)
 8001a70:	2f02      	cmp	r7, #2
 8001a72:	d005      	beq.n	8001a80 <arm_correlate_fast_q15+0x44c>
      sum = __SMLAD(*px++, *py++, sum);
 8001a74:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8001a78:	f9b6 5004 	ldrsh.w	r5, [r6, #4]
 8001a7c:	fb20 3305 	smlad	r3, r0, r5, r3
    *pOut = (q15_t) (sum >> 15);
 8001a80:	13db      	asrs	r3, r3, #15
  while (blockSize3 > 0U)
 8001a82:	3a01      	subs	r2, #1
    *pOut = (q15_t) (sum >> 15);
 8001a84:	8023      	strh	r3, [r4, #0]
    px = ++pSrc1;
 8001a86:	f10e 0e02 	add.w	lr, lr, #2
    pOut += inc;
 8001a8a:	445c      	add	r4, fp
  while (blockSize3 > 0U)
 8001a8c:	f43f af07 	beq.w	800189e <arm_correlate_fast_q15+0x26a>
    while (k > 0U)
 8001a90:	0890      	lsrs	r0, r2, #2
    sum = 0;
 8001a92:	f04f 0300 	mov.w	r3, #0
    while (k > 0U)
 8001a96:	d1c2      	bne.n	8001a1e <arm_correlate_fast_q15+0x3ea>
  pSrc1 = (pIn1 + srcALen) - (srcBLen - 1U);
 8001a98:	4670      	mov	r0, lr
    while (k > 0U)
 8001a9a:	460e      	mov	r6, r1
      sum = __SMLAD(*px++, *py++, sum);
 8001a9c:	f9b0 5000 	ldrsh.w	r5, [r0]
 8001aa0:	f9b6 c000 	ldrsh.w	ip, [r6]
    k = count % 0x4U;
 8001aa4:	4617      	mov	r7, r2
 8001aa6:	fb25 350c 	smlad	r5, r5, ip, r3
    while (k > 0U)
 8001aaa:	2f01      	cmp	r7, #1
 8001aac:	d1da      	bne.n	8001a64 <arm_correlate_fast_q15+0x430>
      sum = __SMLAD(*px++, *py++, sum);
 8001aae:	462b      	mov	r3, r5
 8001ab0:	e7e6      	b.n	8001a80 <arm_correlate_fast_q15+0x44c>
 8001ab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  pSrc1 = (pIn1 + srcALen) - (srcBLen - 1U);
 8001ab4:	4428      	add	r0, r5
 8001ab6:	fb0b 4403 	mla	r4, fp, r3, r4
    k = count % 0x4U;
 8001aba:	460e      	mov	r6, r1
  pSrc1 = (pIn1 + srcALen) - (srcBLen - 1U);
 8001abc:	4686      	mov	lr, r0
    k = count % 0x4U;
 8001abe:	4617      	mov	r7, r2
    sum = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	e7c7      	b.n	8001a54 <arm_correlate_fast_q15+0x420>
    while (blkCnt > 0U)
 8001ac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f47f ae24 	bne.w	8001714 <arm_correlate_fast_q15+0xe0>
 8001acc:	e6e7      	b.n	800189e <arm_correlate_fast_q15+0x26a>
  px = pIn1;
 8001ace:	4686      	mov	lr, r0
 8001ad0:	e730      	b.n	8001934 <arm_correlate_fast_q15+0x300>
  pSrc1 = (pIn1 + srcALen) - (srcBLen - 1U);
 8001ad2:	4686      	mov	lr, r0
    while (blkCnt > 0U)
 8001ad4:	460e      	mov	r6, r1
 8001ad6:	e7ba      	b.n	8001a4e <arm_correlate_fast_q15+0x41a>
    sum = 0;
 8001ad8:	4603      	mov	r3, r0
    while (k > 0U)
 8001ada:	2203      	movs	r2, #3
 8001adc:	e7dc      	b.n	8001a98 <arm_correlate_fast_q15+0x464>
 8001ade:	bf00      	nop

08001ae0 <arm_fir_fast_q15>:
ARM_DSP_ATTRIBUTE void arm_fir_fast_q15(
  const arm_fir_instance_q15 * S,
  const q15_t * pSrc,
        q15_t * pDst,
        uint32_t blockSize)
{
 8001ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ae4:	460e      	mov	r6, r1
 8001ae6:	4617      	mov	r7, r2
        q15_t *pState = S->pState;                     /* State pointer */
 8001ae8:	f8d0 9004 	ldr.w	r9, [r0, #4]
  const q15_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
 8001aec:	6881      	ldr	r1, [r0, #8]
        q15_t *pStateCurnt;                            /* Points to the current sample of the state */
        q15_t *px;                                     /* Temporary pointer for state buffer */
  const q15_t *pb;                                     /* Temporary pointer for coefficient buffer */
        q31_t acc0;                                    /* Accumulators */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 8001aee:	8802      	ldrh	r2, [r0, #0]
{
 8001af0:	b083      	sub	sp, #12
  /* Initialize blkCnt with number of taps */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d062      	beq.n	8001bbc <arm_fir_fast_q15+0xdc>
 8001af6:	eb09 0842 	add.w	r8, r9, r2, lsl #1
 8001afa:	f109 0e02 	add.w	lr, r9, #2
 8001afe:	46cb      	mov	fp, r9
 8001b00:	f1a8 0804 	sub.w	r8, r8, #4

    /* Use SIMD to hold states and coefficients */
    px = pState;
    pb = pCoeffs;

    tapCnt = numTaps >> 1U;
 8001b04:	0855      	lsrs	r5, r2, #1
  blkCnt = blockSize;
 8001b06:	469c      	mov	ip, r3
 8001b08:	1c8c      	adds	r4, r1, #2
 8001b0a:	4691      	mov	r9, r2
    *pStateCurnt++ = *pSrc++;
 8001b0c:	f936 0b02 	ldrsh.w	r0, [r6], #2
 8001b10:	f828 0f02 	strh.w	r0, [r8, #2]!
 8001b14:	2200      	movs	r2, #0
    acc0 = 0;
 8001b16:	e9cd b300 	strd	fp, r3, [sp]
 8001b1a:	f1ae 0a02 	sub.w	sl, lr, #2
 8001b1e:	4610      	mov	r0, r2
 8001b20:	46cb      	mov	fp, r9

    do
    {
      acc0 += (q31_t) *px++ * *pb++;
 8001b22:	f83a 9022 	ldrh.w	r9, [sl, r2, lsl #2]
 8001b26:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
 8001b2a:	fb19 0003 	smlabb	r0, r9, r3, r0
	  acc0 += (q31_t) *px++ * *pb++;
 8001b2e:	f83e 3022 	ldrh.w	r3, [lr, r2, lsl #2]
 8001b32:	f834 9022 	ldrh.w	r9, [r4, r2, lsl #2]

      tapCnt--;
    }
    while (tapCnt > 0U);
 8001b36:	3201      	adds	r2, #1
 8001b38:	4295      	cmp	r5, r2
	  acc0 += (q31_t) *px++ * *pb++;
 8001b3a:	fb13 0009 	smlabb	r0, r3, r9, r0
    while (tapCnt > 0U);
 8001b3e:	d1f0      	bne.n	8001b22 <arm_fir_fast_q15+0x42>

    /* The result is in 2.30 format. Convert to 1.15 with saturation.
       Then store the output in the destination buffer. */
    *pDst++ = (q15_t) (__SSAT((acc0 >> 15), 16));
 8001b40:	46d9      	mov	r9, fp
 8001b42:	13c0      	asrs	r0, r0, #15
 8001b44:	e9dd b300 	ldrd	fp, r3, [sp]
 8001b48:	f300 000f 	ssat	r0, #16, r0
  while (blkCnt > 0U)
 8001b4c:	f1bc 0c01 	subs.w	ip, ip, #1
    *pDst++ = (q15_t) (__SSAT((acc0 >> 15), 16));
 8001b50:	f827 0b02 	strh.w	r0, [r7], #2
  while (blkCnt > 0U)
 8001b54:	f10e 0e02 	add.w	lr, lr, #2
 8001b58:	d1d8      	bne.n	8001b0c <arm_fir_fast_q15+0x2c>
 8001b5a:	464a      	mov	r2, r9
 8001b5c:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 8001b60:	46d9      	mov	r9, fp
  tapCnt = (numTaps - 1U);

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy remaining data */
  while (tapCnt > 0U)
 8001b62:	1e51      	subs	r1, r2, #1
 8001b64:	d010      	beq.n	8001b88 <arm_fir_fast_q15+0xa8>
 8001b66:	1e90      	subs	r0, r2, #2
 8001b68:	2806      	cmp	r0, #6
 8001b6a:	f103 0002 	add.w	r0, r3, #2
 8001b6e:	d901      	bls.n	8001b74 <arm_fir_fast_q15+0x94>
 8001b70:	4581      	cmp	r9, r0
 8001b72:	d10c      	bne.n	8001b8e <arm_fir_fast_q15+0xae>
 8001b74:	f1a9 0902 	sub.w	r9, r9, #2
 8001b78:	e000      	b.n	8001b7c <arm_fir_fast_q15+0x9c>
 8001b7a:	3002      	adds	r0, #2
  {
    *pStateCurnt++ = *pState++;
 8001b7c:	f930 3c02 	ldrsh.w	r3, [r0, #-2]
 8001b80:	f829 3f02 	strh.w	r3, [r9, #2]!
  while (tapCnt > 0U)
 8001b84:	3901      	subs	r1, #1
 8001b86:	d1f8      	bne.n	8001b7a <arm_fir_fast_q15+0x9a>

    /* Decrement loop counter */
    tapCnt--;
  }

}
 8001b88:	b003      	add	sp, #12
 8001b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b8e:	3a03      	subs	r2, #3
 8001b90:	0852      	lsrs	r2, r2, #1
 8001b92:	3201      	adds	r2, #1
 8001b94:	461d      	mov	r5, r3
 8001b96:	464c      	mov	r4, r9
  while (tapCnt > 0U)
 8001b98:	2000      	movs	r0, #0
    *pStateCurnt++ = *pState++;
 8001b9a:	3001      	adds	r0, #1
 8001b9c:	f855 6b04 	ldr.w	r6, [r5], #4
 8001ba0:	f844 6b04 	str.w	r6, [r4], #4
  while (tapCnt > 0U)
 8001ba4:	4290      	cmp	r0, r2
 8001ba6:	d3f8      	bcc.n	8001b9a <arm_fir_fast_q15+0xba>
 8001ba8:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 8001bac:	d0ec      	beq.n	8001b88 <arm_fir_fast_q15+0xa8>
    *pStateCurnt++ = *pState++;
 8001bae:	f933 3022 	ldrsh.w	r3, [r3, r2, lsl #2]
 8001bb2:	f829 3022 	strh.w	r3, [r9, r2, lsl #2]
}
 8001bb6:	b003      	add	sp, #12
 8001bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        q15_t *pState = S->pState;                     /* State pointer */
 8001bbc:	464b      	mov	r3, r9
 8001bbe:	e7d0      	b.n	8001b62 <arm_fir_fast_q15+0x82>

08001bc0 <arm_fir_init_q15>:
        arm_fir_instance_q15 * S,
        uint16_t numTaps,
  const q15_t * pCoeffs,
        q15_t * pState,
        uint32_t blockSize)
{
 8001bc0:	b538      	push	{r3, r4, r5, lr}
  arm_status status;

#if defined (ARM_MATH_DSP)

  /* The Number of filter coefficients in the filter must be even and at least 4 */
  if (numTaps & 0x1U)
 8001bc2:	f011 0501 	ands.w	r5, r1, #1
 8001bc6:	d10e      	bne.n	8001be6 <arm_fir_init_q15+0x26>
    status = ARM_MATH_ARGUMENT_ERROR;
  }
  else
  {
    /* Assign filter taps */
    S->numTaps = numTaps;
 8001bc8:	8001      	strh	r1, [r0, #0]

    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
 8001bca:	468c      	mov	ip, r1

    /* Clear the state buffer.  The size is always (blockSize + numTaps ) */
    memset(pState, 0, (numTaps + (blockSize)) * sizeof(q15_t));
 8001bcc:	9904      	ldr	r1, [sp, #16]
    S->pCoeffs = pCoeffs;
 8001bce:	6082      	str	r2, [r0, #8]
    memset(pState, 0, (numTaps + (blockSize)) * sizeof(q15_t));
 8001bd0:	448c      	add	ip, r1
 8001bd2:	4604      	mov	r4, r0
 8001bd4:	ea4f 024c 	mov.w	r2, ip, lsl #1
 8001bd8:	4629      	mov	r1, r5
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 fa5c 	bl	8002098 <memset>

    /* Assign state pointer */
    S->pState = pState;
 8001be0:	6060      	str	r0, [r4, #4]

    status = ARM_MATH_SUCCESS;
 8001be2:	4628      	mov	r0, r5

  return (status);

#endif /* #if defined (ARM_MATH_DSP) */

}
 8001be4:	bd38      	pop	{r3, r4, r5, pc}
    status = ARM_MATH_ARGUMENT_ERROR;
 8001be6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001bea:	bd38      	pop	{r3, r4, r5, pc}

08001bec <arm_absmax_q15>:
ARM_DSP_ATTRIBUTE void arm_absmax_q15(
  const q15_t * pSrc,
        uint32_t blockSize,
        q15_t * pResult,
        uint32_t * pIndex)
{
 8001bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        uint32_t index;                                /* index of maximum value */                         \
                                                                                                            \
  /* Initialize index value to zero. */                                                                     \
  outIndex = 0U;                                                                                            \
  /* Load first input value that act as reference value for comparison */                                  \
  out = *pSrc++;                                                                                            \
 8001bf0:	4680      	mov	r8, r0
 8001bf2:	f938 cb02 	ldrsh.w	ip, [r8], #2
  out = (out > 0) ? out : (q15_t)__QSUB16(0, out);                                                                           \
 8001bf6:	f1bc 0f00 	cmp.w	ip, #0
 8001bfa:	dc04      	bgt.n	8001c06 <arm_absmax_q15+0x1a>
  __ASM ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001bfc:	2400      	movs	r4, #0
 8001bfe:	fad4 f41c 	qsub16	r4, r4, ip
 8001c02:	fa0f fc84 	sxth.w	ip, r4
  /* Initialize index of extrema value. */                                                                  \
  index = 0U;                                                                                               \
                                                                                                            \
  /* Loop unrolling: Compute 4 outputs at a time */                                                         \
  blkCnt = (blockSize - 1U) >> 2U;                                                                          \
 8001c06:	f101 39ff 	add.w	r9, r1, #4294967295
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 8001c0a:	ea5f 0a99 	movs.w	sl, r9, lsr #2
 8001c0e:	d07c      	beq.n	8001d0a <arm_absmax_q15+0x11e>
  index = 0U;                                                                                               \
 8001c10:	2400      	movs	r4, #0
 8001c12:	300a      	adds	r0, #10
 8001c14:	ea4f 078a 	mov.w	r7, sl, lsl #2
  outIndex = 0U;                                                                                            \
 8001c18:	4625      	mov	r5, r4
 8001c1a:	4626      	mov	r6, r4
  {                                                                                                         \
    /* Initialize cur_absmax to next consecutive values one by one */                                         \
    cur_absmax = *pSrc++;                                                                                     \
 8001c1c:	f930 ec08 	ldrsh.w	lr, [r0, #-8]
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8001c20:	f1be 0f00 	cmp.w	lr, #0
 8001c24:	dc03      	bgt.n	8001c2e <arm_absmax_q15+0x42>
 8001c26:	fad6 fe1e 	qsub16	lr, r6, lr
 8001c2a:	fa0f fe8e 	sxth.w	lr, lr
    /* compare for the extrema value */                                                                     \
    if (cur_absmax > out)                                                                         \
 8001c2e:	45e6      	cmp	lr, ip
    {                                                                                                       \
      /* Update the extrema value and it's index */                                                         \
      out = cur_absmax;                                                                                       \
 8001c30:	bfc8      	it	gt
 8001c32:	46f4      	movgt	ip, lr
      outIndex = index + 1U;                                                                                \
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8001c34:	f930 ec06 	ldrsh.w	lr, [r0, #-6]
      outIndex = index + 1U;                                                                                \
 8001c38:	bfc8      	it	gt
 8001c3a:	1c65      	addgt	r5, r4, #1
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8001c3c:	f1be 0f00 	cmp.w	lr, #0
 8001c40:	dc03      	bgt.n	8001c4a <arm_absmax_q15+0x5e>
 8001c42:	fad6 fe1e 	qsub16	lr, r6, lr
 8001c46:	fa0f fe8e 	sxth.w	lr, lr
    if (cur_absmax > out)                                                                         \
 8001c4a:	45f4      	cmp	ip, lr
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8001c4c:	bfb8      	it	lt
 8001c4e:	46f4      	movlt	ip, lr
      outIndex = index + 2U;                                                                                \
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8001c50:	f930 ec04 	ldrsh.w	lr, [r0, #-4]
      outIndex = index + 2U;                                                                                \
 8001c54:	bfb8      	it	lt
 8001c56:	1ca5      	addlt	r5, r4, #2
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8001c58:	f1be 0f00 	cmp.w	lr, #0
 8001c5c:	dc03      	bgt.n	8001c66 <arm_absmax_q15+0x7a>
 8001c5e:	fad6 fe1e 	qsub16	lr, r6, lr
 8001c62:	fa0f fe8e 	sxth.w	lr, lr
    if (cur_absmax > out)                                                                          \
 8001c66:	45f4      	cmp	ip, lr
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
      outIndex = index + 3U;                                                                                \
 8001c68:	bfa8      	it	ge
 8001c6a:	46e6      	movge	lr, ip
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8001c6c:	f930 cc02 	ldrsh.w	ip, [r0, #-2]
      outIndex = index + 3U;                                                                                \
 8001c70:	bfb8      	it	lt
 8001c72:	1ce5      	addlt	r5, r4, #3
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8001c74:	f1bc 0f00 	cmp.w	ip, #0
 8001c78:	dc03      	bgt.n	8001c82 <arm_absmax_q15+0x96>
 8001c7a:	fad6 fc1c 	qsub16	ip, r6, ip
 8001c7e:	fa0f fc8c 	sxth.w	ip, ip
    if (cur_absmax > out)                                                                          \
 8001c82:	45e6      	cmp	lr, ip
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
      outIndex = index + 4U;                                                                                \
 8001c84:	f104 0404 	add.w	r4, r4, #4
    if (cur_absmax > out)                                                                          \
 8001c88:	bfac      	ite	ge
 8001c8a:	46f4      	movge	ip, lr
      outIndex = index + 4U;                                                                                \
 8001c8c:	4625      	movlt	r5, r4
  while (blkCnt > 0U)                                                                                       \
 8001c8e:	42bc      	cmp	r4, r7
 8001c90:	f100 0008 	add.w	r0, r0, #8
 8001c94:	d1c2      	bne.n	8001c1c <arm_absmax_q15+0x30>
 8001c96:	eb08 08ca 	add.w	r8, r8, sl, lsl #3
                                                                                                            \
  /* Loop unrolling: Compute remaining outputs */                                                           \
  blkCnt = (blockSize - 1U) % 4U;                                                                           \
                                                                                                            \
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 8001c9a:	f019 0403 	ands.w	r4, r9, #3
 8001c9e:	d01f      	beq.n	8001ce0 <arm_absmax_q15+0xf4>
  {                                                                                                         \
    cur_absmax = *pSrc++;                                                                                     \
 8001ca0:	f9b8 0000 	ldrsh.w	r0, [r8]
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	dd20      	ble.n	8001cea <arm_absmax_q15+0xfe>
    if (cur_absmax > out)                                                                         \
 8001ca8:	4560      	cmp	r0, ip
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8001caa:	bfc4      	itt	gt
 8001cac:	4684      	movgt	ip, r0
      outIndex = blockSize - blkCnt;                                                                        \
 8001cae:	1b0d      	subgt	r5, r1, r4
  while (blkCnt > 0U)                                                                                       \
 8001cb0:	1e66      	subs	r6, r4, #1
 8001cb2:	d015      	beq.n	8001ce0 <arm_absmax_q15+0xf4>
    cur_absmax = *pSrc++;                                                                                     \
 8001cb4:	f9b8 0002 	ldrsh.w	r0, [r8, #2]
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8001cb8:	2800      	cmp	r0, #0
 8001cba:	dd1b      	ble.n	8001cf4 <arm_absmax_q15+0x108>
    if (cur_absmax > out)                                                                         \
 8001cbc:	4584      	cmp	ip, r0
      outIndex = blockSize - blkCnt;                                                                        \
 8001cbe:	bfbc      	itt	lt
 8001cc0:	1b8d      	sublt	r5, r1, r6
      out = cur_absmax;                                                                                       \
 8001cc2:	4684      	movlt	ip, r0
  while (blkCnt > 0U)                                                                                       \
 8001cc4:	2c02      	cmp	r4, #2
 8001cc6:	d00b      	beq.n	8001ce0 <arm_absmax_q15+0xf4>
    cur_absmax = *pSrc++;                                                                                     \
 8001cc8:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8001ccc:	2900      	cmp	r1, #0
 8001cce:	dc03      	bgt.n	8001cd8 <arm_absmax_q15+0xec>
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	fad0 f111 	qsub16	r1, r0, r1
 8001cd6:	b209      	sxth	r1, r1
      out = cur_absmax;                                                                                       \
 8001cd8:	4561      	cmp	r1, ip
 8001cda:	bfc4      	itt	gt
 8001cdc:	464d      	movgt	r5, r9
 8001cde:	468c      	movgt	ip, r1
    /* Decrement loop counter */                                                                            \
    blkCnt--;                                                                                               \
  }                                                                                                         \
                                                                                                            \
  /* Store the extrema value and it's index into destination pointers */                                    \
  *pResult = out;                                                                                           \
 8001ce0:	f8a2 c000 	strh.w	ip, [r2]
  *pIndex = outIndex;  
 8001ce4:	601d      	str	r5, [r3, #0]
}
 8001ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cea:	2600      	movs	r6, #0
 8001cec:	fad6 f010 	qsub16	r0, r6, r0
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8001cf0:	b200      	sxth	r0, r0
 8001cf2:	e7d9      	b.n	8001ca8 <arm_absmax_q15+0xbc>
 8001cf4:	2700      	movs	r7, #0
 8001cf6:	fad7 f010 	qsub16	r0, r7, r0
 8001cfa:	b200      	sxth	r0, r0
    if (cur_absmax > out)                                                                         \
 8001cfc:	4584      	cmp	ip, r0
      outIndex = blockSize - blkCnt;                                                                        \
 8001cfe:	bfbc      	itt	lt
 8001d00:	1b8d      	sublt	r5, r1, r6
      out = cur_absmax;                                                                                       \
 8001d02:	4684      	movlt	ip, r0
  while (blkCnt > 0U)                                                                                       \
 8001d04:	2c02      	cmp	r4, #2
 8001d06:	d1df      	bne.n	8001cc8 <arm_absmax_q15+0xdc>
 8001d08:	e7ea      	b.n	8001ce0 <arm_absmax_q15+0xf4>
  outIndex = 0U;                                                                                            \
 8001d0a:	4655      	mov	r5, sl
 8001d0c:	e7c5      	b.n	8001c9a <arm_absmax_q15+0xae>
 8001d0e:	bf00      	nop

08001d10 <arm_copy_q15>:
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8001d10:	b33a      	cbz	r2, 8001d62 <arm_copy_q15+0x52>
{
 8001d12:	b530      	push	{r4, r5, lr}
 8001d14:	1e54      	subs	r4, r2, #1
 8001d16:	2c06      	cmp	r4, #6
 8001d18:	f100 0c02 	add.w	ip, r0, #2
 8001d1c:	d901      	bls.n	8001d22 <arm_copy_q15+0x12>
 8001d1e:	4561      	cmp	r1, ip
 8001d20:	d10b      	bne.n	8001d3a <arm_copy_q15+0x2a>
 8001d22:	1e8b      	subs	r3, r1, #2
 8001d24:	e002      	b.n	8001d2c <arm_copy_q15+0x1c>
 8001d26:	3c01      	subs	r4, #1
 8001d28:	f10c 0c02 	add.w	ip, ip, #2
  {
    /* C = A */

    /* Copy and store result in destination buffer */
    *pDst++ = *pSrc++;
 8001d2c:	f93c 2c02 	ldrsh.w	r2, [ip, #-2]
 8001d30:	f823 2f02 	strh.w	r2, [r3, #2]!
  while (blkCnt > 0U)
 8001d34:	2c00      	cmp	r4, #0
 8001d36:	d1f6      	bne.n	8001d26 <arm_copy_q15+0x16>

    /* Decrement loop counter */
    blkCnt--;
  }
}
 8001d38:	bd30      	pop	{r4, r5, pc}
 8001d3a:	0855      	lsrs	r5, r2, #1
 8001d3c:	4684      	mov	ip, r0
 8001d3e:	460c      	mov	r4, r1
  while (blkCnt > 0U)
 8001d40:	2300      	movs	r3, #0
    *pDst++ = *pSrc++;
 8001d42:	3301      	adds	r3, #1
 8001d44:	f85c eb04 	ldr.w	lr, [ip], #4
 8001d48:	f844 eb04 	str.w	lr, [r4], #4
  while (blkCnt > 0U)
 8001d4c:	42ab      	cmp	r3, r5
 8001d4e:	d1f8      	bne.n	8001d42 <arm_copy_q15+0x32>
 8001d50:	f022 0301 	bic.w	r3, r2, #1
 8001d54:	07d2      	lsls	r2, r2, #31
 8001d56:	d5ef      	bpl.n	8001d38 <arm_copy_q15+0x28>
    *pDst++ = *pSrc++;
 8001d58:	f930 2013 	ldrsh.w	r2, [r0, r3, lsl #1]
 8001d5c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001d60:	bd30      	pop	{r4, r5, pc}
 8001d62:	4770      	bx	lr

08001d64 <arm_fill_q15>:
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8001d64:	b1d2      	cbz	r2, 8001d9c <arm_fill_q15+0x38>
 8001d66:	2a01      	cmp	r2, #1
 8001d68:	d016      	beq.n	8001d98 <arm_fill_q15+0x34>
{
 8001d6a:	b510      	push	{r4, lr}
 8001d6c:	f04f 0e00 	mov.w	lr, #0
 8001d70:	f360 0e0f 	bfi	lr, r0, #0, #16
 8001d74:	0854      	lsrs	r4, r2, #1
 8001d76:	f360 4e1f 	bfi	lr, r0, #16, #16
 8001d7a:	468c      	mov	ip, r1
  while (blkCnt > 0U)
 8001d7c:	2300      	movs	r3, #0
  {
    /* C = value */

    /* Fill value in destination buffer */
    *pDst++ = value;
 8001d7e:	3301      	adds	r3, #1
 8001d80:	42a3      	cmp	r3, r4
 8001d82:	f84c eb04 	str.w	lr, [ip], #4
  while (blkCnt > 0U)
 8001d86:	d1fa      	bne.n	8001d7e <arm_fill_q15+0x1a>
 8001d88:	07d3      	lsls	r3, r2, #31
 8001d8a:	d504      	bpl.n	8001d96 <arm_fill_q15+0x32>
 8001d8c:	f022 0201 	bic.w	r2, r2, #1
 8001d90:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    *pDst++ = value;
 8001d94:	8008      	strh	r0, [r1, #0]

    /* Decrement loop counter */
    blkCnt--;
  }
}
 8001d96:	bd10      	pop	{r4, pc}
    *pDst++ = value;
 8001d98:	8008      	strh	r0, [r1, #0]
  while (blkCnt > 0U)
 8001d9a:	4770      	bx	lr
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop

08001da0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001da0:	4a03      	ldr	r2, [pc, #12]	@ (8001db0 <HAL_IncTick+0x10>)
 8001da2:	4b04      	ldr	r3, [pc, #16]	@ (8001db4 <HAL_IncTick+0x14>)
 8001da4:	6811      	ldr	r1, [r2, #0]
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	440b      	add	r3, r1
 8001daa:	6013      	str	r3, [r2, #0]
}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20005b14 	.word	0x20005b14
 8001db4:	20000000 	.word	0x20000000

08001db8 <uart2_set_fcpu>:

unsigned long f_cpu;

/** Functions ----------------------------------------------------------------*/
void uart2_set_fcpu(unsigned long freq)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	f_cpu = freq;
 8001dc0:	4a04      	ldr	r2, [pc, #16]	@ (8001dd4 <uart2_set_fcpu+0x1c>)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6013      	str	r3, [r2, #0]
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	20005b18 	.word	0x20005b18

08001dd8 <uart2_dma1_config>:

	return USART_OK;
}

uart_err_type_t uart2_dma1_config(uint32_t baud, uart_data_type_t ndata, uart_stop_type_t nstop)
{
 8001dd8:	b5b0      	push	{r4, r5, r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	460b      	mov	r3, r1
 8001de2:	72fb      	strb	r3, [r7, #11]
 8001de4:	4613      	mov	r3, r2
 8001de6:	72bb      	strb	r3, [r7, #10]
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;	// enable UART2 clock
 8001de8:	4b85      	ldr	r3, [pc, #532]	@ (8002000 <uart2_dma1_config+0x228>)
 8001dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dec:	4a84      	ldr	r2, [pc, #528]	@ (8002000 <uart2_dma1_config+0x228>)
 8001dee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001df2:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;	// enable GPIOA clock
 8001df4:	4b82      	ldr	r3, [pc, #520]	@ (8002000 <uart2_dma1_config+0x228>)
 8001df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df8:	4a81      	ldr	r2, [pc, #516]	@ (8002000 <uart2_dma1_config+0x228>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN;		// enable DMA1 clock
 8001e00:	4b7f      	ldr	r3, [pc, #508]	@ (8002000 <uart2_dma1_config+0x228>)
 8001e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e04:	4a7e      	ldr	r2, [pc, #504]	@ (8002000 <uart2_dma1_config+0x228>)
 8001e06:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e0a:	6313      	str	r3, [r2, #48]	@ 0x30

	/* Setup DMA1 for transmission */
	// disable DMA1 to configure
	DMA1_Stream6->CR &= ~DMA_SxCR_EN;
 8001e0c:	4b7d      	ldr	r3, [pc, #500]	@ (8002004 <uart2_dma1_config+0x22c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a7c      	ldr	r2, [pc, #496]	@ (8002004 <uart2_dma1_config+0x22c>)
 8001e12:	f023 0301 	bic.w	r3, r3, #1
 8001e16:	6013      	str	r3, [r2, #0]
	while (DMA1_Stream6->CR & DMA_SxCR_EN);
 8001e18:	bf00      	nop
 8001e1a:	4b7a      	ldr	r3, [pc, #488]	@ (8002004 <uart2_dma1_config+0x22c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f9      	bne.n	8001e1a <uart2_dma1_config+0x42>

	// select stream 6, channel 4 for USART2_TX
	DMA1_Stream6->CR &= ~DMA_SxCR_CHSEL;
 8001e26:	4b77      	ldr	r3, [pc, #476]	@ (8002004 <uart2_dma1_config+0x22c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a76      	ldr	r2, [pc, #472]	@ (8002004 <uart2_dma1_config+0x22c>)
 8001e2c:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8001e30:	6013      	str	r3, [r2, #0]
	DMA1_Stream6->CR |= DMA_SxCR_CHSEL_2;
 8001e32:	4b74      	ldr	r3, [pc, #464]	@ (8002004 <uart2_dma1_config+0x22c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a73      	ldr	r2, [pc, #460]	@ (8002004 <uart2_dma1_config+0x22c>)
 8001e38:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001e3c:	6013      	str	r3, [r2, #0]

	// disable direct mode
	DMA1_Stream6->FCR |= DMA_SxFCR_DMDIS;
 8001e3e:	4b71      	ldr	r3, [pc, #452]	@ (8002004 <uart2_dma1_config+0x22c>)
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	4a70      	ldr	r2, [pc, #448]	@ (8002004 <uart2_dma1_config+0x22c>)
 8001e44:	f043 0304 	orr.w	r3, r3, #4
 8001e48:	6153      	str	r3, [r2, #20]

	// normal mode, low priority, 1 byte data size (memory and peripheral)
	DMA1_Stream6->CR &= ~(DMA_SxCR_DBM | DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE);
 8001e4a:	4b6e      	ldr	r3, [pc, #440]	@ (8002004 <uart2_dma1_config+0x22c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a6d      	ldr	r2, [pc, #436]	@ (8002004 <uart2_dma1_config+0x22c>)
 8001e50:	f423 23ef 	bic.w	r3, r3, #489472	@ 0x77800
 8001e54:	6013      	str	r3, [r2, #0]

	// memory increment mode
	DMA1_Stream6->CR |= DMA_SxCR_MINC;
 8001e56:	4b6b      	ldr	r3, [pc, #428]	@ (8002004 <uart2_dma1_config+0x22c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a6a      	ldr	r2, [pc, #424]	@ (8002004 <uart2_dma1_config+0x22c>)
 8001e5c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e60:	6013      	str	r3, [r2, #0]

	// fixed peripheral pointer
	DMA1_Stream6->CR &= ~DMA_SxCR_PINC;
 8001e62:	4b68      	ldr	r3, [pc, #416]	@ (8002004 <uart2_dma1_config+0x22c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a67      	ldr	r2, [pc, #412]	@ (8002004 <uart2_dma1_config+0x22c>)
 8001e68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001e6c:	6013      	str	r3, [r2, #0]

	// disable circular mode
	DMA1_Stream6->CR &= ~DMA_SxCR_CIRC;
 8001e6e:	4b65      	ldr	r3, [pc, #404]	@ (8002004 <uart2_dma1_config+0x22c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a64      	ldr	r2, [pc, #400]	@ (8002004 <uart2_dma1_config+0x22c>)
 8001e74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e78:	6013      	str	r3, [r2, #0]

	// memory to peripheral mode
	DMA1_Stream6->CR &= ~DMA_SxCR_DIR_1;
 8001e7a:	4b62      	ldr	r3, [pc, #392]	@ (8002004 <uart2_dma1_config+0x22c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a61      	ldr	r2, [pc, #388]	@ (8002004 <uart2_dma1_config+0x22c>)
 8001e80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e84:	6013      	str	r3, [r2, #0]
	DMA1_Stream6->CR |= DMA_SxCR_DIR_0;
 8001e86:	4b5f      	ldr	r3, [pc, #380]	@ (8002004 <uart2_dma1_config+0x22c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a5e      	ldr	r2, [pc, #376]	@ (8002004 <uart2_dma1_config+0x22c>)
 8001e8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e90:	6013      	str	r3, [r2, #0]

	// peripheral address is USART2_DR
	DMA1_Stream6->PAR = (uint32_t)&(USART2->DR);
 8001e92:	4b5c      	ldr	r3, [pc, #368]	@ (8002004 <uart2_dma1_config+0x22c>)
 8001e94:	4a5c      	ldr	r2, [pc, #368]	@ (8002008 <uart2_dma1_config+0x230>)
 8001e96:	609a      	str	r2, [r3, #8]

	/* Setup UART2 for transmission using DMA1 */
	// alternate function mode on TX (PA2) and RX (PA3)
	GPIOA->MODER |= GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1;
 8001e98:	4b5c      	ldr	r3, [pc, #368]	@ (800200c <uart2_dma1_config+0x234>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a5b      	ldr	r2, [pc, #364]	@ (800200c <uart2_dma1_config+0x234>)
 8001e9e:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001ea2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_0 | GPIO_MODER_MODER3_0);
 8001ea4:	4b59      	ldr	r3, [pc, #356]	@ (800200c <uart2_dma1_config+0x234>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a58      	ldr	r2, [pc, #352]	@ (800200c <uart2_dma1_config+0x234>)
 8001eaa:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8001eae:	6013      	str	r3, [r2, #0]

	// select alternate function mode 7 for each
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL2 | GPIO_AFRL_AFRL3);
 8001eb0:	4b56      	ldr	r3, [pc, #344]	@ (800200c <uart2_dma1_config+0x234>)
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	4a55      	ldr	r2, [pc, #340]	@ (800200c <uart2_dma1_config+0x234>)
 8001eb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001eba:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL2_0 | GPIO_AFRL_AFRL3_0 |
 8001ebc:	4b53      	ldr	r3, [pc, #332]	@ (800200c <uart2_dma1_config+0x234>)
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	4a52      	ldr	r2, [pc, #328]	@ (800200c <uart2_dma1_config+0x234>)
 8001ec2:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8001ec6:	6213      	str	r3, [r2, #32]
					GPIO_AFRL_AFRL2_1 | GPIO_AFRL_AFRL3_1 |
					GPIO_AFRL_AFRL2_2 | GPIO_AFRL_AFRL3_2;

	USART2->CR1 |= USART_CR1_UE;			// UART2 enable
 8001ec8:	4b51      	ldr	r3, [pc, #324]	@ (8002010 <uart2_dma1_config+0x238>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	4a50      	ldr	r2, [pc, #320]	@ (8002010 <uart2_dma1_config+0x238>)
 8001ece:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ed2:	60d3      	str	r3, [r2, #12]

	if (ndata == USART_DATA_8)
 8001ed4:	7afb      	ldrb	r3, [r7, #11]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d106      	bne.n	8001ee8 <uart2_dma1_config+0x110>
	{
		USART2->CR1 &= ~USART_CR1_M;		// 1 start, 8 data, n stop
 8001eda:	4b4d      	ldr	r3, [pc, #308]	@ (8002010 <uart2_dma1_config+0x238>)
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	4a4c      	ldr	r2, [pc, #304]	@ (8002010 <uart2_dma1_config+0x238>)
 8001ee0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ee4:	60d3      	str	r3, [r2, #12]
 8001ee6:	e00b      	b.n	8001f00 <uart2_dma1_config+0x128>
	}
	else if (ndata == USART_DATA_9)
 8001ee8:	7afb      	ldrb	r3, [r7, #11]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d106      	bne.n	8001efc <uart2_dma1_config+0x124>
	{
		USART2->CR1 |= USART_CR1_M;			// 1 start, 9 data, n stop
 8001eee:	4b48      	ldr	r3, [pc, #288]	@ (8002010 <uart2_dma1_config+0x238>)
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	4a47      	ldr	r2, [pc, #284]	@ (8002010 <uart2_dma1_config+0x238>)
 8001ef4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ef8:	60d3      	str	r3, [r2, #12]
 8001efa:	e001      	b.n	8001f00 <uart2_dma1_config+0x128>
	}
	else
	{
		return USART_INVALID_NDATA;
 8001efc:	2302      	movs	r3, #2
 8001efe:	e07b      	b.n	8001ff8 <uart2_dma1_config+0x220>
	}

	if (nstop == USART_STOP_1)
 8001f00:	7abb      	ldrb	r3, [r7, #10]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d106      	bne.n	8001f14 <uart2_dma1_config+0x13c>
	{
		USART2->CR2 &= ~USART_CR2_STOP;		// 1 stop bit
 8001f06:	4b42      	ldr	r3, [pc, #264]	@ (8002010 <uart2_dma1_config+0x238>)
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	4a41      	ldr	r2, [pc, #260]	@ (8002010 <uart2_dma1_config+0x238>)
 8001f0c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f10:	6113      	str	r3, [r2, #16]
 8001f12:	e021      	b.n	8001f58 <uart2_dma1_config+0x180>
	}
	else if (nstop == USART_STOP_HALF)
 8001f14:	7abb      	ldrb	r3, [r7, #10]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d10c      	bne.n	8001f34 <uart2_dma1_config+0x15c>
	{
		USART2->CR2 &= ~USART_CR2_STOP;		// half stop bit
 8001f1a:	4b3d      	ldr	r3, [pc, #244]	@ (8002010 <uart2_dma1_config+0x238>)
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	4a3c      	ldr	r2, [pc, #240]	@ (8002010 <uart2_dma1_config+0x238>)
 8001f20:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f24:	6113      	str	r3, [r2, #16]
		USART2->CR2 |= USART_CR2_STOP_0;
 8001f26:	4b3a      	ldr	r3, [pc, #232]	@ (8002010 <uart2_dma1_config+0x238>)
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	4a39      	ldr	r2, [pc, #228]	@ (8002010 <uart2_dma1_config+0x238>)
 8001f2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f30:	6113      	str	r3, [r2, #16]
 8001f32:	e011      	b.n	8001f58 <uart2_dma1_config+0x180>
	}
	else if (nstop == USART_STOP_2)
 8001f34:	7abb      	ldrb	r3, [r7, #10]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d10c      	bne.n	8001f54 <uart2_dma1_config+0x17c>
	{
		USART2->CR2 &= ~USART_CR2_STOP;		// 2 stop bits
 8001f3a:	4b35      	ldr	r3, [pc, #212]	@ (8002010 <uart2_dma1_config+0x238>)
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	4a34      	ldr	r2, [pc, #208]	@ (8002010 <uart2_dma1_config+0x238>)
 8001f40:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f44:	6113      	str	r3, [r2, #16]
		USART2->CR2 |= USART_CR2_STOP_1;
 8001f46:	4b32      	ldr	r3, [pc, #200]	@ (8002010 <uart2_dma1_config+0x238>)
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	4a31      	ldr	r2, [pc, #196]	@ (8002010 <uart2_dma1_config+0x238>)
 8001f4c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f50:	6113      	str	r3, [r2, #16]
 8001f52:	e001      	b.n	8001f58 <uart2_dma1_config+0x180>
	}
	else
	{
		return USART_INVALID_NSTOP;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e04f      	b.n	8001ff8 <uart2_dma1_config+0x220>
	}

	// pg. 519 STM32F401RE reference
	float usart_div = f_cpu / (2 * 16.0 * baud);		// APB1 bus is 1/2 clock speed of f_cpu
 8001f58:	4b2e      	ldr	r3, [pc, #184]	@ (8002014 <uart2_dma1_config+0x23c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fa7d 	bl	800045c <__aeabi_ui2d>
 8001f62:	4604      	mov	r4, r0
 8001f64:	460d      	mov	r5, r1
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f7fe fa78 	bl	800045c <__aeabi_ui2d>
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	4b29      	ldr	r3, [pc, #164]	@ (8002018 <uart2_dma1_config+0x240>)
 8001f72:	f7fe faed 	bl	8000550 <__aeabi_dmul>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	f7fe fc11 	bl	80007a4 <__aeabi_ddiv>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f7fe fd7b 	bl	8000a84 <__aeabi_d2f>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	617b      	str	r3, [r7, #20]
	uint16_t mantissa = (uint16_t) usart_div;
 8001f92:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f9a:	ee17 3a90 	vmov	r3, s15
 8001f9e:	827b      	strh	r3, [r7, #18]
	uint8_t fraction = (uint8_t) ((usart_div - mantissa) * 16);
 8001fa0:	8a7b      	ldrh	r3, [r7, #18]
 8001fa2:	ee07 3a90 	vmov	s15, r3
 8001fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001faa:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fb2:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001fb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fbe:	edc7 7a01 	vstr	s15, [r7, #4]
 8001fc2:	793b      	ldrb	r3, [r7, #4]
 8001fc4:	747b      	strb	r3, [r7, #17]
	USART2->BRR = mantissa << 4 | fraction;
 8001fc6:	8a7b      	ldrh	r3, [r7, #18]
 8001fc8:	011a      	lsls	r2, r3, #4
 8001fca:	7c7b      	ldrb	r3, [r7, #17]
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	4b10      	ldr	r3, [pc, #64]	@ (8002010 <uart2_dma1_config+0x238>)
 8001fd0:	609a      	str	r2, [r3, #8]

	USART2->CR3 |= USART_CR3_DMAT;		// enable DMA transmitter
 8001fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8002010 <uart2_dma1_config+0x238>)
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	4a0e      	ldr	r2, [pc, #56]	@ (8002010 <uart2_dma1_config+0x238>)
 8001fd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fdc:	6153      	str	r3, [r2, #20]

	USART2->CR1 |= USART_CR1_TE;		// transmitter enable
 8001fde:	4b0c      	ldr	r3, [pc, #48]	@ (8002010 <uart2_dma1_config+0x238>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	4a0b      	ldr	r2, [pc, #44]	@ (8002010 <uart2_dma1_config+0x238>)
 8001fe4:	f043 0308 	orr.w	r3, r3, #8
 8001fe8:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RE;		// receiver enable
 8001fea:	4b09      	ldr	r3, [pc, #36]	@ (8002010 <uart2_dma1_config+0x238>)
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	4a08      	ldr	r2, [pc, #32]	@ (8002010 <uart2_dma1_config+0x238>)
 8001ff0:	f043 0304 	orr.w	r3, r3, #4
 8001ff4:	60d3      	str	r3, [r2, #12]

	return USART_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8002000:	40023800 	.word	0x40023800
 8002004:	400260a0 	.word	0x400260a0
 8002008:	40004404 	.word	0x40004404
 800200c:	40020000 	.word	0x40020000
 8002010:	40004400 	.word	0x40004400
 8002014:	20005b18 	.word	0x20005b18
 8002018:	40400000 	.word	0x40400000

0800201c <uart2_dma1_write>:

	return USART_OK;
}

void uart2_dma1_write(uint16_t n, uint8_t * data)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	6039      	str	r1, [r7, #0]
 8002026:	80fb      	strh	r3, [r7, #6]
	while (!(USART2->SR & USART_SR_TXE));	// wait for transmit data register empty
 8002028:	bf00      	nop
 800202a:	4b18      	ldr	r3, [pc, #96]	@ (800208c <uart2_dma1_write+0x70>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f9      	beq.n	800202a <uart2_dma1_write+0xe>
	USART2->SR &= ~USART_SR_TC;				// clear flag
 8002036:	4b15      	ldr	r3, [pc, #84]	@ (800208c <uart2_dma1_write+0x70>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a14      	ldr	r2, [pc, #80]	@ (800208c <uart2_dma1_write+0x70>)
 800203c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002040:	6013      	str	r3, [r2, #0]

	DMA1_Stream6->CR &= ~DMA_SxCR_EN;		// disable DMA stream
 8002042:	4b13      	ldr	r3, [pc, #76]	@ (8002090 <uart2_dma1_write+0x74>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a12      	ldr	r2, [pc, #72]	@ (8002090 <uart2_dma1_write+0x74>)
 8002048:	f023 0301 	bic.w	r3, r3, #1
 800204c:	6013      	str	r3, [r2, #0]
	while (DMA1_Stream6->CR & DMA_SxCR_EN);
 800204e:	bf00      	nop
 8002050:	4b0f      	ldr	r3, [pc, #60]	@ (8002090 <uart2_dma1_write+0x74>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1f9      	bne.n	8002050 <uart2_dma1_write+0x34>

	// clear flags
	DMA1->HIFCR |= DMA_HIFCR_CTCIF6 | DMA_HIFCR_CHTIF6 | DMA_HIFCR_CTEIF6 | DMA_HIFCR_CDMEIF6 | DMA_HIFCR_CFEIF6;
 800205c:	4b0d      	ldr	r3, [pc, #52]	@ (8002094 <uart2_dma1_write+0x78>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	4a0c      	ldr	r2, [pc, #48]	@ (8002094 <uart2_dma1_write+0x78>)
 8002062:	f443 1374 	orr.w	r3, r3, #3997696	@ 0x3d0000
 8002066:	60d3      	str	r3, [r2, #12]

	DMA1_Stream6->NDTR = n;					// set # of data items to transfer
 8002068:	4a09      	ldr	r2, [pc, #36]	@ (8002090 <uart2_dma1_write+0x74>)
 800206a:	88fb      	ldrh	r3, [r7, #6]
 800206c:	6053      	str	r3, [r2, #4]
	DMA1_Stream6->M0AR = (uint32_t) data;	// pointer to data
 800206e:	4a08      	ldr	r2, [pc, #32]	@ (8002090 <uart2_dma1_write+0x74>)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	60d3      	str	r3, [r2, #12]
	DMA1_Stream6->CR |= DMA_SxCR_EN;		// enable DMA stream
 8002074:	4b06      	ldr	r3, [pc, #24]	@ (8002090 <uart2_dma1_write+0x74>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a05      	ldr	r2, [pc, #20]	@ (8002090 <uart2_dma1_write+0x74>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	6013      	str	r3, [r2, #0]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	40004400 	.word	0x40004400
 8002090:	400260a0 	.word	0x400260a0
 8002094:	40026000 	.word	0x40026000

08002098 <memset>:
 8002098:	4402      	add	r2, r0
 800209a:	4603      	mov	r3, r0
 800209c:	4293      	cmp	r3, r2
 800209e:	d100      	bne.n	80020a2 <memset+0xa>
 80020a0:	4770      	bx	lr
 80020a2:	f803 1b01 	strb.w	r1, [r3], #1
 80020a6:	e7f9      	b.n	800209c <memset+0x4>

080020a8 <__libc_init_array>:
 80020a8:	b570      	push	{r4, r5, r6, lr}
 80020aa:	4d0d      	ldr	r5, [pc, #52]	@ (80020e0 <__libc_init_array+0x38>)
 80020ac:	4c0d      	ldr	r4, [pc, #52]	@ (80020e4 <__libc_init_array+0x3c>)
 80020ae:	1b64      	subs	r4, r4, r5
 80020b0:	10a4      	asrs	r4, r4, #2
 80020b2:	2600      	movs	r6, #0
 80020b4:	42a6      	cmp	r6, r4
 80020b6:	d109      	bne.n	80020cc <__libc_init_array+0x24>
 80020b8:	4d0b      	ldr	r5, [pc, #44]	@ (80020e8 <__libc_init_array+0x40>)
 80020ba:	4c0c      	ldr	r4, [pc, #48]	@ (80020ec <__libc_init_array+0x44>)
 80020bc:	f000 f818 	bl	80020f0 <_init>
 80020c0:	1b64      	subs	r4, r4, r5
 80020c2:	10a4      	asrs	r4, r4, #2
 80020c4:	2600      	movs	r6, #0
 80020c6:	42a6      	cmp	r6, r4
 80020c8:	d105      	bne.n	80020d6 <__libc_init_array+0x2e>
 80020ca:	bd70      	pop	{r4, r5, r6, pc}
 80020cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80020d0:	4798      	blx	r3
 80020d2:	3601      	adds	r6, #1
 80020d4:	e7ee      	b.n	80020b4 <__libc_init_array+0xc>
 80020d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80020da:	4798      	blx	r3
 80020dc:	3601      	adds	r6, #1
 80020de:	e7f2      	b.n	80020c6 <__libc_init_array+0x1e>
 80020e0:	08002168 	.word	0x08002168
 80020e4:	08002168 	.word	0x08002168
 80020e8:	08002168 	.word	0x08002168
 80020ec:	0800216c 	.word	0x0800216c

080020f0 <_init>:
 80020f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f2:	bf00      	nop
 80020f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020f6:	bc08      	pop	{r3}
 80020f8:	469e      	mov	lr, r3
 80020fa:	4770      	bx	lr

080020fc <_fini>:
 80020fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020fe:	bf00      	nop
 8002100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002102:	bc08      	pop	{r3}
 8002104:	469e      	mov	lr, r3
 8002106:	4770      	bx	lr
