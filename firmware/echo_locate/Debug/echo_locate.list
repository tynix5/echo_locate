
echo_locate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019fc  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08001b94  08001b94  00002b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bf4  08001bf4  00003004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001bf4  08001bf4  00003004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001bf4  08001bf4  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bf4  08001bf4  00002bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001bf8  08001bf8  00002bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08001bfc  00003000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  20000004  08001c00  00003004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  08001c00  000033b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003542  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e7e  00000000  00000000  00006576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00001262  00000000  00000000  000073f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002c0  00000000  00000000  00008658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000292  00000000  00000000  00008918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025152  00000000  00000000  00008baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005989  00000000  00000000  0002dcfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083d07  00000000  00000000  00033685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b738c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000082c  00000000  00000000  000b73d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  000b7bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001b7c 	.word	0x08001b7c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08001b7c 	.word	0x08001b7c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <sysclock_config>:
}

void sysclock_config(void)
{
	// 16 MHz HSI oscillator is default on reset, but select anyways
	RCC->CR |= RCC_CR_HSION;
 8000b24:	4a1b      	ldr	r2, [pc, #108]	@ (8000b94 <sysclock_config+0x70>)
 8000b26:	6813      	ldr	r3, [r2, #0]
 8000b28:	f043 0301 	orr.w	r3, r3, #1
{
 8000b2c:	b410      	push	{r4}
	RCC->CR |= RCC_CR_HSION;
 8000b2e:	6013      	str	r3, [r2, #0]
	// wait for HSI to be ready
	while (!((RCC->CR) & RCC_CR_HSIRDY));
 8000b30:	6813      	ldr	r3, [r2, #0]
 8000b32:	0799      	lsls	r1, r3, #30
 8000b34:	d5fc      	bpl.n	8000b30 <sysclock_config+0xc>

	// enable power interface clock for APB1
	RCC->APB1ENR = RCC_APB1ENR_PWREN;

	// configure VCO to scale 2 per CubeMX
	PWR->CR |= PWR_CR_VOS_1;
 8000b36:	4b18      	ldr	r3, [pc, #96]	@ (8000b98 <sysclock_config+0x74>)
	// configure FLASH
	// instruction cache, prefetch enable, and data cache enabled
	uint32_t flash;
	flash = FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN;
	flash |= 2;		// 2 wait states for flash
	FLASH->ACR = flash;
 8000b38:	4818      	ldr	r0, [pc, #96]	@ (8000b9c <sysclock_config+0x78>)
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000b3a:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8000b3e:	6411      	str	r1, [r2, #64]	@ 0x40
	PWR->CR |= PWR_CR_VOS_1;
 8000b40:	6819      	ldr	r1, [r3, #0]
 8000b42:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8000b46:	6019      	str	r1, [r3, #0]
	PWR->CR &= ~PWR_CR_VOS_0;
 8000b48:	6819      	ldr	r1, [r3, #0]
 8000b4a:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8000b4e:	6019      	str	r1, [r3, #0]
	FLASH->ACR = flash;
 8000b50:	f240 7402 	movw	r4, #1794	@ 0x702
	// configure bus prescalers
	uint32_t cfgr = 0;
	cfgr &= ~RCC_CFGR_PPRE2_2;		// APB2 prescaler of 1 (84MHz)
	cfgr |= RCC_CFGR_PPRE1_2;		// APB1 prescaler of 2 (42MHZ)
	cfgr &= ~RCC_CFGR_HPRE;			// AHB prescaler of 1 (84MHz)
	RCC->CFGR = cfgr;
 8000b54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
	FLASH->ACR = flash;
 8000b58:	6004      	str	r4, [r0, #0]
	RCC->CFGR = cfgr;
 8000b5a:	6093      	str	r3, [r2, #8]

	// configure main PLL
	uint32_t pll_cfg = RCC->PLLCFGR;
 8000b5c:	6851      	ldr	r1, [r2, #4]
	pll_cfg &= ~RCC_PLLCFGR_PLLP;	// main PLL division factor of 2

	pll_cfg &= ~RCC_PLLCFGR_PLLN;
	pll_cfg |= 168UL << 6;	// pll multiplication factor for VCO (x168)

	pll_cfg &= ~RCC_PLLCFGR_PLLM;
 8000b5e:	4810      	ldr	r0, [pc, #64]	@ (8000ba0 <sysclock_config+0x7c>)
	pll_cfg |= 16UL << 0;	// pll division factor for main PLL and audio PLL (/16)
 8000b60:	4b10      	ldr	r3, [pc, #64]	@ (8000ba4 <sysclock_config+0x80>)
 8000b62:	4001      	ands	r1, r0
 8000b64:	430b      	orrs	r3, r1

	RCC->PLLCFGR = pll_cfg;
 8000b66:	6053      	str	r3, [r2, #4]

	// enable PLL and wait for ready
	RCC->CR |= RCC_CR_PLLON;
 8000b68:	6813      	ldr	r3, [r2, #0]
	while (!((RCC->CR) & RCC_CR_PLLRDY));
 8000b6a:	490a      	ldr	r1, [pc, #40]	@ (8000b94 <sysclock_config+0x70>)
	RCC->CR |= RCC_CR_PLLON;
 8000b6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000b70:	6013      	str	r3, [r2, #0]
	while (!((RCC->CR) & RCC_CR_PLLRDY));
 8000b72:	680b      	ldr	r3, [r1, #0]
 8000b74:	019a      	lsls	r2, r3, #6
 8000b76:	d5fc      	bpl.n	8000b72 <sysclock_config+0x4e>

	// select clock source
	cfgr = RCC->CFGR;
 8000b78:	688b      	ldr	r3, [r1, #8]
	cfgr |= RCC_CFGR_SW_1;		// select PLL as system clock
	cfgr &= ~RCC_CFGR_SW_0;
	RCC->CFGR = cfgr;

	// wait for PLL clock source to become active
	while (!((RCC->CFGR) & RCC_CFGR_SWS_1));
 8000b7a:	4a06      	ldr	r2, [pc, #24]	@ (8000b94 <sysclock_config+0x70>)
 8000b7c:	f023 0301 	bic.w	r3, r3, #1
	cfgr &= ~RCC_CFGR_SW_0;
 8000b80:	f043 0302 	orr.w	r3, r3, #2
	RCC->CFGR = cfgr;
 8000b84:	608b      	str	r3, [r1, #8]
	while (!((RCC->CFGR) & RCC_CFGR_SWS_1));
 8000b86:	6893      	ldr	r3, [r2, #8]
 8000b88:	071b      	lsls	r3, r3, #28
 8000b8a:	d5fc      	bpl.n	8000b86 <sysclock_config+0x62>
}
 8000b8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40007000 	.word	0x40007000
 8000b9c:	40023c00 	.word	0x40023c00
 8000ba0:	f0fc8000 	.word	0xf0fc8000
 8000ba4:	04002a10 	.word	0x04002a10

08000ba8 <adc1_dma_config>:

void adc1_dma_config(void)
{
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;				// enable ADC1 clock
 8000ba8:	4964      	ldr	r1, [pc, #400]	@ (8000d3c <adc1_dma_config+0x194>)
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;			// enable GPIOA clock

	// PA0 as analog input
	GPIOA->MODER |= GPIO_MODER_MODER0_0 | GPIO_MODER_MODER0_1;
 8000baa:	4b65      	ldr	r3, [pc, #404]	@ (8000d40 <adc1_dma_config+0x198>)
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;				// enable ADC1 clock
 8000bac:	6c48      	ldr	r0, [r1, #68]	@ 0x44
	// PA1 as analog input
	GPIOA->MODER |= GPIO_MODER_MODER1_0 | GPIO_MODER_MODER1_1;
	// PA4 as analog input
	GPIOA->MODER |= GPIO_MODER_MODER4_0 | GPIO_MODER_MODER4_1;

	ADC1->CR2 &= ~ADC_CR2_ADON;						// turn off ADC to configure
 8000bae:	4a65      	ldr	r2, [pc, #404]	@ (8000d44 <adc1_dma_config+0x19c>)
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;				// enable ADC1 clock
 8000bb0:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
{
 8000bb4:	b410      	push	{r4}
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;				// enable ADC1 clock
 8000bb6:	6448      	str	r0, [r1, #68]	@ 0x44
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;			// enable GPIOA clock
 8000bb8:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 8000bba:	f040 0001 	orr.w	r0, r0, #1
 8000bbe:	6308      	str	r0, [r1, #48]	@ 0x30
	GPIOA->MODER |= GPIO_MODER_MODER0_0 | GPIO_MODER_MODER0_1;
 8000bc0:	6818      	ldr	r0, [r3, #0]
 8000bc2:	f040 0003 	orr.w	r0, r0, #3
 8000bc6:	6018      	str	r0, [r3, #0]
	GPIOA->MODER |= GPIO_MODER_MODER1_0 | GPIO_MODER_MODER1_1;
 8000bc8:	6818      	ldr	r0, [r3, #0]
 8000bca:	f040 000c 	orr.w	r0, r0, #12
 8000bce:	6018      	str	r0, [r3, #0]
	GPIOA->MODER |= GPIO_MODER_MODER4_0 | GPIO_MODER_MODER4_1;
 8000bd0:	6818      	ldr	r0, [r3, #0]
 8000bd2:	f440 7040 	orr.w	r0, r0, #768	@ 0x300
 8000bd6:	6018      	str	r0, [r3, #0]
	ADC1->CR2 &= ~ADC_CR2_ADON;						// turn off ADC to configure
 8000bd8:	6893      	ldr	r3, [r2, #8]

	// APB2 clock (84 MHz) / 4 = 21 MHz
	// MAX ADC clock freq is 36 MHz (pg 106 datasheet)
	ADC->CCR &= ~ADC_CCR_ADCPRE;
 8000bda:	485b      	ldr	r0, [pc, #364]	@ (8000d48 <adc1_dma_config+0x1a0>)
	ADC1->CR2 &= ~ADC_CR2_ADON;						// turn off ADC to configure
 8000bdc:	f023 0301 	bic.w	r3, r3, #1
 8000be0:	6093      	str	r3, [r2, #8]
	ADC->CCR &= ~ADC_CCR_ADCPRE;
 8000be2:	6844      	ldr	r4, [r0, #4]


	/* DMA2 Channel 0, Stream 0 --> ADC1 */
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;		// enable DMA2 clock

	DMA2_Stream0->CR &= ~DMA_SxCR_EN;		// disable stream
 8000be4:	4b59      	ldr	r3, [pc, #356]	@ (8000d4c <adc1_dma_config+0x1a4>)
	ADC->CCR &= ~ADC_CCR_ADCPRE;
 8000be6:	f424 3440 	bic.w	r4, r4, #196608	@ 0x30000
 8000bea:	6044      	str	r4, [r0, #4]
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 8000bec:	6844      	ldr	r4, [r0, #4]
 8000bee:	f444 3480 	orr.w	r4, r4, #65536	@ 0x10000
 8000bf2:	6044      	str	r4, [r0, #4]
	ADC1->CR2 |= ADC_CR2_EXTEN_0;
 8000bf4:	6890      	ldr	r0, [r2, #8]
 8000bf6:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8000bfa:	6090      	str	r0, [r2, #8]
	ADC1->CR2 &= ~ADC_CR2_EXTEN_1;
 8000bfc:	6890      	ldr	r0, [r2, #8]
 8000bfe:	f020 5000 	bic.w	r0, r0, #536870912	@ 0x20000000
 8000c02:	6090      	str	r0, [r2, #8]
	ADC1->CR2 |= ADC_CR2_EXTSEL_1 | ADC_CR2_EXTSEL_2;
 8000c04:	6890      	ldr	r0, [r2, #8]
 8000c06:	f040 60c0 	orr.w	r0, r0, #100663296	@ 0x6000000
 8000c0a:	6090      	str	r0, [r2, #8]
	ADC1->CR2 &= ~(ADC_CR2_EXTSEL_0 | ADC_CR2_EXTSEL_3);
 8000c0c:	6890      	ldr	r0, [r2, #8]
 8000c0e:	f020 6010 	bic.w	r0, r0, #150994944	@ 0x9000000
 8000c12:	6090      	str	r0, [r2, #8]
	ADC1->CR1 |= ADC_CR1_SCAN;
 8000c14:	6850      	ldr	r0, [r2, #4]
 8000c16:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 8000c1a:	6050      	str	r0, [r2, #4]
	ADC1->CR2 &= ~ADC_CR2_EOCS;
 8000c1c:	6890      	ldr	r0, [r2, #8]
 8000c1e:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
 8000c22:	6090      	str	r0, [r2, #8]
	ADC1->SMPR2 &= ~(ADC_SMPR2_SMP0 | ADC_SMPR2_SMP1 | ADC_SMPR2_SMP2);
 8000c24:	6910      	ldr	r0, [r2, #16]
 8000c26:	f36f 0008 	bfc	r0, #0, #9
 8000c2a:	6110      	str	r0, [r2, #16]
	ADC1->SQR1 &= ~ADC_SQR1_L;
 8000c2c:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8000c2e:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
 8000c32:	62d0      	str	r0, [r2, #44]	@ 0x2c
	ADC1->SQR1 |= ADC_SQR1_L_1;
 8000c34:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8000c36:	f440 1000 	orr.w	r0, r0, #2097152	@ 0x200000
 8000c3a:	62d0      	str	r0, [r2, #44]	@ 0x2c
	ADC1->SQR3 &= ~ADC_SQR3_SQ1;
 8000c3c:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8000c3e:	f020 001f 	bic.w	r0, r0, #31
 8000c42:	6350      	str	r0, [r2, #52]	@ 0x34
	ADC1->SQR3 &= ~ADC_SQR3_SQ2;
 8000c44:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8000c46:	f420 7078 	bic.w	r0, r0, #992	@ 0x3e0
 8000c4a:	6350      	str	r0, [r2, #52]	@ 0x34
	ADC1->SQR3 |= ADC_SQR3_SQ2_0;
 8000c4c:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8000c4e:	f040 0020 	orr.w	r0, r0, #32
 8000c52:	6350      	str	r0, [r2, #52]	@ 0x34
	ADC1->SQR3 &= ~ADC_SQR3_SQ3;
 8000c54:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8000c56:	f420 40f8 	bic.w	r0, r0, #31744	@ 0x7c00
 8000c5a:	6350      	str	r0, [r2, #52]	@ 0x34
	ADC1->SQR3 |= ADC_SQR3_SQ3_2;
 8000c5c:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8000c5e:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 8000c62:	6350      	str	r0, [r2, #52]	@ 0x34
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;		// enable DMA2 clock
 8000c64:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8000c66:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8000c6a:	630a      	str	r2, [r1, #48]	@ 0x30
	DMA2_Stream0->CR &= ~DMA_SxCR_EN;		// disable stream
 8000c6c:	691a      	ldr	r2, [r3, #16]
 8000c6e:	f022 0201 	bic.w	r2, r2, #1
 8000c72:	611a      	str	r2, [r3, #16]
	while (DMA2_Stream0->CR & DMA_SxCR_EN);	// wait for stream to disable
 8000c74:	691a      	ldr	r2, [r3, #16]
 8000c76:	07d2      	lsls	r2, r2, #31
 8000c78:	d4fc      	bmi.n	8000c74 <adc1_dma_config+0xcc>

	DMA2_Stream0->PAR = (uint32_t)&(ADC1->DR);// peripheral address
 8000c7a:	4c35      	ldr	r4, [pc, #212]	@ (8000d50 <adc1_dma_config+0x1a8>)
	DMA2_Stream0->M0AR = (uint32_t)stream0;	// destination memory address (CT = 0)
	DMA2_Stream0->M1AR = (uint32_t)stream1;	// destination memory address (CT = 1)
 8000c7c:	4935      	ldr	r1, [pc, #212]	@ (8000d54 <adc1_dma_config+0x1ac>)
	DMA2_Stream0->M0AR = (uint32_t)stream0;	// destination memory address (CT = 0)
 8000c7e:	4836      	ldr	r0, [pc, #216]	@ (8000d58 <adc1_dma_config+0x1b0>)
	DMA2_Stream0->PAR = (uint32_t)&(ADC1->DR);// peripheral address
 8000c80:	619c      	str	r4, [r3, #24]
	DMA2_Stream0->NDTR = BLOCK_SIZE;		// number of units to be transmitted
 8000c82:	2290      	movs	r2, #144	@ 0x90
	DMA2_Stream0->M0AR = (uint32_t)stream0;	// destination memory address (CT = 0)
 8000c84:	61d8      	str	r0, [r3, #28]
	DMA2_Stream0->M1AR = (uint32_t)stream1;	// destination memory address (CT = 1)
 8000c86:	6219      	str	r1, [r3, #32]
	DMA2_Stream0->NDTR = BLOCK_SIZE;		// number of units to be transmitted
 8000c88:	615a      	str	r2, [r3, #20]

	DMA2_Stream0->CR &= ~DMA_SxCR_CHSEL;	// channel 0 selected
 8000c8a:	6919      	ldr	r1, [r3, #16]
	DMA2_Stream0->CR &= ~DMA_SxCR_CT;


	DMA2_Stream0->CR |= DMA_SxCR_EN;		// enable DMA stream

	ADC1->CR2 |= ADC_CR2_DMA;				// enable DMA
 8000c8c:	4a2d      	ldr	r2, [pc, #180]	@ (8000d44 <adc1_dma_config+0x19c>)
	DMA2_Stream0->CR &= ~DMA_SxCR_CHSEL;	// channel 0 selected
 8000c8e:	f021 6160 	bic.w	r1, r1, #234881024	@ 0xe000000
 8000c92:	6119      	str	r1, [r3, #16]
	DMA2_Stream0->CR &= ~DMA_SxCR_PFCTRL;	// DMA is the flow controller
 8000c94:	6919      	ldr	r1, [r3, #16]
 8000c96:	f021 0120 	bic.w	r1, r1, #32
 8000c9a:	6119      	str	r1, [r3, #16]
	DMA2_Stream0->CR |= DMA_SxCR_PL_0;
 8000c9c:	6919      	ldr	r1, [r3, #16]
 8000c9e:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8000ca2:	6119      	str	r1, [r3, #16]
	DMA2_Stream0->CR &= ~DMA_SxCR_PL_1;
 8000ca4:	6919      	ldr	r1, [r3, #16]
 8000ca6:	f421 3100 	bic.w	r1, r1, #131072	@ 0x20000
 8000caa:	6119      	str	r1, [r3, #16]
	DMA2_Stream0->FCR |= DMA_SxFCR_DMDIS;
 8000cac:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000cae:	f041 0104 	orr.w	r1, r1, #4
 8000cb2:	6259      	str	r1, [r3, #36]	@ 0x24
	DMA2_Stream0->FCR |= DMA_SxFCR_FTH_0;
 8000cb4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000cb6:	f041 0101 	orr.w	r1, r1, #1
 8000cba:	6259      	str	r1, [r3, #36]	@ 0x24
	DMA2_Stream0->FCR &= ~DMA_SxFCR_FTH_1;
 8000cbc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000cbe:	f021 0102 	bic.w	r1, r1, #2
 8000cc2:	6259      	str	r1, [r3, #36]	@ 0x24
	DMA2_Stream0->CR |= DMA_SxCR_MSIZE_0;
 8000cc4:	6919      	ldr	r1, [r3, #16]
 8000cc6:	f441 5100 	orr.w	r1, r1, #8192	@ 0x2000
 8000cca:	6119      	str	r1, [r3, #16]
	DMA2_Stream0->CR &= ~DMA_SxCR_MSIZE_1;
 8000ccc:	6919      	ldr	r1, [r3, #16]
 8000cce:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8000cd2:	6119      	str	r1, [r3, #16]
	DMA2_Stream0->CR |= DMA_SxCR_PSIZE_0;
 8000cd4:	6919      	ldr	r1, [r3, #16]
 8000cd6:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
 8000cda:	6119      	str	r1, [r3, #16]
	DMA2_Stream0->CR &= ~DMA_SxCR_PSIZE_1;
 8000cdc:	6919      	ldr	r1, [r3, #16]
 8000cde:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 8000ce2:	6119      	str	r1, [r3, #16]
	DMA2_Stream0->CR |= DMA_SxCR_MINC;
 8000ce4:	6919      	ldr	r1, [r3, #16]
 8000ce6:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 8000cea:	6119      	str	r1, [r3, #16]
	DMA2_Stream0->CR &= ~DMA_SxCR_PINC;
 8000cec:	6919      	ldr	r1, [r3, #16]
 8000cee:	f421 7100 	bic.w	r1, r1, #512	@ 0x200
 8000cf2:	6119      	str	r1, [r3, #16]
	DMA2_Stream0->CR &= ~DMA_SxCR_DIR;
 8000cf4:	6919      	ldr	r1, [r3, #16]
 8000cf6:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8000cfa:	6119      	str	r1, [r3, #16]
	DMA2_Stream0->CR |= DMA_SxCR_CIRC;
 8000cfc:	6919      	ldr	r1, [r3, #16]
	ADC1->CR2 |= ADC_CR2_DDS;				// DMA requests issued as long as DMA=1
	ADC1->CR2 |= ADC_CR2_ADON;				// turn on ADC
}
 8000cfe:	f85d 4b04 	ldr.w	r4, [sp], #4
	DMA2_Stream0->CR |= DMA_SxCR_CIRC;
 8000d02:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8000d06:	6119      	str	r1, [r3, #16]
	DMA2_Stream0->CR |= DMA_SxCR_DBM;
 8000d08:	6919      	ldr	r1, [r3, #16]
 8000d0a:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
 8000d0e:	6119      	str	r1, [r3, #16]
	DMA2_Stream0->CR &= ~DMA_SxCR_CT;
 8000d10:	6919      	ldr	r1, [r3, #16]
 8000d12:	f421 2100 	bic.w	r1, r1, #524288	@ 0x80000
 8000d16:	6119      	str	r1, [r3, #16]
	DMA2_Stream0->CR |= DMA_SxCR_EN;		// enable DMA stream
 8000d18:	6919      	ldr	r1, [r3, #16]
 8000d1a:	f041 0101 	orr.w	r1, r1, #1
 8000d1e:	6119      	str	r1, [r3, #16]
	ADC1->CR2 |= ADC_CR2_DMA;				// enable DMA
 8000d20:	6893      	ldr	r3, [r2, #8]
 8000d22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d26:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_DDS;				// DMA requests issued as long as DMA=1
 8000d28:	6893      	ldr	r3, [r2, #8]
 8000d2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d2e:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_ADON;				// turn on ADC
 8000d30:	6893      	ldr	r3, [r2, #8]
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	6093      	str	r3, [r2, #8]
}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020000 	.word	0x40020000
 8000d44:	40012000 	.word	0x40012000
 8000d48:	40012300 	.word	0x40012300
 8000d4c:	40026400 	.word	0x40026400
 8000d50:	4001204c 	.word	0x4001204c
 8000d54:	20000144 	.word	0x20000144
 8000d58:	20000264 	.word	0x20000264

08000d5c <tim2_trig_config>:

void tim2_trig_config(void)
{
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;				// enable TIM2 clock
 8000d5c:	4910      	ldr	r1, [pc, #64]	@ (8000da0 <tim2_trig_config+0x44>)
 8000d5e:	6c0a      	ldr	r2, [r1, #64]	@ 0x40

	TIM2->CR1 &= ~TIM_CR1_DIR;			// upcounting
 8000d60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;				// enable TIM2 clock
 8000d64:	f042 0201 	orr.w	r2, r2, #1
 8000d68:	640a      	str	r2, [r1, #64]	@ 0x40
	TIM2->CR1 &= ~TIM_CR1_DIR;			// upcounting
 8000d6a:	681a      	ldr	r2, [r3, #0]
	TIM2->PSC = 0;						// /1 prescaler
 8000d6c:	2000      	movs	r0, #0
	TIM2->CR1 &= ~TIM_CR1_DIR;			// upcounting
 8000d6e:	f022 0210 	bic.w	r2, r2, #16
	TIM2->ARR = 2099;					// 40kHz frequency
 8000d72:	f640 0133 	movw	r1, #2099	@ 0x833
	TIM2->CR1 &= ~TIM_CR1_DIR;			// upcounting
 8000d76:	601a      	str	r2, [r3, #0]
	TIM2->PSC = 0;						// /1 prescaler
 8000d78:	6298      	str	r0, [r3, #40]	@ 0x28
	TIM2->ARR = 2099;					// 40kHz frequency
 8000d7a:	62d9      	str	r1, [r3, #44]	@ 0x2c

	TIM2->CR2 |= TIM_CR2_MMS_1;
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	f042 0220 	orr.w	r2, r2, #32
 8000d82:	605a      	str	r2, [r3, #4]
	TIM2->CR2 &= ~(TIM_CR2_MMS_0 | TIM_CR2_MMS_2);		// update event as TRGO
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	f022 0250 	bic.w	r2, r2, #80	@ 0x50
 8000d8a:	605a      	str	r2, [r3, #4]

	TIM2->EGR |= TIM_EGR_UG;			// generate update event
 8000d8c:	695a      	ldr	r2, [r3, #20]
 8000d8e:	f042 0201 	orr.w	r2, r2, #1
 8000d92:	615a      	str	r2, [r3, #20]

	TIM2->CR1 |= TIM_CR1_CEN;			// enable counter
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	f042 0201 	orr.w	r2, r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]
}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800

08000da4 <stream_splice>:

	TIM5->CR1 |= TIM_CR1_CEN;			// enable counter
}

void stream_splice(void)
{
 8000da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	{
		uint32_t ind = i / 3;

		// DMA is targeting M1AR ---> read from M0AR memory
		// TO DO: check ranges of mic0
		if (dma_tgt)
 8000da8:	4b29      	ldr	r3, [pc, #164]	@ (8000e50 <stream_splice+0xac>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	bb3b      	cbnz	r3, 8000dfe <stream_splice+0x5a>
 8000dae:	4f29      	ldr	r7, [pc, #164]	@ (8000e54 <stream_splice+0xb0>)
 8000db0:	4e29      	ldr	r6, [pc, #164]	@ (8000e58 <stream_splice+0xb4>)
 8000db2:	4d2a      	ldr	r5, [pc, #168]	@ (8000e5c <stream_splice+0xb8>)
 8000db4:	4c2a      	ldr	r4, [pc, #168]	@ (8000e60 <stream_splice+0xbc>)
		uint32_t ind = i / 3;
 8000db6:	f8df e0b0 	ldr.w	lr, [pc, #176]	@ 8000e68 <stream_splice+0xc4>
 8000dba:	f107 0802 	add.w	r8, r7, #2
 8000dbe:	f107 0c04 	add.w	ip, r7, #4
			mic1_samp[ind] = ((int16_t)stream0[i+1] - 2048) << 4;
			mic2_samp[ind] = ((int16_t)stream0[i+2] - 2048) << 4;
		}
		else
		{
			mic0_samp[ind] = ((int16_t)stream1[i] - 2048) << 4;
 8000dc2:	f837 9013 	ldrh.w	r9, [r7, r3, lsl #1]
			mic1_samp[ind] = ((int16_t)stream1[i+1] - 2048) << 4;
 8000dc6:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
			mic2_samp[ind] = ((int16_t)stream1[i+2] - 2048) << 4;
 8000dca:	f83c 1013 	ldrh.w	r1, [ip, r3, lsl #1]
		uint32_t ind = i / 3;
 8000dce:	fbae a203 	umull	sl, r2, lr, r3
 8000dd2:	0852      	lsrs	r2, r2, #1
			mic0_samp[ind] = ((int16_t)stream1[i] - 2048) << 4;
 8000dd4:	f5a9 6900 	sub.w	r9, r9, #2048	@ 0x800
			mic1_samp[ind] = ((int16_t)stream1[i+1] - 2048) << 4;
 8000dd8:	f5a0 6000 	sub.w	r0, r0, #2048	@ 0x800
			mic2_samp[ind] = ((int16_t)stream1[i+2] - 2048) << 4;
 8000ddc:	f5a1 6100 	sub.w	r1, r1, #2048	@ 0x800
	for (uint32_t i = 0; i < BLOCK_SIZE; i += 3)
 8000de0:	3303      	adds	r3, #3
			mic0_samp[ind] = ((int16_t)stream1[i] - 2048) << 4;
 8000de2:	ea4f 1909 	mov.w	r9, r9, lsl #4
			mic1_samp[ind] = ((int16_t)stream1[i+1] - 2048) << 4;
 8000de6:	0100      	lsls	r0, r0, #4
			mic2_samp[ind] = ((int16_t)stream1[i+2] - 2048) << 4;
 8000de8:	0109      	lsls	r1, r1, #4
	for (uint32_t i = 0; i < BLOCK_SIZE; i += 3)
 8000dea:	2b90      	cmp	r3, #144	@ 0x90
			mic0_samp[ind] = ((int16_t)stream1[i] - 2048) << 4;
 8000dec:	f826 9012 	strh.w	r9, [r6, r2, lsl #1]
			mic1_samp[ind] = ((int16_t)stream1[i+1] - 2048) << 4;
 8000df0:	f825 0012 	strh.w	r0, [r5, r2, lsl #1]
			mic2_samp[ind] = ((int16_t)stream0[i+2] - 2048) << 4;
 8000df4:	f824 1012 	strh.w	r1, [r4, r2, lsl #1]
	for (uint32_t i = 0; i < BLOCK_SIZE; i += 3)
 8000df8:	d1e3      	bne.n	8000dc2 <stream_splice+0x1e>
		}
	}
}
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	4f19      	ldr	r7, [pc, #100]	@ (8000e64 <stream_splice+0xc0>)
 8000e00:	4e15      	ldr	r6, [pc, #84]	@ (8000e58 <stream_splice+0xb4>)
 8000e02:	4d16      	ldr	r5, [pc, #88]	@ (8000e5c <stream_splice+0xb8>)
 8000e04:	4c16      	ldr	r4, [pc, #88]	@ (8000e60 <stream_splice+0xbc>)
		uint32_t ind = i / 3;
 8000e06:	f8df 8060 	ldr.w	r8, [pc, #96]	@ 8000e68 <stream_splice+0xc4>
	for (uint32_t i = 0; i < BLOCK_SIZE; i += 3)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f107 0e02 	add.w	lr, r7, #2
 8000e10:	f107 0c04 	add.w	ip, r7, #4
			mic0_samp[ind] = ((int16_t)stream0[i] - 2048) << 4;
 8000e14:	f837 9013 	ldrh.w	r9, [r7, r3, lsl #1]
			mic1_samp[ind] = ((int16_t)stream0[i+1] - 2048) << 4;
 8000e18:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
			mic2_samp[ind] = ((int16_t)stream0[i+2] - 2048) << 4;
 8000e1c:	f83c 1013 	ldrh.w	r1, [ip, r3, lsl #1]
		uint32_t ind = i / 3;
 8000e20:	fba8 a203 	umull	sl, r2, r8, r3
 8000e24:	0852      	lsrs	r2, r2, #1
			mic0_samp[ind] = ((int16_t)stream0[i] - 2048) << 4;
 8000e26:	f5a9 6900 	sub.w	r9, r9, #2048	@ 0x800
			mic1_samp[ind] = ((int16_t)stream0[i+1] - 2048) << 4;
 8000e2a:	f5a0 6000 	sub.w	r0, r0, #2048	@ 0x800
			mic2_samp[ind] = ((int16_t)stream0[i+2] - 2048) << 4;
 8000e2e:	f5a1 6100 	sub.w	r1, r1, #2048	@ 0x800
	for (uint32_t i = 0; i < BLOCK_SIZE; i += 3)
 8000e32:	3303      	adds	r3, #3
			mic0_samp[ind] = ((int16_t)stream0[i] - 2048) << 4;
 8000e34:	ea4f 1909 	mov.w	r9, r9, lsl #4
			mic1_samp[ind] = ((int16_t)stream0[i+1] - 2048) << 4;
 8000e38:	0100      	lsls	r0, r0, #4
			mic2_samp[ind] = ((int16_t)stream0[i+2] - 2048) << 4;
 8000e3a:	0109      	lsls	r1, r1, #4
	for (uint32_t i = 0; i < BLOCK_SIZE; i += 3)
 8000e3c:	2b90      	cmp	r3, #144	@ 0x90
			mic0_samp[ind] = ((int16_t)stream0[i] - 2048) << 4;
 8000e3e:	f826 9012 	strh.w	r9, [r6, r2, lsl #1]
			mic1_samp[ind] = ((int16_t)stream0[i+1] - 2048) << 4;
 8000e42:	f825 0012 	strh.w	r0, [r5, r2, lsl #1]
			mic2_samp[ind] = ((int16_t)stream0[i+2] - 2048) << 4;
 8000e46:	f824 1012 	strh.w	r1, [r4, r2, lsl #1]
	for (uint32_t i = 0; i < BLOCK_SIZE; i += 3)
 8000e4a:	d1e3      	bne.n	8000e14 <stream_splice+0x70>
}
 8000e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e50:	20000023 	.word	0x20000023
 8000e54:	20000144 	.word	0x20000144
 8000e58:	200000e4 	.word	0x200000e4
 8000e5c:	20000084 	.word	0x20000084
 8000e60:	20000024 	.word	0x20000024
 8000e64:	20000264 	.word	0x20000264
 8000e68:	aaaaaaab 	.word	0xaaaaaaab
 8000e6c:	00000000 	.word	0x00000000

08000e70 <compute_event_pos>:

void compute_event_pos(float * x, float * y, float mic0_x, float mic0_y,
					   float mic1_x, float mic1_y, float mic2_x, float mic2_y,
					   float mic1_delay, float mic2_delay)
{
 8000e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const float eps = 1e-6;

	for (uint8_t i = 0; i < 10; i++)
	{
		// distances from mic1 and mic2 to mic0
		float d10 = SPEED_OF_SOUND * mic1_delay;
 8000e74:	eddf 7a82 	vldr	s15, [pc, #520]	@ 8001080 <compute_event_pos+0x210>
{
 8000e78:	ed2d 8b10 	vpush	{d8-d15}
		float d10 = SPEED_OF_SOUND * mic1_delay;
 8000e7c:	ee23 7a27 	vmul.f32	s14, s6, s15

		// solve system
		// ([J]^T)[J]delta = -([J]^T)[f]
		// delta = inv(([J]^T)[J]) * (-([J]^T)[f])
		float det = prod11 * prod22 - prod12 * prod21;
		if (fabsf(det) < 1e-6) break;
 8000e80:	a57b      	add	r5, pc, #492	@ (adr r5, 8001070 <compute_event_pos+0x200>)
 8000e82:	e9d5 4500 	ldrd	r4, r5, [r5]
		float d20 = SPEED_OF_SOUND * mic2_delay;
 8000e86:	ee63 7aa7 	vmul.f32	s15, s7, s15
		else if (dy < -max_step)	dy = -max_step;

		*x += dx;
		*y += dy;

		if (sqrtf(dx * dx + dy * dy) < 1e-5) break;
 8000e8a:	a77b      	add	r7, pc, #492	@ (adr r7, 8001078 <compute_event_pos+0x208>)
 8000e8c:	e9d7 6700 	ldrd	r6, r7, [r7]
{
 8000e90:	b082      	sub	sp, #8
		float r0 = sqrtf(powf(*x - mic0_x, 2) + powf(*y - mic0_y, 2));
 8000e92:	ed91 8a00 	vldr	s16, [r1]
		float j11 = (*x - mic1_x) / (r1 + eps) - (*x - mic0_x) / (r0 + eps);
 8000e96:	eddf 8a7b 	vldr	s17, [pc, #492]	@ 8001084 <compute_event_pos+0x214>
		else if (dx < -max_step)	dx = -max_step;
 8000e9a:	eddf ea7b 	vldr	s29, [pc, #492]	@ 8001088 <compute_event_pos+0x218>
 8000e9e:	ed9f ea7b 	vldr	s28, [pc, #492]	@ 800108c <compute_event_pos+0x21c>
		float d10 = SPEED_OF_SOUND * mic1_delay;
 8000ea2:	ed8d 7a00 	vstr	s14, [sp]
{
 8000ea6:	4689      	mov	r9, r1
 8000ea8:	eef0 9a40 	vmov.f32	s19, s0
 8000eac:	eeb0 9a60 	vmov.f32	s18, s1
 8000eb0:	eef0 ba41 	vmov.f32	s23, s2
 8000eb4:	eeb0 ba61 	vmov.f32	s22, s3
 8000eb8:	eef0 aa42 	vmov.f32	s21, s4
 8000ebc:	eeb0 aa62 	vmov.f32	s20, s5
		float d20 = SPEED_OF_SOUND * mic2_delay;
 8000ec0:	edcd 7a01 	vstr	s15, [sp, #4]
{
 8000ec4:	4682      	mov	sl, r0
		float r0 = sqrtf(powf(*x - mic0_x, 2) + powf(*y - mic0_y, 2));
 8000ec6:	f04f 080a 	mov.w	r8, #10
 8000eca:	edda da00 	vldr	s27, [sl]
 8000ece:	ee78 7a49 	vsub.f32	s15, s16, s18
 8000ed2:	ee7d 5ae9 	vsub.f32	s11, s27, s19
		float r1 = sqrtf(powf(*x - mic1_x, 2) + powf(*y - mic1_y, 2));
 8000ed6:	ee38 5a4b 	vsub.f32	s10, s16, s22
		float r2 = sqrtf(powf(*x - mic2_x, 2) + powf(*y - mic2_y, 2));
 8000eda:	ee38 4a4a 	vsub.f32	s8, s16, s20
		float r0 = sqrtf(powf(*x - mic0_x, 2) + powf(*y - mic0_y, 2));
 8000ede:	ee67 7aa7 	vmul.f32	s15, s15, s15
		float r1 = sqrtf(powf(*x - mic1_x, 2) + powf(*y - mic1_y, 2));
 8000ee2:	ee7d 4aeb 	vsub.f32	s9, s27, s23
		float r0 = sqrtf(powf(*x - mic0_x, 2) + powf(*y - mic0_y, 2));
 8000ee6:	eee5 7aa5 	vfma.f32	s15, s11, s11
		float r2 = sqrtf(powf(*x - mic2_x, 2) + powf(*y - mic2_y, 2));
 8000eea:	ee3d 6aea 	vsub.f32	s12, s27, s21
		float r1 = sqrtf(powf(*x - mic1_x, 2) + powf(*y - mic1_y, 2));
 8000eee:	ee25 7a05 	vmul.f32	s14, s10, s10
		float r2 = sqrtf(powf(*x - mic2_x, 2) + powf(*y - mic2_y, 2));
 8000ef2:	ee64 6a04 	vmul.f32	s13, s8, s8
		float r1 = sqrtf(powf(*x - mic1_x, 2) + powf(*y - mic1_y, 2));
 8000ef6:	eea4 7aa4 	vfma.f32	s14, s9, s9
		float r2 = sqrtf(powf(*x - mic2_x, 2) + powf(*y - mic2_y, 2));
 8000efa:	eee6 6a06 	vfma.f32	s13, s12, s12
		if (r0 == 0 || r1 == 0 || r2 == 0) break;
 8000efe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		float r1 = sqrtf(powf(*x - mic1_x, 2) + powf(*y - mic1_y, 2));
 8000f06:	eef1 5ac7 	vsqrt.f32	s11, s14
		float r2 = sqrtf(powf(*x - mic2_x, 2) + powf(*y - mic2_y, 2));
 8000f0a:	eeb1 dae6 	vsqrt.f32	s26, s13
		float r0 = sqrtf(powf(*x - mic0_x, 2) + powf(*y - mic0_y, 2));
 8000f0e:	eef1 3ae7 	vsqrt.f32	s7, s15
		float j12 = (*y - mic1_y) / (r1 + eps) - (*y - mic0_y) / (r0 + eps);
 8000f12:	ee39 2a48 	vsub.f32	s4, s18, s16
		float j11 = (*x - mic1_x) / (r1 + eps) - (*x - mic0_x) / (r0 + eps);
 8000f16:	ee39 3aed 	vsub.f32	s6, s19, s27
		if (r0 == 0 || r1 == 0 || r2 == 0) break;
 8000f1a:	f000 80a1 	beq.w	8001060 <compute_event_pos+0x1f0>
 8000f1e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8000f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f26:	f000 809b 	beq.w	8001060 <compute_event_pos+0x1f0>
 8000f2a:	eef5 6a40 	vcmp.f32	s13, #0.0
 8000f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f32:	f000 8095 	beq.w	8001060 <compute_event_pos+0x1f0>
		float j21 = (*x - mic2_x) / (r2 + eps) - (*x - mic0_x) / (r0 + eps);
 8000f36:	ee3d 7a28 	vadd.f32	s14, s26, s17
		float j11 = (*x - mic1_x) / (r1 + eps) - (*x - mic0_x) / (r0 + eps);
 8000f3a:	ee73 6aa8 	vadd.f32	s13, s7, s17
 8000f3e:	ee75 1aa8 	vadd.f32	s3, s11, s17
 8000f42:	eec3 2a26 	vdiv.f32	s5, s6, s13
		float j21 = (*x - mic2_x) / (r2 + eps) - (*x - mic0_x) / (r0 + eps);
 8000f46:	eec6 7a07 	vdiv.f32	s15, s12, s14
		float j12 = (*y - mic1_y) / (r1 + eps) - (*y - mic0_y) / (r0 + eps);
 8000f4a:	ee82 3a26 	vdiv.f32	s6, s4, s13
		float j22 = (*y - mic2_y) / (r2 + eps) - (*y - mic0_y) / (r0 + eps);
 8000f4e:	ee84 6a07 	vdiv.f32	s12, s8, s14
		float j11 = (*x - mic1_x) / (r1 + eps) - (*x - mic0_x) / (r0 + eps);
 8000f52:	eec4 6aa1 	vdiv.f32	s13, s9, s3
		float j12 = (*y - mic1_y) / (r1 + eps) - (*y - mic0_y) / (r0 + eps);
 8000f56:	ee85 7a21 	vdiv.f32	s14, s10, s3
		float j21 = (*x - mic2_x) / (r2 + eps) - (*x - mic0_x) / (r0 + eps);
 8000f5a:	ee77 7aa2 	vadd.f32	s15, s15, s5
		float j22 = (*y - mic2_y) / (r2 + eps) - (*y - mic0_y) / (r0 + eps);
 8000f5e:	ee36 6a03 	vadd.f32	s12, s12, s6
		float res2 = r2 - r0 - d20;
 8000f62:	ed9d 5a01 	vldr	s10, [sp, #4]
		float j11 = (*x - mic1_x) / (r1 + eps) - (*x - mic0_x) / (r0 + eps);
 8000f66:	ee76 6aa2 	vadd.f32	s13, s13, s5
		float j12 = (*y - mic1_y) / (r1 + eps) - (*y - mic0_y) / (r0 + eps);
 8000f6a:	ee37 7a03 	vadd.f32	s14, s14, s6
		float prod12 = j11 * j12 + j21 * j22;
 8000f6e:	ee67 fa86 	vmul.f32	s31, s15, s12
		float res2 = r2 - r0 - d20;
 8000f72:	ee3d da45 	vsub.f32	s26, s26, s10
		float res1 = r1 - r0 - d10;
 8000f76:	ed9d 5a00 	vldr	s10, [sp]
		float prod12 = j11 * j12 + j21 * j22;
 8000f7a:	eee6 fa87 	vfma.f32	s31, s13, s14
		float res1 = r1 - r0 - d10;
 8000f7e:	ee75 5ac5 	vsub.f32	s11, s11, s10
		float prod11 = j11 * j11 + j21 * j21;
 8000f82:	ee67 4aa7 	vmul.f32	s9, s15, s15
		float prod22 = j12 * j12 + j22 * j22;
 8000f86:	ee26 5a06 	vmul.f32	s10, s12, s12
		float prod11 = j11 * j11 + j21 * j21;
 8000f8a:	eee6 4aa6 	vfma.f32	s9, s13, s13
		float prod22 = j12 * j12 + j22 * j22;
 8000f8e:	eea7 5a07 	vfma.f32	s10, s14, s14
		float det = prod11 * prod22 - prod12 * prod21;
 8000f92:	ee2f faef 	vnmul.f32	s30, s31, s31
		float res2 = r2 - r0 - d20;
 8000f96:	ee3d da63 	vsub.f32	s26, s26, s7
		float det = prod11 * prod22 - prod12 * prod21;
 8000f9a:	eea4 fa85 	vfma.f32	s30, s9, s10
		float res1 = r1 - r0 - d10;
 8000f9e:	ee75 5ae3 	vsub.f32	s11, s11, s7
		float g1 = j11 * res1 + j21 * res2;
 8000fa2:	ee2d 8a27 	vmul.f32	s16, s26, s15
		float g2 = j12 * res1 + j22 * res2;
 8000fa6:	ee2d da06 	vmul.f32	s26, s26, s12
		if (fabsf(det) < 1e-6) break;
 8000faa:	eef0 7acf 	vabs.f32	s15, s30
 8000fae:	ee17 0a90 	vmov	r0, s15
		float g1 = j11 * res1 + j21 * res2;
 8000fb2:	eea5 8aa6 	vfma.f32	s16, s11, s13
		float g2 = j12 * res1 + j22 * res2;
 8000fb6:	eea5 da87 	vfma.f32	s26, s11, s14
		float prod11 = j11 * j11 + j21 * j21;
 8000fba:	eef0 ca64 	vmov.f32	s25, s9
		float prod22 = j12 * j12 + j22 * j22;
 8000fbe:	eeb0 ca45 	vmov.f32	s24, s10
		if (fabsf(det) < 1e-6) break;
 8000fc2:	f7ff fa6d 	bl	80004a0 <__aeabi_f2d>
 8000fc6:	4622      	mov	r2, r4
 8000fc8:	462b      	mov	r3, r5
 8000fca:	f7ff fd33 	bl	8000a34 <__aeabi_dcmplt>
 8000fce:	2800      	cmp	r0, #0
 8000fd0:	d146      	bne.n	8001060 <compute_event_pos+0x1f0>
		float dx = (-prod22 * g1 + prod12 * g2) / det;
 8000fd2:	ee6f 7a8d 	vmul.f32	s15, s31, s26
		float dy = (prod21 * g1 - prod11 * g2) / det;
 8000fd6:	ee2d da6c 	vnmul.f32	s26, s26, s25
 8000fda:	eeec 7a48 	vfms.f32	s15, s24, s16
 8000fde:	eeaf da88 	vfma.f32	s26, s31, s16
		float dx = (-prod22 * g1 + prod12 * g2) / det;
 8000fe2:	ee87 7a8f 	vdiv.f32	s14, s15, s30
		float dy = (prod21 * g1 - prod11 * g2) / det;
 8000fe6:	eecd 7a0f 	vdiv.f32	s15, s26, s30
		else if (dx < -max_step)	dx = -max_step;
 8000fea:	eeb4 7aee 	vcmpe.f32	s14, s29
 8000fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff2:	bfb8      	it	lt
 8000ff4:	eeb0 7a6e 	vmovlt.f32	s14, s29
 8000ff8:	eeb4 7ace 	vcmpe.f32	s14, s28
 8000ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		else if (dy < -max_step)	dy = -max_step;
 8001000:	eef4 7aee 	vcmpe.f32	s15, s29
 8001004:	bf88      	it	hi
 8001006:	eeb0 7a4e 	vmovhi.f32	s14, s28
 800100a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100e:	bfb8      	it	lt
 8001010:	eef0 7a6e 	vmovlt.f32	s15, s29
 8001014:	eef4 7ace 	vcmpe.f32	s15, s28
 8001018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101c:	bf88      	it	hi
 800101e:	eef0 7a4e 	vmovhi.f32	s15, s28
		if (sqrtf(dx * dx + dy * dy) < 1e-5) break;
 8001022:	ee67 6aa7 	vmul.f32	s13, s15, s15
		*x += dx;
 8001026:	ee7d da87 	vadd.f32	s27, s27, s14
		if (sqrtf(dx * dx + dy * dy) < 1e-5) break;
 800102a:	eee7 6a07 	vfma.f32	s13, s14, s14
		*x += dx;
 800102e:	edca da00 	vstr	s27, [sl]
		*y += dy;
 8001032:	ed99 6a00 	vldr	s12, [r9]
 8001036:	ee37 8a86 	vadd.f32	s16, s15, s12
		if (sqrtf(dx * dx + dy * dy) < 1e-5) break;
 800103a:	eef1 7ae6 	vsqrt.f32	s15, s13
		*y += dy;
 800103e:	ed89 8a00 	vstr	s16, [r9]
		if (sqrtf(dx * dx + dy * dy) < 1e-5) break;
 8001042:	ee17 0a90 	vmov	r0, s15
 8001046:	f7ff fa2b 	bl	80004a0 <__aeabi_f2d>
 800104a:	4632      	mov	r2, r6
 800104c:	463b      	mov	r3, r7
 800104e:	f7ff fcf1 	bl	8000a34 <__aeabi_dcmplt>
 8001052:	b928      	cbnz	r0, 8001060 <compute_event_pos+0x1f0>
	for (uint8_t i = 0; i < 10; i++)
 8001054:	f108 33ff 	add.w	r3, r8, #4294967295
 8001058:	f013 08ff 	ands.w	r8, r3, #255	@ 0xff
 800105c:	f47f af35 	bne.w	8000eca <compute_event_pos+0x5a>
	}

}
 8001060:	b002      	add	sp, #8
 8001062:	ecbd 8b10 	vpop	{d8-d15}
 8001066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800106a:	bf00      	nop
 800106c:	f3af 8000 	nop.w
 8001070:	a0b5ed8d 	.word	0xa0b5ed8d
 8001074:	3eb0c6f7 	.word	0x3eb0c6f7
 8001078:	88e368f1 	.word	0x88e368f1
 800107c:	3ee4f8b5 	.word	0x3ee4f8b5
 8001080:	43ab8000 	.word	0x43ab8000
 8001084:	358637bd 	.word	0x358637bd
 8001088:	be4ccccd 	.word	0xbe4ccccd
 800108c:	3e4ccccd 	.word	0x3e4ccccd

08001090 <main>:
{
 8001090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001094:	ed2d 8b06 	vpush	{d8-d10}
 8001098:	f5ad 7d67 	sub.w	sp, sp, #924	@ 0x39c
	arm_fir_init_q15(&hfir0, NUM_FILTER_TAPS, ftaps_q15, mic0_state, SAMPLE_SIZE);
 800109c:	2430      	movs	r4, #48	@ 0x30
{
 800109e:	af02      	add	r7, sp, #8
	sysclock_config();
 80010a0:	f7ff fd40 	bl	8000b24 <sysclock_config>
	arm_fir_init_q15(&hfir0, NUM_FILTER_TAPS, ftaps_q15, mic0_state, SAMPLE_SIZE);
 80010a4:	4621      	mov	r1, r4
 80010a6:	4aba      	ldr	r2, [pc, #744]	@ (8001390 <main+0x300>)
 80010a8:	9400      	str	r4, [sp, #0]
 80010aa:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80010ae:	48b9      	ldr	r0, [pc, #740]	@ (8001394 <main+0x304>)
	float prev_timestamp = 0;
 80010b0:	eddf 8ab9 	vldr	s17, [pc, #740]	@ 8001398 <main+0x308>
 80010b4:	f8df a310 	ldr.w	sl, [pc, #784]	@ 80013c8 <main+0x338>
	arm_fir_init_q15(&hfir0, NUM_FILTER_TAPS, ftaps_q15, mic0_state, SAMPLE_SIZE);
 80010b8:	f000 fae6 	bl	8001688 <arm_fir_init_q15>
	arm_fir_init_q15(&hfir1, NUM_FILTER_TAPS, ftaps_q15, mic1_state, SAMPLE_SIZE);
 80010bc:	4621      	mov	r1, r4
 80010be:	4ab4      	ldr	r2, [pc, #720]	@ (8001390 <main+0x300>)
 80010c0:	9400      	str	r4, [sp, #0]
 80010c2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80010c6:	48b5      	ldr	r0, [pc, #724]	@ (800139c <main+0x30c>)
 80010c8:	f000 fade 	bl	8001688 <arm_fir_init_q15>
	arm_fir_init_q15(&hfir2, NUM_FILTER_TAPS, ftaps_q15, mic2_state, SAMPLE_SIZE);
 80010cc:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80010d0:	4621      	mov	r1, r4
 80010d2:	4aaf      	ldr	r2, [pc, #700]	@ (8001390 <main+0x300>)
 80010d4:	9400      	str	r4, [sp, #0]
 80010d6:	48b2      	ldr	r0, [pc, #712]	@ (80013a0 <main+0x310>)
	GPIOA->MODER &= ~GPIO_MODER_MODER10;
 80010d8:	4cb2      	ldr	r4, [pc, #712]	@ (80013a4 <main+0x314>)
	arm_fir_init_q15(&hfir2, NUM_FILTER_TAPS, ftaps_q15, mic2_state, SAMPLE_SIZE);
 80010da:	f000 fad5 	bl	8001688 <arm_fir_init_q15>
	uart2_set_fcpu(84000000);
 80010de:	48b2      	ldr	r0, [pc, #712]	@ (80013a8 <main+0x318>)
 80010e0:	f000 fbb0 	bl	8001844 <uart2_set_fcpu>
	uart2_dma1_config(115200, USART_DATA_8, USART_STOP_1);
 80010e4:	2200      	movs	r2, #0
 80010e6:	4611      	mov	r1, r2
 80010e8:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 80010ec:	f000 fbba 	bl	8001864 <uart2_dma1_config>
	RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;				// enable TIM2 clock
 80010f0:	49ae      	ldr	r1, [pc, #696]	@ (80013ac <main+0x31c>)
	TIM5->CR1 &= ~TIM_CR1_DIR;			// upcounting
 80010f2:	4baf      	ldr	r3, [pc, #700]	@ (80013b0 <main+0x320>)
	RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;				// enable TIM2 clock
 80010f4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80010f6:	f042 0208 	orr.w	r2, r2, #8
 80010fa:	640a      	str	r2, [r1, #64]	@ 0x40
	TIM5->CR1 &= ~TIM_CR1_DIR;			// upcounting
 80010fc:	681a      	ldr	r2, [r3, #0]
	TIM5->PSC = 839;					// 100kHz frequency
 80010fe:	f240 3047 	movw	r0, #839	@ 0x347
	TIM5->ARR = 0xffffffff;
 8001102:	f04f 31ff 	mov.w	r1, #4294967295
	TIM5->CR1 &= ~TIM_CR1_DIR;			// upcounting
 8001106:	f022 0210 	bic.w	r2, r2, #16
 800110a:	601a      	str	r2, [r3, #0]
	TIM5->PSC = 839;					// 100kHz frequency
 800110c:	6298      	str	r0, [r3, #40]	@ 0x28
	TIM5->ARR = 0xffffffff;
 800110e:	62d9      	str	r1, [r3, #44]	@ 0x2c
	TIM5->EGR |= TIM_EGR_UG;			// generate update event
 8001110:	695a      	ldr	r2, [r3, #20]
 8001112:	f042 0201 	orr.w	r2, r2, #1
 8001116:	615a      	str	r2, [r3, #20]
	TIM5->CR1 |= TIM_CR1_CEN;			// enable counter
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	f042 0201 	orr.w	r2, r2, #1
 800111e:	601a      	str	r2, [r3, #0]
	tim2_trig_config();
 8001120:	f7ff fe1c 	bl	8000d5c <tim2_trig_config>
	adc1_dma_config();
 8001124:	f7ff fd40 	bl	8000ba8 <adc1_dma_config>
	GPIOA->MODER &= ~GPIO_MODER_MODER10;
 8001128:	6823      	ldr	r3, [r4, #0]
 800112a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800112e:	6023      	str	r3, [r4, #0]
	GPIOA->MODER |= GPIO_MODER_MODER10_0;
 8001130:	6823      	ldr	r3, [r4, #0]
 8001132:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001136:	6023      	str	r3, [r4, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODER8;
 8001138:	6823      	ldr	r3, [r4, #0]
 800113a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800113e:	6023      	str	r3, [r4, #0]
	GPIOA->MODER |= GPIO_MODER_MODER8_0;
 8001140:	6823      	ldr	r3, [r4, #0]
	uint8_t ind = 0;
 8001142:	2600      	movs	r6, #0
	GPIOA->MODER |= GPIO_MODER_MODER8_0;
 8001144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
	float mic0_timestamp = 0, mic1_timestamp = 0, mic2_timestamp = 0;
 8001148:	eeb0 9a68 	vmov.f32	s18, s17
 800114c:	eef0 9a68 	vmov.f32	s19, s17
 8001150:	eeb0 aa68 	vmov.f32	s20, s17
	GPIOA->MODER |= GPIO_MODER_MODER8_0;
 8001154:	6023      	str	r3, [r4, #0]
	uint32_t prev_ticks = 0, ticks = 0;
 8001156:	46b1      	mov	r9, r6
	uint8_t detection_cnt = 0;						// # of microphones that have detected an event
 8001158:	4635      	mov	r5, r6
		GPIOA->ODR |= GPIO_ODR_OD10;
 800115a:	6963      	ldr	r3, [r4, #20]
		while (!!(DMA2_Stream0->CR & DMA_SxCR_CT) == dma_tgt);		// wait for stream to complete
 800115c:	4995      	ldr	r1, [pc, #596]	@ (80013b4 <main+0x324>)
		GPIOA->ODR |= GPIO_ODR_OD10;
 800115e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001162:	6163      	str	r3, [r4, #20]
		while (!!(DMA2_Stream0->CR & DMA_SxCR_CT) == dma_tgt);		// wait for stream to complete
 8001164:	4b94      	ldr	r3, [pc, #592]	@ (80013b8 <main+0x328>)
	{
 8001166:	f8c7 d00c 	str.w	sp, [r7, #12]
		while (!!(DMA2_Stream0->CR & DMA_SxCR_CT) == dma_tgt);		// wait for stream to complete
 800116a:	781a      	ldrb	r2, [r3, #0]
 800116c:	690b      	ldr	r3, [r1, #16]
 800116e:	f3c3 43c0 	ubfx	r3, r3, #19, #1
 8001172:	4293      	cmp	r3, r2
 8001174:	d0fa      	beq.n	800116c <main+0xdc>
		ticks = TIM5->CNT;
 8001176:	4b8e      	ldr	r3, [pc, #568]	@ (80013b0 <main+0x320>)
 8001178:	f8d3 b024 	ldr.w	fp, [r3, #36]	@ 0x24
		GPIOA->ODR &= ~GPIO_ODR_OD10;
 800117c:	6963      	ldr	r3, [r4, #20]
 800117e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001182:	6163      	str	r3, [r4, #20]
		dma_tgt = !dma_tgt;											// switch DMA targets
 8001184:	fab2 f282 	clz	r2, r2
 8001188:	4b8b      	ldr	r3, [pc, #556]	@ (80013b8 <main+0x328>)
 800118a:	0952      	lsrs	r2, r2, #5
 800118c:	701a      	strb	r2, [r3, #0]
		DMA2->LIFCR |= DMA_LIFCR_CTCIF0 | DMA_LIFCR_CHTIF0;			// clear transfer complete and half complete flag
 800118e:	688b      	ldr	r3, [r1, #8]
 8001190:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001194:	608b      	str	r3, [r1, #8]
		stream_splice();
 8001196:	f7ff fe05 	bl	8000da4 <stream_splice>
		GPIOA->ODR |= GPIO_ODR_OD8;
 800119a:	6962      	ldr	r2, [r4, #20]
		arm_fir_fast_q15(&hfir0, mic0_samp, mic0_filt, SAMPLE_SIZE);
 800119c:	487d      	ldr	r0, [pc, #500]	@ (8001394 <main+0x304>)
 800119e:	4987      	ldr	r1, [pc, #540]	@ (80013bc <main+0x32c>)
 80011a0:	2330      	movs	r3, #48	@ 0x30
		GPIOA->ODR |= GPIO_ODR_OD8;
 80011a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80011a6:	6162      	str	r2, [r4, #20]
		arm_fir_fast_q15(&hfir0, mic0_samp, mic0_filt, SAMPLE_SIZE);
 80011a8:	18fa      	adds	r2, r7, r3
 80011aa:	f000 f9fd 	bl	80015a8 <arm_fir_fast_q15>
		arm_fir_fast_q15(&hfir1, mic1_samp, mic1_filt, SAMPLE_SIZE);
 80011ae:	487b      	ldr	r0, [pc, #492]	@ (800139c <main+0x30c>)
 80011b0:	4983      	ldr	r1, [pc, #524]	@ (80013c0 <main+0x330>)
 80011b2:	2330      	movs	r3, #48	@ 0x30
 80011b4:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80011b8:	f000 f9f6 	bl	80015a8 <arm_fir_fast_q15>
		arm_fir_fast_q15(&hfir2, mic2_samp, mic2_filt, SAMPLE_SIZE);
 80011bc:	4878      	ldr	r0, [pc, #480]	@ (80013a0 <main+0x310>)
 80011be:	4981      	ldr	r1, [pc, #516]	@ (80013c4 <main+0x334>)
 80011c0:	2330      	movs	r3, #48	@ 0x30
 80011c2:	f107 02f0 	add.w	r2, r7, #240	@ 0xf0
 80011c6:	f000 f9ef 	bl	80015a8 <arm_fir_fast_q15>
		arm_copy_q15(mic0_samp, mic0_filt + ind * SAMPLE_SIZE, SAMPLE_SIZE);
 80011ca:	2230      	movs	r2, #48	@ 0x30
 80011cc:	18bb      	adds	r3, r7, r2
 80011ce:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 80011d2:	eb03 1148 	add.w	r1, r3, r8, lsl #5
 80011d6:	4879      	ldr	r0, [pc, #484]	@ (80013bc <main+0x32c>)
 80011d8:	f000 fafe 	bl	80017d8 <arm_copy_q15>
 80011dc:	ea4f 1848 	mov.w	r8, r8, lsl #5
		arm_copy_q15(mic1_samp, mic1_filt + ind * SAMPLE_SIZE, SAMPLE_SIZE);
 80011e0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80011e4:	eb03 0108 	add.w	r1, r3, r8
 80011e8:	4875      	ldr	r0, [pc, #468]	@ (80013c0 <main+0x330>)
 80011ea:	2230      	movs	r2, #48	@ 0x30
 80011ec:	f000 faf4 	bl	80017d8 <arm_copy_q15>
		arm_copy_q15(mic2_samp, mic2_filt + ind * SAMPLE_SIZE, SAMPLE_SIZE);
 80011f0:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80011f4:	eb03 0108 	add.w	r1, r3, r8
 80011f8:	4872      	ldr	r0, [pc, #456]	@ (80013c4 <main+0x334>)
 80011fa:	2230      	movs	r2, #48	@ 0x30
 80011fc:	f000 faec 	bl	80017d8 <arm_copy_q15>
		arm_absmax_q15(mic0_filt, SAMPLE_SIZE, &mic0_filt_max, &mic0_max_ind);
 8001200:	2130      	movs	r1, #48	@ 0x30
 8001202:	1878      	adds	r0, r7, r1
 8001204:	f107 031c 	add.w	r3, r7, #28
 8001208:	f107 0216 	add.w	r2, r7, #22
 800120c:	f000 fa52 	bl	80016b4 <arm_absmax_q15>
		arm_absmax_q15(mic1_filt, SAMPLE_SIZE, &mic1_filt_max, &mic1_max_ind);
 8001210:	f107 0320 	add.w	r3, r7, #32
 8001214:	f107 0218 	add.w	r2, r7, #24
 8001218:	2130      	movs	r1, #48	@ 0x30
 800121a:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 800121e:	f000 fa49 	bl	80016b4 <arm_absmax_q15>
		arm_absmax_q15(mic2_filt, SAMPLE_SIZE, &mic2_filt_max, &mic2_max_ind);
 8001222:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001226:	f107 021a 	add.w	r2, r7, #26
 800122a:	2130      	movs	r1, #48	@ 0x30
 800122c:	f107 00f0 	add.w	r0, r7, #240	@ 0xf0
 8001230:	f000 fa40 	bl	80016b4 <arm_absmax_q15>
		float ref_time = prev_ticks * TIME_PERIOD;
 8001234:	4648      	mov	r0, r9
 8001236:	f7ff f911 	bl	800045c <__aeabi_ui2d>
 800123a:	a34f      	add	r3, pc, #316	@ (adr r3, 8001378 <main+0x2e8>)
 800123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001240:	f7ff f986 	bl	8000550 <__aeabi_dmul>
 8001244:	f7ff fc1e 	bl	8000a84 <__aeabi_d2f>
		if ((abs(mic0_filt_max) > ENERGY_THRESH) && (ref_time - mic0_timestamp > EVENT_DB_TIME))
 8001248:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800124c:	2b00      	cmp	r3, #0
 800124e:	bfb8      	it	lt
 8001250:	425b      	neglt	r3, r3
 8001252:	b29b      	uxth	r3, r3
 8001254:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
		float ref_time = prev_ticks * TIME_PERIOD;
 8001258:	ee08 0a10 	vmov	s16, r0
		if ((abs(mic0_filt_max) > ENERGY_THRESH) && (ref_time - mic0_timestamp > EVENT_DB_TIME))
 800125c:	d92a      	bls.n	80012b4 <main+0x224>
 800125e:	ee78 7a4a 	vsub.f32	s15, s16, s20
 8001262:	ee17 0a90 	vmov	r0, s15
 8001266:	f7ff f91b 	bl	80004a0 <__aeabi_f2d>
 800126a:	a345      	add	r3, pc, #276	@ (adr r3, 8001380 <main+0x2f0>)
 800126c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001270:	f7ff fbfe 	bl	8000a70 <__aeabi_dcmpgt>
 8001274:	b1f0      	cbz	r0, 80012b4 <main+0x224>
			mic0_timestamp = ref_time + mic0_max_ind * SAMPLE_PERIOD;
 8001276:	69f8      	ldr	r0, [r7, #28]
 8001278:	f7ff f8f0 	bl	800045c <__aeabi_ui2d>
 800127c:	a342      	add	r3, pc, #264	@ (adr r3, 8001388 <main+0x2f8>)
 800127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001282:	f7ff f965 	bl	8000550 <__aeabi_dmul>
 8001286:	4680      	mov	r8, r0
 8001288:	ee18 0a10 	vmov	r0, s16
 800128c:	4689      	mov	r9, r1
 800128e:	f7ff f907 	bl	80004a0 <__aeabi_f2d>
 8001292:	460b      	mov	r3, r1
 8001294:	4602      	mov	r2, r0
 8001296:	4649      	mov	r1, r9
 8001298:	4640      	mov	r0, r8
 800129a:	f7fe ffa3 	bl	80001e4 <__adddf3>
 800129e:	f7ff fbf1 	bl	8000a84 <__aeabi_d2f>
 80012a2:	ee08 0a90 	vmov	s17, r0
			detection_cnt++;
 80012a6:	3501      	adds	r5, #1
			mic_detected_event[0] = 1;
 80012a8:	2301      	movs	r3, #1
			mic0_timestamp = ref_time + mic0_max_ind * SAMPLE_PERIOD;
 80012aa:	eeb0 aa68 	vmov.f32	s20, s17
			detection_cnt++;
 80012ae:	b2ed      	uxtb	r5, r5
			mic_detected_event[0] = 1;
 80012b0:	f88a 3000 	strb.w	r3, [sl]
		if ((abs(mic1_filt_max) > ENERGY_THRESH) && (ref_time - mic1_timestamp > EVENT_DB_TIME))
 80012b4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
		if ((abs(mic2_filt_max) > ENERGY_THRESH) && (ref_time - mic2_timestamp > EVENT_DB_TIME))
 80012b8:	f9b7 801a 	ldrsh.w	r8, [r7, #26]
		if ((abs(mic1_filt_max) > ENERGY_THRESH) && (ref_time - mic1_timestamp > EVENT_DB_TIME))
 80012bc:	2b00      	cmp	r3, #0
 80012be:	bfb8      	it	lt
 80012c0:	425b      	neglt	r3, r3
 80012c2:	b29b      	uxth	r3, r3
		if ((abs(mic2_filt_max) > ENERGY_THRESH) && (ref_time - mic2_timestamp > EVENT_DB_TIME))
 80012c4:	f1b8 0f00 	cmp.w	r8, #0
 80012c8:	bfb8      	it	lt
 80012ca:	f1c8 0800 	rsblt	r8, r8, #0
		if ((abs(mic1_filt_max) > ENERGY_THRESH) && (ref_time - mic1_timestamp > EVENT_DB_TIME))
 80012ce:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
		if ((abs(mic2_filt_max) > ENERGY_THRESH) && (ref_time - mic2_timestamp > EVENT_DB_TIME))
 80012d2:	fa1f f888 	uxth.w	r8, r8
		if ((abs(mic1_filt_max) > ENERGY_THRESH) && (ref_time - mic1_timestamp > EVENT_DB_TIME))
 80012d6:	d979      	bls.n	80013cc <main+0x33c>
 80012d8:	ee78 7a69 	vsub.f32	s15, s16, s19
 80012dc:	ee17 0a90 	vmov	r0, s15
 80012e0:	f7ff f8de 	bl	80004a0 <__aeabi_f2d>
 80012e4:	a326      	add	r3, pc, #152	@ (adr r3, 8001380 <main+0x2f0>)
 80012e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ea:	f7ff fbc1 	bl	8000a70 <__aeabi_dcmpgt>
 80012ee:	2800      	cmp	r0, #0
 80012f0:	d06c      	beq.n	80013cc <main+0x33c>
			mic1_timestamp = ref_time + mic1_max_ind * SAMPLE_PERIOD;
 80012f2:	ee18 0a10 	vmov	r0, s16
 80012f6:	f7ff f8d3 	bl	80004a0 <__aeabi_f2d>
 80012fa:	e9c7 0100 	strd	r0, r1, [r7]
 80012fe:	6a38      	ldr	r0, [r7, #32]
 8001300:	f7ff f8ac 	bl	800045c <__aeabi_ui2d>
 8001304:	a320      	add	r3, pc, #128	@ (adr r3, 8001388 <main+0x2f8>)
 8001306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130a:	f7ff f921 	bl	8000550 <__aeabi_dmul>
 800130e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001312:	f7fe ff67 	bl	80001e4 <__adddf3>
 8001316:	f7ff fbb5 	bl	8000a84 <__aeabi_d2f>
			detection_cnt++;
 800131a:	3501      	adds	r5, #1
			mic_detected_event[1] = 1;
 800131c:	2301      	movs	r3, #1
		if ((abs(mic2_filt_max) > ENERGY_THRESH) && (ref_time - mic2_timestamp > EVENT_DB_TIME))
 800131e:	f5b8 6ffa 	cmp.w	r8, #2000	@ 0x7d0
			mic1_timestamp = ref_time + mic1_max_ind * SAMPLE_PERIOD;
 8001322:	ee09 0a90 	vmov	s19, r0
			detection_cnt++;
 8001326:	b2ed      	uxtb	r5, r5
			mic_detected_event[1] = 1;
 8001328:	f88a 3001 	strb.w	r3, [sl, #1]
		if ((abs(mic2_filt_max) > ENERGY_THRESH) && (ref_time - mic2_timestamp > EVENT_DB_TIME))
 800132c:	d90c      	bls.n	8001348 <main+0x2b8>
 800132e:	ee78 7a49 	vsub.f32	s15, s16, s18
 8001332:	ee17 0a90 	vmov	r0, s15
 8001336:	f7ff f8b3 	bl	80004a0 <__aeabi_f2d>
 800133a:	a311      	add	r3, pc, #68	@ (adr r3, 8001380 <main+0x2f0>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	f7ff fb96 	bl	8000a70 <__aeabi_dcmpgt>
 8001344:	2800      	cmp	r0, #0
 8001346:	d156      	bne.n	80013f6 <main+0x366>
		if (detection_cnt >= 3)
 8001348:	2d02      	cmp	r5, #2
			prev_timestamp = mic1_timestamp;
 800134a:	eef0 8a69 	vmov.f32	s17, s19
		if (detection_cnt >= 3)
 800134e:	d96b      	bls.n	8001428 <main+0x398>
			if (detection_cnt == 3 && mic_detected_event[0] && mic_detected_event[1] && mic_detected_event[2])
 8001350:	2d03      	cmp	r5, #3
 8001352:	d079      	beq.n	8001448 <main+0x3b8>
			mic_detected_event[0] = 0;
 8001354:	2500      	movs	r5, #0
 8001356:	f8aa 5000 	strh.w	r5, [sl]
			mic_detected_event[2] = 0;
 800135a:	f88a 5002 	strb.w	r5, [sl, #2]
		GPIOA->ODR &= ~GPIO_ODR_OD8;
 800135e:	6963      	ldr	r3, [r4, #20]
		if (++ind == WINDOW_SIZE)
 8001360:	3601      	adds	r6, #1
 8001362:	b2f6      	uxtb	r6, r6
			ind = 0;
 8001364:	2e07      	cmp	r6, #7
		GPIOA->ODR &= ~GPIO_ODR_OD8;
 8001366:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800136a:	6163      	str	r3, [r4, #20]
			ind = 0;
 800136c:	bf08      	it	eq
 800136e:	2600      	moveq	r6, #0
		ticks = TIM5->CNT;
 8001370:	46d9      	mov	r9, fp
 8001372:	f8d7 d00c 	ldr.w	sp, [r7, #12]
	{
 8001376:	e6f0      	b.n	800115a <main+0xca>
 8001378:	88e368f1 	.word	0x88e368f1
 800137c:	3ee4f8b5 	.word	0x3ee4f8b5
 8001380:	9999999a 	.word	0x9999999a
 8001384:	3fa99999 	.word	0x3fa99999
 8001388:	eb1c432d 	.word	0xeb1c432d
 800138c:	3efa36e2 	.word	0x3efa36e2
 8001390:	08001b94 	.word	0x08001b94
 8001394:	2000039c 	.word	0x2000039c
 8001398:	00000000 	.word	0x00000000
 800139c:	20000390 	.word	0x20000390
 80013a0:	20000384 	.word	0x20000384
 80013a4:	40020000 	.word	0x40020000
 80013a8:	0501bd00 	.word	0x0501bd00
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40000c00 	.word	0x40000c00
 80013b4:	40026400 	.word	0x40026400
 80013b8:	20000023 	.word	0x20000023
 80013bc:	200000e4 	.word	0x200000e4
 80013c0:	20000084 	.word	0x20000084
 80013c4:	20000024 	.word	0x20000024
 80013c8:	20000020 	.word	0x20000020
		if ((abs(mic2_filt_max) > ENERGY_THRESH) && (ref_time - mic2_timestamp > EVENT_DB_TIME))
 80013cc:	f5b8 6ffa 	cmp.w	r8, #2000	@ 0x7d0
 80013d0:	d938      	bls.n	8001444 <main+0x3b4>
 80013d2:	ee78 7a49 	vsub.f32	s15, s16, s18
 80013d6:	ee17 0a90 	vmov	r0, s15
 80013da:	f7ff f861 	bl	80004a0 <__aeabi_f2d>
 80013de:	a34b      	add	r3, pc, #300	@ (adr r3, 800150c <main+0x47c>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	f7ff fb44 	bl	8000a70 <__aeabi_dcmpgt>
 80013e8:	b360      	cbz	r0, 8001444 <main+0x3b4>
			mic0_timestamp = ref_time + mic0_max_ind * SAMPLE_PERIOD;
 80013ea:	ee18 0a10 	vmov	r0, s16
 80013ee:	f7ff f857 	bl	80004a0 <__aeabi_f2d>
 80013f2:	e9c7 0100 	strd	r0, r1, [r7]
			mic2_timestamp = ref_time + mic2_max_ind * SAMPLE_PERIOD;
 80013f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80013f8:	f7ff f830 	bl	800045c <__aeabi_ui2d>
 80013fc:	a345      	add	r3, pc, #276	@ (adr r3, 8001514 <main+0x484>)
 80013fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001402:	f7ff f8a5 	bl	8000550 <__aeabi_dmul>
 8001406:	e9d7 2300 	ldrd	r2, r3, [r7]
 800140a:	f7fe feeb 	bl	80001e4 <__adddf3>
 800140e:	f7ff fb39 	bl	8000a84 <__aeabi_d2f>
			detection_cnt++;
 8001412:	3501      	adds	r5, #1
			mic2_timestamp = ref_time + mic2_max_ind * SAMPLE_PERIOD;
 8001414:	ee09 0a10 	vmov	s18, r0
			detection_cnt++;
 8001418:	b2ed      	uxtb	r5, r5
			mic_detected_event[2] = 1;
 800141a:	2301      	movs	r3, #1
		if (detection_cnt >= 3)
 800141c:	2d02      	cmp	r5, #2
			mic_detected_event[2] = 1;
 800141e:	f88a 3002 	strb.w	r3, [sl, #2]
			prev_timestamp = mic2_timestamp;
 8001422:	eef0 8a49 	vmov.f32	s17, s18
		if (detection_cnt >= 3)
 8001426:	d893      	bhi.n	8001350 <main+0x2c0>
		else if (detection_cnt != 0 && ref_time - prev_timestamp > TIMEOUT_S)
 8001428:	ee78 7a68 	vsub.f32	s15, s16, s17
 800142c:	ee17 0a90 	vmov	r0, s15
 8001430:	f7ff f836 	bl	80004a0 <__aeabi_f2d>
 8001434:	a335      	add	r3, pc, #212	@ (adr r3, 800150c <main+0x47c>)
 8001436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143a:	f7ff fb19 	bl	8000a70 <__aeabi_dcmpgt>
 800143e:	2800      	cmp	r0, #0
 8001440:	d08d      	beq.n	800135e <main+0x2ce>
 8001442:	e787      	b.n	8001354 <main+0x2c4>
		if (detection_cnt >= 3)
 8001444:	2d03      	cmp	r5, #3
 8001446:	d129      	bne.n	800149c <main+0x40c>
			if (detection_cnt == 3 && mic_detected_event[0] && mic_detected_event[1] && mic_detected_event[2])
 8001448:	f89a 3000 	ldrb.w	r3, [sl]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d081      	beq.n	8001354 <main+0x2c4>
 8001450:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8001454:	2b00      	cmp	r3, #0
 8001456:	f43f af7d 	beq.w	8001354 <main+0x2c4>
 800145a:	f89a 3002 	ldrb.w	r3, [sl, #2]
 800145e:	2b00      	cmp	r3, #0
 8001460:	f43f af78 	beq.w	8001354 <main+0x2c4>
				float mic1_delay = mic1_timestamp - mic0_timestamp;
 8001464:	ee39 3aca 	vsub.f32	s6, s19, s20
				float mic2_delay = mic2_timestamp - mic0_timestamp;
 8001468:	ee79 3a4a 	vsub.f32	s7, s18, s20
				if (abs(mic1_delay) < MAX_TDOA && abs(mic2_delay) < MAX_TDOA)
 800146c:	eefd 7ac3 	vcvt.s32.f32	s15, s6
 8001470:	ee17 3a90 	vmov	r3, s15
 8001474:	eefd 7ae3 	vcvt.s32.f32	s15, s7
 8001478:	ee17 2a90 	vmov	r2, s15
 800147c:	4313      	orrs	r3, r2
 800147e:	f47f af69 	bne.w	8001354 <main+0x2c4>
					if (mic1_delay > 0 && mic2_delay > 0)
 8001482:	eeb5 3ac0 	vcmpe.f32	s6, #0.0
 8001486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148a:	dd0b      	ble.n	80014a4 <main+0x414>
 800148c:	eef5 3ac0 	vcmpe.f32	s7, #0.0
 8001490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001494:	dd2b      	ble.n	80014ee <main+0x45e>
 8001496:	4b18      	ldr	r3, [pc, #96]	@ (80014f8 <main+0x468>)
 8001498:	461a      	mov	r2, r3
 800149a:	e006      	b.n	80014aa <main+0x41a>
		else if (detection_cnt != 0 && ref_time - prev_timestamp > TIMEOUT_S)
 800149c:	2d00      	cmp	r5, #0
 800149e:	f43f af5e 	beq.w	800135e <main+0x2ce>
 80014a2:	e7c1      	b.n	8001428 <main+0x398>
					else if (mic1_delay < 0 && mic2_delay > 0)
 80014a4:	d41b      	bmi.n	80014de <main+0x44e>
					else if (mic1_delay > 0 && mic2_delay < 0)
 80014a6:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <main+0x46c>)
 80014a8:	461a      	mov	r2, r3
					compute_event_pos(&coords.coords_f[0], &coords.coords_f[1], MIC0_XPOS,
 80014aa:	ed9f 1a15 	vldr	s2, [pc, #84]	@ 8001500 <main+0x470>
						coords.coords_f[0] = 0.1;
 80014ae:	62bb      	str	r3, [r7, #40]	@ 0x28
					compute_event_pos(&coords.coords_f[0], &coords.coords_f[1], MIC0_XPOS,
 80014b0:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 80014b4:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80014b8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80014bc:	eeb0 2a62 	vmov.f32	s4, s5
 80014c0:	eef0 1a62 	vmov.f32	s3, s5
 80014c4:	eef0 0a41 	vmov.f32	s1, s2
 80014c8:	eeb0 0a41 	vmov.f32	s0, s2
						coords.coords_f[1] = 0.1;
 80014cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
					compute_event_pos(&coords.coords_f[0], &coords.coords_f[1], MIC0_XPOS,
 80014ce:	f7ff fccf 	bl	8000e70 <compute_event_pos>
					uart2_dma1_write(8, coords.serial);
 80014d2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80014d6:	2008      	movs	r0, #8
 80014d8:	f000 fae6 	bl	8001aa8 <uart2_dma1_write>
			mic_detected_event[1] = 0;
 80014dc:	e73a      	b.n	8001354 <main+0x2c4>
					else if (mic1_delay < 0 && mic2_delay > 0)
 80014de:	eef5 3ac0 	vcmpe.f32	s7, #0.0
 80014e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e6:	ddde      	ble.n	80014a6 <main+0x416>
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <main+0x474>)
 80014ea:	4a03      	ldr	r2, [pc, #12]	@ (80014f8 <main+0x468>)
 80014ec:	e7dd      	b.n	80014aa <main+0x41a>
					else if (mic1_delay > 0 && mic2_delay < 0)
 80014ee:	d5da      	bpl.n	80014a6 <main+0x416>
 80014f0:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <main+0x478>)
 80014f2:	461a      	mov	r2, r3
 80014f4:	e7d9      	b.n	80014aa <main+0x41a>
 80014f6:	bf00      	nop
 80014f8:	3dcccccd 	.word	0x3dcccccd
 80014fc:	3f4ccccd 	.word	0x3f4ccccd
 8001500:	00000000 	.word	0x00000000
 8001504:	3f666666 	.word	0x3f666666
 8001508:	3f333333 	.word	0x3f333333
 800150c:	9999999a 	.word	0x9999999a
 8001510:	3fa99999 	.word	0x3fa99999
 8001514:	eb1c432d 	.word	0xeb1c432d
 8001518:	3efa36e2 	.word	0x3efa36e2

0800151c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800151c:	e7fe      	b.n	800151c <NMI_Handler>
 800151e:	bf00      	nop

08001520 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <HardFault_Handler>
 8001522:	bf00      	nop

08001524 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <MemManage_Handler>
 8001526:	bf00      	nop

08001528 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <BusFault_Handler>
 800152a:	bf00      	nop

0800152c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800152c:	e7fe      	b.n	800152c <UsageFault_Handler>
 800152e:	bf00      	nop

08001530 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop

08001534 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop

08001538 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop

0800153c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153c:	f000 b976 	b.w	800182c <HAL_IncTick>

08001540 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001540:	4a03      	ldr	r2, [pc, #12]	@ (8001550 <SystemInit+0x10>)
 8001542:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001546:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800154a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001554:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800158c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001558:	f7ff fff2 	bl	8001540 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800155c:	480c      	ldr	r0, [pc, #48]	@ (8001590 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800155e:	490d      	ldr	r1, [pc, #52]	@ (8001594 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001560:	4a0d      	ldr	r2, [pc, #52]	@ (8001598 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001564:	e002      	b.n	800156c <LoopCopyDataInit>

08001566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156a:	3304      	adds	r3, #4

0800156c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800156c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001570:	d3f9      	bcc.n	8001566 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001572:	4a0a      	ldr	r2, [pc, #40]	@ (800159c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001574:	4c0a      	ldr	r4, [pc, #40]	@ (80015a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001578:	e001      	b.n	800157e <LoopFillZerobss>

0800157a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800157c:	3204      	adds	r2, #4

0800157e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001580:	d3fb      	bcc.n	800157a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001582:	f000 fad7 	bl	8001b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001586:	f7ff fd83 	bl	8001090 <main>
  bx  lr    
 800158a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800158c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001594:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001598:	08001bfc 	.word	0x08001bfc
  ldr r2, =_sbss
 800159c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80015a0:	200003b0 	.word	0x200003b0

080015a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a4:	e7fe      	b.n	80015a4 <ADC_IRQHandler>
	...

080015a8 <arm_fir_fast_q15>:
ARM_DSP_ATTRIBUTE void arm_fir_fast_q15(
  const arm_fir_instance_q15 * S,
  const q15_t * pSrc,
        q15_t * pDst,
        uint32_t blockSize)
{
 80015a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015ac:	460e      	mov	r6, r1
 80015ae:	4617      	mov	r7, r2
        q15_t *pState = S->pState;                     /* State pointer */
 80015b0:	f8d0 9004 	ldr.w	r9, [r0, #4]
  const q15_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
 80015b4:	6881      	ldr	r1, [r0, #8]
        q15_t *pStateCurnt;                            /* Points to the current sample of the state */
        q15_t *px;                                     /* Temporary pointer for state buffer */
  const q15_t *pb;                                     /* Temporary pointer for coefficient buffer */
        q31_t acc0;                                    /* Accumulators */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 80015b6:	8802      	ldrh	r2, [r0, #0]
{
 80015b8:	b083      	sub	sp, #12
  /* Initialize blkCnt with number of taps */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d062      	beq.n	8001684 <arm_fir_fast_q15+0xdc>
 80015be:	eb09 0842 	add.w	r8, r9, r2, lsl #1
 80015c2:	f109 0e02 	add.w	lr, r9, #2
 80015c6:	46cb      	mov	fp, r9
 80015c8:	f1a8 0804 	sub.w	r8, r8, #4

    /* Use SIMD to hold states and coefficients */
    px = pState;
    pb = pCoeffs;

    tapCnt = numTaps >> 1U;
 80015cc:	0855      	lsrs	r5, r2, #1
  blkCnt = blockSize;
 80015ce:	469c      	mov	ip, r3
 80015d0:	1c8c      	adds	r4, r1, #2
 80015d2:	4691      	mov	r9, r2
    *pStateCurnt++ = *pSrc++;
 80015d4:	f936 0b02 	ldrsh.w	r0, [r6], #2
 80015d8:	f828 0f02 	strh.w	r0, [r8, #2]!
 80015dc:	2200      	movs	r2, #0
    acc0 = 0;
 80015de:	e9cd b300 	strd	fp, r3, [sp]
 80015e2:	f1ae 0a02 	sub.w	sl, lr, #2
 80015e6:	4610      	mov	r0, r2
 80015e8:	46cb      	mov	fp, r9

    do
    {
      acc0 += (q31_t) *px++ * *pb++;
 80015ea:	f83a 9022 	ldrh.w	r9, [sl, r2, lsl #2]
 80015ee:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
 80015f2:	fb19 0003 	smlabb	r0, r9, r3, r0
	  acc0 += (q31_t) *px++ * *pb++;
 80015f6:	f83e 3022 	ldrh.w	r3, [lr, r2, lsl #2]
 80015fa:	f834 9022 	ldrh.w	r9, [r4, r2, lsl #2]

      tapCnt--;
    }
    while (tapCnt > 0U);
 80015fe:	3201      	adds	r2, #1
 8001600:	4295      	cmp	r5, r2
	  acc0 += (q31_t) *px++ * *pb++;
 8001602:	fb13 0009 	smlabb	r0, r3, r9, r0
    while (tapCnt > 0U);
 8001606:	d1f0      	bne.n	80015ea <arm_fir_fast_q15+0x42>

    /* The result is in 2.30 format. Convert to 1.15 with saturation.
       Then store the output in the destination buffer. */
    *pDst++ = (q15_t) (__SSAT((acc0 >> 15), 16));
 8001608:	46d9      	mov	r9, fp
 800160a:	13c0      	asrs	r0, r0, #15
 800160c:	e9dd b300 	ldrd	fp, r3, [sp]
 8001610:	f300 000f 	ssat	r0, #16, r0
  while (blkCnt > 0U)
 8001614:	f1bc 0c01 	subs.w	ip, ip, #1
    *pDst++ = (q15_t) (__SSAT((acc0 >> 15), 16));
 8001618:	f827 0b02 	strh.w	r0, [r7], #2
  while (blkCnt > 0U)
 800161c:	f10e 0e02 	add.w	lr, lr, #2
 8001620:	d1d8      	bne.n	80015d4 <arm_fir_fast_q15+0x2c>
 8001622:	464a      	mov	r2, r9
 8001624:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 8001628:	46d9      	mov	r9, fp
  tapCnt = (numTaps - 1U);

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy remaining data */
  while (tapCnt > 0U)
 800162a:	1e51      	subs	r1, r2, #1
 800162c:	d010      	beq.n	8001650 <arm_fir_fast_q15+0xa8>
 800162e:	1e90      	subs	r0, r2, #2
 8001630:	2806      	cmp	r0, #6
 8001632:	f103 0002 	add.w	r0, r3, #2
 8001636:	d901      	bls.n	800163c <arm_fir_fast_q15+0x94>
 8001638:	4581      	cmp	r9, r0
 800163a:	d10c      	bne.n	8001656 <arm_fir_fast_q15+0xae>
 800163c:	f1a9 0902 	sub.w	r9, r9, #2
 8001640:	e000      	b.n	8001644 <arm_fir_fast_q15+0x9c>
 8001642:	3002      	adds	r0, #2
  {
    *pStateCurnt++ = *pState++;
 8001644:	f930 3c02 	ldrsh.w	r3, [r0, #-2]
 8001648:	f829 3f02 	strh.w	r3, [r9, #2]!
  while (tapCnt > 0U)
 800164c:	3901      	subs	r1, #1
 800164e:	d1f8      	bne.n	8001642 <arm_fir_fast_q15+0x9a>

    /* Decrement loop counter */
    tapCnt--;
  }

}
 8001650:	b003      	add	sp, #12
 8001652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001656:	3a03      	subs	r2, #3
 8001658:	0852      	lsrs	r2, r2, #1
 800165a:	3201      	adds	r2, #1
 800165c:	461d      	mov	r5, r3
 800165e:	464c      	mov	r4, r9
  while (tapCnt > 0U)
 8001660:	2000      	movs	r0, #0
    *pStateCurnt++ = *pState++;
 8001662:	3001      	adds	r0, #1
 8001664:	f855 6b04 	ldr.w	r6, [r5], #4
 8001668:	f844 6b04 	str.w	r6, [r4], #4
  while (tapCnt > 0U)
 800166c:	4290      	cmp	r0, r2
 800166e:	d3f8      	bcc.n	8001662 <arm_fir_fast_q15+0xba>
 8001670:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 8001674:	d0ec      	beq.n	8001650 <arm_fir_fast_q15+0xa8>
    *pStateCurnt++ = *pState++;
 8001676:	f933 3022 	ldrsh.w	r3, [r3, r2, lsl #2]
 800167a:	f829 3022 	strh.w	r3, [r9, r2, lsl #2]
}
 800167e:	b003      	add	sp, #12
 8001680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        q15_t *pState = S->pState;                     /* State pointer */
 8001684:	464b      	mov	r3, r9
 8001686:	e7d0      	b.n	800162a <arm_fir_fast_q15+0x82>

08001688 <arm_fir_init_q15>:
        arm_fir_instance_q15 * S,
        uint16_t numTaps,
  const q15_t * pCoeffs,
        q15_t * pState,
        uint32_t blockSize)
{
 8001688:	b538      	push	{r3, r4, r5, lr}
  arm_status status;

#if defined (ARM_MATH_DSP)

  /* The Number of filter coefficients in the filter must be even and at least 4 */
  if (numTaps & 0x1U)
 800168a:	f011 0501 	ands.w	r5, r1, #1
 800168e:	d10e      	bne.n	80016ae <arm_fir_init_q15+0x26>
    status = ARM_MATH_ARGUMENT_ERROR;
  }
  else
  {
    /* Assign filter taps */
    S->numTaps = numTaps;
 8001690:	8001      	strh	r1, [r0, #0]

    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
 8001692:	468c      	mov	ip, r1

    /* Clear the state buffer.  The size is always (blockSize + numTaps ) */
    memset(pState, 0, (numTaps + (blockSize)) * sizeof(q15_t));
 8001694:	9904      	ldr	r1, [sp, #16]
    S->pCoeffs = pCoeffs;
 8001696:	6082      	str	r2, [r0, #8]
    memset(pState, 0, (numTaps + (blockSize)) * sizeof(q15_t));
 8001698:	448c      	add	ip, r1
 800169a:	4604      	mov	r4, r0
 800169c:	ea4f 024c 	mov.w	r2, ip, lsl #1
 80016a0:	4629      	mov	r1, r5
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 fa3e 	bl	8001b24 <memset>

    /* Assign state pointer */
    S->pState = pState;
 80016a8:	6060      	str	r0, [r4, #4]

    status = ARM_MATH_SUCCESS;
 80016aa:	4628      	mov	r0, r5

  return (status);

#endif /* #if defined (ARM_MATH_DSP) */

}
 80016ac:	bd38      	pop	{r3, r4, r5, pc}
    status = ARM_MATH_ARGUMENT_ERROR;
 80016ae:	f04f 30ff 	mov.w	r0, #4294967295
}
 80016b2:	bd38      	pop	{r3, r4, r5, pc}

080016b4 <arm_absmax_q15>:
ARM_DSP_ATTRIBUTE void arm_absmax_q15(
  const q15_t * pSrc,
        uint32_t blockSize,
        q15_t * pResult,
        uint32_t * pIndex)
{
 80016b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        uint32_t index;                                /* index of maximum value */                         \
                                                                                                            \
  /* Initialize index value to zero. */                                                                     \
  outIndex = 0U;                                                                                            \
  /* Load first input value that act as reference value for comparison */                                  \
  out = *pSrc++;                                                                                            \
 80016b8:	4680      	mov	r8, r0
 80016ba:	f938 cb02 	ldrsh.w	ip, [r8], #2
  out = (out > 0) ? out : (q15_t)__QSUB16(0, out);                                                                           \
 80016be:	f1bc 0f00 	cmp.w	ip, #0
 80016c2:	dc04      	bgt.n	80016ce <arm_absmax_q15+0x1a>

__STATIC_FORCEINLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80016c4:	2400      	movs	r4, #0
 80016c6:	fad4 f41c 	qsub16	r4, r4, ip
 80016ca:	fa0f fc84 	sxth.w	ip, r4
  /* Initialize index of extrema value. */                                                                  \
  index = 0U;                                                                                               \
                                                                                                            \
  /* Loop unrolling: Compute 4 outputs at a time */                                                         \
  blkCnt = (blockSize - 1U) >> 2U;                                                                          \
 80016ce:	f101 39ff 	add.w	r9, r1, #4294967295
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 80016d2:	ea5f 0a99 	movs.w	sl, r9, lsr #2
 80016d6:	d07c      	beq.n	80017d2 <arm_absmax_q15+0x11e>
  index = 0U;                                                                                               \
 80016d8:	2400      	movs	r4, #0
 80016da:	300a      	adds	r0, #10
 80016dc:	ea4f 078a 	mov.w	r7, sl, lsl #2
  outIndex = 0U;                                                                                            \
 80016e0:	4625      	mov	r5, r4
 80016e2:	4626      	mov	r6, r4
  {                                                                                                         \
    /* Initialize cur_absmax to next consecutive values one by one */                                         \
    cur_absmax = *pSrc++;                                                                                     \
 80016e4:	f930 ec08 	ldrsh.w	lr, [r0, #-8]
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 80016e8:	f1be 0f00 	cmp.w	lr, #0
 80016ec:	dc03      	bgt.n	80016f6 <arm_absmax_q15+0x42>
 80016ee:	fad6 fe1e 	qsub16	lr, r6, lr
 80016f2:	fa0f fe8e 	sxth.w	lr, lr
    /* compare for the extrema value */                                                                     \
    if (cur_absmax > out)                                                                         \
 80016f6:	45e6      	cmp	lr, ip
    {                                                                                                       \
      /* Update the extrema value and it's index */                                                         \
      out = cur_absmax;                                                                                       \
 80016f8:	bfc8      	it	gt
 80016fa:	46f4      	movgt	ip, lr
      outIndex = index + 1U;                                                                                \
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 80016fc:	f930 ec06 	ldrsh.w	lr, [r0, #-6]
      outIndex = index + 1U;                                                                                \
 8001700:	bfc8      	it	gt
 8001702:	1c65      	addgt	r5, r4, #1
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8001704:	f1be 0f00 	cmp.w	lr, #0
 8001708:	dc03      	bgt.n	8001712 <arm_absmax_q15+0x5e>
 800170a:	fad6 fe1e 	qsub16	lr, r6, lr
 800170e:	fa0f fe8e 	sxth.w	lr, lr
    if (cur_absmax > out)                                                                         \
 8001712:	45f4      	cmp	ip, lr
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8001714:	bfb8      	it	lt
 8001716:	46f4      	movlt	ip, lr
      outIndex = index + 2U;                                                                                \
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8001718:	f930 ec04 	ldrsh.w	lr, [r0, #-4]
      outIndex = index + 2U;                                                                                \
 800171c:	bfb8      	it	lt
 800171e:	1ca5      	addlt	r5, r4, #2
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8001720:	f1be 0f00 	cmp.w	lr, #0
 8001724:	dc03      	bgt.n	800172e <arm_absmax_q15+0x7a>
 8001726:	fad6 fe1e 	qsub16	lr, r6, lr
 800172a:	fa0f fe8e 	sxth.w	lr, lr
    if (cur_absmax > out)                                                                          \
 800172e:	45f4      	cmp	ip, lr
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
      outIndex = index + 3U;                                                                                \
 8001730:	bfa8      	it	ge
 8001732:	46e6      	movge	lr, ip
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8001734:	f930 cc02 	ldrsh.w	ip, [r0, #-2]
      outIndex = index + 3U;                                                                                \
 8001738:	bfb8      	it	lt
 800173a:	1ce5      	addlt	r5, r4, #3
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 800173c:	f1bc 0f00 	cmp.w	ip, #0
 8001740:	dc03      	bgt.n	800174a <arm_absmax_q15+0x96>
 8001742:	fad6 fc1c 	qsub16	ip, r6, ip
 8001746:	fa0f fc8c 	sxth.w	ip, ip
    if (cur_absmax > out)                                                                          \
 800174a:	45e6      	cmp	lr, ip
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
      outIndex = index + 4U;                                                                                \
 800174c:	f104 0404 	add.w	r4, r4, #4
    if (cur_absmax > out)                                                                          \
 8001750:	bfac      	ite	ge
 8001752:	46f4      	movge	ip, lr
      outIndex = index + 4U;                                                                                \
 8001754:	4625      	movlt	r5, r4
  while (blkCnt > 0U)                                                                                       \
 8001756:	42bc      	cmp	r4, r7
 8001758:	f100 0008 	add.w	r0, r0, #8
 800175c:	d1c2      	bne.n	80016e4 <arm_absmax_q15+0x30>
 800175e:	eb08 08ca 	add.w	r8, r8, sl, lsl #3
                                                                                                            \
  /* Loop unrolling: Compute remaining outputs */                                                           \
  blkCnt = (blockSize - 1U) % 4U;                                                                           \
                                                                                                            \
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 8001762:	f019 0403 	ands.w	r4, r9, #3
 8001766:	d01f      	beq.n	80017a8 <arm_absmax_q15+0xf4>
  {                                                                                                         \
    cur_absmax = *pSrc++;                                                                                     \
 8001768:	f9b8 0000 	ldrsh.w	r0, [r8]
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 800176c:	2800      	cmp	r0, #0
 800176e:	dd20      	ble.n	80017b2 <arm_absmax_q15+0xfe>
    if (cur_absmax > out)                                                                         \
 8001770:	4560      	cmp	r0, ip
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8001772:	bfc4      	itt	gt
 8001774:	4684      	movgt	ip, r0
      outIndex = blockSize - blkCnt;                                                                        \
 8001776:	1b0d      	subgt	r5, r1, r4
  while (blkCnt > 0U)                                                                                       \
 8001778:	1e66      	subs	r6, r4, #1
 800177a:	d015      	beq.n	80017a8 <arm_absmax_q15+0xf4>
    cur_absmax = *pSrc++;                                                                                     \
 800177c:	f9b8 0002 	ldrsh.w	r0, [r8, #2]
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8001780:	2800      	cmp	r0, #0
 8001782:	dd1b      	ble.n	80017bc <arm_absmax_q15+0x108>
    if (cur_absmax > out)                                                                         \
 8001784:	4584      	cmp	ip, r0
      outIndex = blockSize - blkCnt;                                                                        \
 8001786:	bfbc      	itt	lt
 8001788:	1b8d      	sublt	r5, r1, r6
      out = cur_absmax;                                                                                       \
 800178a:	4684      	movlt	ip, r0
  while (blkCnt > 0U)                                                                                       \
 800178c:	2c02      	cmp	r4, #2
 800178e:	d00b      	beq.n	80017a8 <arm_absmax_q15+0xf4>
    cur_absmax = *pSrc++;                                                                                     \
 8001790:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8001794:	2900      	cmp	r1, #0
 8001796:	dc03      	bgt.n	80017a0 <arm_absmax_q15+0xec>
 8001798:	2000      	movs	r0, #0
 800179a:	fad0 f111 	qsub16	r1, r0, r1
 800179e:	b209      	sxth	r1, r1
      out = cur_absmax;                                                                                       \
 80017a0:	4561      	cmp	r1, ip
 80017a2:	bfc4      	itt	gt
 80017a4:	464d      	movgt	r5, r9
 80017a6:	468c      	movgt	ip, r1
    /* Decrement loop counter */                                                                            \
    blkCnt--;                                                                                               \
  }                                                                                                         \
                                                                                                            \
  /* Store the extrema value and it's index into destination pointers */                                    \
  *pResult = out;                                                                                           \
 80017a8:	f8a2 c000 	strh.w	ip, [r2]
  *pIndex = outIndex;  
 80017ac:	601d      	str	r5, [r3, #0]
}
 80017ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017b2:	2600      	movs	r6, #0
 80017b4:	fad6 f010 	qsub16	r0, r6, r0
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 80017b8:	b200      	sxth	r0, r0
 80017ba:	e7d9      	b.n	8001770 <arm_absmax_q15+0xbc>
 80017bc:	2700      	movs	r7, #0
 80017be:	fad7 f010 	qsub16	r0, r7, r0
 80017c2:	b200      	sxth	r0, r0
    if (cur_absmax > out)                                                                         \
 80017c4:	4584      	cmp	ip, r0
      outIndex = blockSize - blkCnt;                                                                        \
 80017c6:	bfbc      	itt	lt
 80017c8:	1b8d      	sublt	r5, r1, r6
      out = cur_absmax;                                                                                       \
 80017ca:	4684      	movlt	ip, r0
  while (blkCnt > 0U)                                                                                       \
 80017cc:	2c02      	cmp	r4, #2
 80017ce:	d1df      	bne.n	8001790 <arm_absmax_q15+0xdc>
 80017d0:	e7ea      	b.n	80017a8 <arm_absmax_q15+0xf4>
  outIndex = 0U;                                                                                            \
 80017d2:	4655      	mov	r5, sl
 80017d4:	e7c5      	b.n	8001762 <arm_absmax_q15+0xae>
 80017d6:	bf00      	nop

080017d8 <arm_copy_q15>:
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80017d8:	b33a      	cbz	r2, 800182a <arm_copy_q15+0x52>
{
 80017da:	b530      	push	{r4, r5, lr}
 80017dc:	1e54      	subs	r4, r2, #1
 80017de:	2c06      	cmp	r4, #6
 80017e0:	f100 0c02 	add.w	ip, r0, #2
 80017e4:	d901      	bls.n	80017ea <arm_copy_q15+0x12>
 80017e6:	4561      	cmp	r1, ip
 80017e8:	d10b      	bne.n	8001802 <arm_copy_q15+0x2a>
 80017ea:	1e8b      	subs	r3, r1, #2
 80017ec:	e002      	b.n	80017f4 <arm_copy_q15+0x1c>
 80017ee:	3c01      	subs	r4, #1
 80017f0:	f10c 0c02 	add.w	ip, ip, #2
  {
    /* C = A */

    /* Copy and store result in destination buffer */
    *pDst++ = *pSrc++;
 80017f4:	f93c 2c02 	ldrsh.w	r2, [ip, #-2]
 80017f8:	f823 2f02 	strh.w	r2, [r3, #2]!
  while (blkCnt > 0U)
 80017fc:	2c00      	cmp	r4, #0
 80017fe:	d1f6      	bne.n	80017ee <arm_copy_q15+0x16>

    /* Decrement loop counter */
    blkCnt--;
  }
}
 8001800:	bd30      	pop	{r4, r5, pc}
 8001802:	0855      	lsrs	r5, r2, #1
 8001804:	4684      	mov	ip, r0
 8001806:	460c      	mov	r4, r1
  while (blkCnt > 0U)
 8001808:	2300      	movs	r3, #0
    *pDst++ = *pSrc++;
 800180a:	3301      	adds	r3, #1
 800180c:	f85c eb04 	ldr.w	lr, [ip], #4
 8001810:	f844 eb04 	str.w	lr, [r4], #4
  while (blkCnt > 0U)
 8001814:	42ab      	cmp	r3, r5
 8001816:	d1f8      	bne.n	800180a <arm_copy_q15+0x32>
 8001818:	f022 0301 	bic.w	r3, r2, #1
 800181c:	07d2      	lsls	r2, r2, #31
 800181e:	d5ef      	bpl.n	8001800 <arm_copy_q15+0x28>
    *pDst++ = *pSrc++;
 8001820:	f930 2013 	ldrsh.w	r2, [r0, r3, lsl #1]
 8001824:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001828:	bd30      	pop	{r4, r5, pc}
 800182a:	4770      	bx	lr

0800182c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800182c:	4a03      	ldr	r2, [pc, #12]	@ (800183c <HAL_IncTick+0x10>)
 800182e:	4b04      	ldr	r3, [pc, #16]	@ (8001840 <HAL_IncTick+0x14>)
 8001830:	6811      	ldr	r1, [r2, #0]
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	440b      	add	r3, r1
 8001836:	6013      	str	r3, [r2, #0]
}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	200003a8 	.word	0x200003a8
 8001840:	20000000 	.word	0x20000000

08001844 <uart2_set_fcpu>:

unsigned long f_cpu;

/** Functions ----------------------------------------------------------------*/
void uart2_set_fcpu(unsigned long freq)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	f_cpu = freq;
 800184c:	4a04      	ldr	r2, [pc, #16]	@ (8001860 <uart2_set_fcpu+0x1c>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6013      	str	r3, [r2, #0]
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	200003ac 	.word	0x200003ac

08001864 <uart2_dma1_config>:

	return USART_OK;
}

uart_err_type_t uart2_dma1_config(uint32_t baud, uart_data_type_t ndata, uart_stop_type_t nstop)
{
 8001864:	b5b0      	push	{r4, r5, r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	460b      	mov	r3, r1
 800186e:	72fb      	strb	r3, [r7, #11]
 8001870:	4613      	mov	r3, r2
 8001872:	72bb      	strb	r3, [r7, #10]
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;	// enable UART2 clock
 8001874:	4b85      	ldr	r3, [pc, #532]	@ (8001a8c <uart2_dma1_config+0x228>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001878:	4a84      	ldr	r2, [pc, #528]	@ (8001a8c <uart2_dma1_config+0x228>)
 800187a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800187e:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;	// enable GPIOA clock
 8001880:	4b82      	ldr	r3, [pc, #520]	@ (8001a8c <uart2_dma1_config+0x228>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001884:	4a81      	ldr	r2, [pc, #516]	@ (8001a8c <uart2_dma1_config+0x228>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN;		// enable DMA1 clock
 800188c:	4b7f      	ldr	r3, [pc, #508]	@ (8001a8c <uart2_dma1_config+0x228>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001890:	4a7e      	ldr	r2, [pc, #504]	@ (8001a8c <uart2_dma1_config+0x228>)
 8001892:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001896:	6313      	str	r3, [r2, #48]	@ 0x30

	/* Setup DMA1 for transmission */
	// disable DMA1 to configure
	DMA1_Stream6->CR &= ~DMA_SxCR_EN;
 8001898:	4b7d      	ldr	r3, [pc, #500]	@ (8001a90 <uart2_dma1_config+0x22c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a7c      	ldr	r2, [pc, #496]	@ (8001a90 <uart2_dma1_config+0x22c>)
 800189e:	f023 0301 	bic.w	r3, r3, #1
 80018a2:	6013      	str	r3, [r2, #0]
	while (DMA1_Stream6->CR & DMA_SxCR_EN);
 80018a4:	bf00      	nop
 80018a6:	4b7a      	ldr	r3, [pc, #488]	@ (8001a90 <uart2_dma1_config+0x22c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f9      	bne.n	80018a6 <uart2_dma1_config+0x42>

	// select stream 6, channel 4 for USART2_TX
	DMA1_Stream6->CR &= ~DMA_SxCR_CHSEL;
 80018b2:	4b77      	ldr	r3, [pc, #476]	@ (8001a90 <uart2_dma1_config+0x22c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a76      	ldr	r2, [pc, #472]	@ (8001a90 <uart2_dma1_config+0x22c>)
 80018b8:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 80018bc:	6013      	str	r3, [r2, #0]
	DMA1_Stream6->CR |= DMA_SxCR_CHSEL_2;
 80018be:	4b74      	ldr	r3, [pc, #464]	@ (8001a90 <uart2_dma1_config+0x22c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a73      	ldr	r2, [pc, #460]	@ (8001a90 <uart2_dma1_config+0x22c>)
 80018c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80018c8:	6013      	str	r3, [r2, #0]

	// disable direct mode
	DMA1_Stream6->FCR |= DMA_SxFCR_DMDIS;
 80018ca:	4b71      	ldr	r3, [pc, #452]	@ (8001a90 <uart2_dma1_config+0x22c>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	4a70      	ldr	r2, [pc, #448]	@ (8001a90 <uart2_dma1_config+0x22c>)
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	6153      	str	r3, [r2, #20]

	// normal mode, low priority, 1 byte data size (memory and peripheral)
	DMA1_Stream6->CR &= ~(DMA_SxCR_DBM | DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE);
 80018d6:	4b6e      	ldr	r3, [pc, #440]	@ (8001a90 <uart2_dma1_config+0x22c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a6d      	ldr	r2, [pc, #436]	@ (8001a90 <uart2_dma1_config+0x22c>)
 80018dc:	f423 23ef 	bic.w	r3, r3, #489472	@ 0x77800
 80018e0:	6013      	str	r3, [r2, #0]

	// memory increment mode
	DMA1_Stream6->CR |= DMA_SxCR_MINC;
 80018e2:	4b6b      	ldr	r3, [pc, #428]	@ (8001a90 <uart2_dma1_config+0x22c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a6a      	ldr	r2, [pc, #424]	@ (8001a90 <uart2_dma1_config+0x22c>)
 80018e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018ec:	6013      	str	r3, [r2, #0]

	// fixed peripheral pointer
	DMA1_Stream6->CR &= ~DMA_SxCR_PINC;
 80018ee:	4b68      	ldr	r3, [pc, #416]	@ (8001a90 <uart2_dma1_config+0x22c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a67      	ldr	r2, [pc, #412]	@ (8001a90 <uart2_dma1_config+0x22c>)
 80018f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80018f8:	6013      	str	r3, [r2, #0]

	// disable circular mode
	DMA1_Stream6->CR &= ~DMA_SxCR_CIRC;
 80018fa:	4b65      	ldr	r3, [pc, #404]	@ (8001a90 <uart2_dma1_config+0x22c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a64      	ldr	r2, [pc, #400]	@ (8001a90 <uart2_dma1_config+0x22c>)
 8001900:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001904:	6013      	str	r3, [r2, #0]

	// memory to peripheral mode
	DMA1_Stream6->CR &= ~DMA_SxCR_DIR_1;
 8001906:	4b62      	ldr	r3, [pc, #392]	@ (8001a90 <uart2_dma1_config+0x22c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a61      	ldr	r2, [pc, #388]	@ (8001a90 <uart2_dma1_config+0x22c>)
 800190c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001910:	6013      	str	r3, [r2, #0]
	DMA1_Stream6->CR |= DMA_SxCR_DIR_0;
 8001912:	4b5f      	ldr	r3, [pc, #380]	@ (8001a90 <uart2_dma1_config+0x22c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a5e      	ldr	r2, [pc, #376]	@ (8001a90 <uart2_dma1_config+0x22c>)
 8001918:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800191c:	6013      	str	r3, [r2, #0]

	// peripheral address is USART2_DR
	DMA1_Stream6->PAR = (uint32_t)&(USART2->DR);
 800191e:	4b5c      	ldr	r3, [pc, #368]	@ (8001a90 <uart2_dma1_config+0x22c>)
 8001920:	4a5c      	ldr	r2, [pc, #368]	@ (8001a94 <uart2_dma1_config+0x230>)
 8001922:	609a      	str	r2, [r3, #8]

	/* Setup UART2 for transmission using DMA1 */
	// alternate function mode on TX (PA2) and RX (PA3)
	GPIOA->MODER |= GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1;
 8001924:	4b5c      	ldr	r3, [pc, #368]	@ (8001a98 <uart2_dma1_config+0x234>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a5b      	ldr	r2, [pc, #364]	@ (8001a98 <uart2_dma1_config+0x234>)
 800192a:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800192e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_0 | GPIO_MODER_MODER3_0);
 8001930:	4b59      	ldr	r3, [pc, #356]	@ (8001a98 <uart2_dma1_config+0x234>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a58      	ldr	r2, [pc, #352]	@ (8001a98 <uart2_dma1_config+0x234>)
 8001936:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 800193a:	6013      	str	r3, [r2, #0]

	// select alternate function mode 7 for each
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL2 | GPIO_AFRL_AFRL3);
 800193c:	4b56      	ldr	r3, [pc, #344]	@ (8001a98 <uart2_dma1_config+0x234>)
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	4a55      	ldr	r2, [pc, #340]	@ (8001a98 <uart2_dma1_config+0x234>)
 8001942:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001946:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL2_0 | GPIO_AFRL_AFRL3_0 |
 8001948:	4b53      	ldr	r3, [pc, #332]	@ (8001a98 <uart2_dma1_config+0x234>)
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	4a52      	ldr	r2, [pc, #328]	@ (8001a98 <uart2_dma1_config+0x234>)
 800194e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8001952:	6213      	str	r3, [r2, #32]
					GPIO_AFRL_AFRL2_1 | GPIO_AFRL_AFRL3_1 |
					GPIO_AFRL_AFRL2_2 | GPIO_AFRL_AFRL3_2;

	USART2->CR1 |= USART_CR1_UE;			// UART2 enable
 8001954:	4b51      	ldr	r3, [pc, #324]	@ (8001a9c <uart2_dma1_config+0x238>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	4a50      	ldr	r2, [pc, #320]	@ (8001a9c <uart2_dma1_config+0x238>)
 800195a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800195e:	60d3      	str	r3, [r2, #12]

	if (ndata == USART_DATA_8)
 8001960:	7afb      	ldrb	r3, [r7, #11]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d106      	bne.n	8001974 <uart2_dma1_config+0x110>
	{
		USART2->CR1 &= ~USART_CR1_M;		// 1 start, 8 data, n stop
 8001966:	4b4d      	ldr	r3, [pc, #308]	@ (8001a9c <uart2_dma1_config+0x238>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	4a4c      	ldr	r2, [pc, #304]	@ (8001a9c <uart2_dma1_config+0x238>)
 800196c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001970:	60d3      	str	r3, [r2, #12]
 8001972:	e00b      	b.n	800198c <uart2_dma1_config+0x128>
	}
	else if (ndata == USART_DATA_9)
 8001974:	7afb      	ldrb	r3, [r7, #11]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d106      	bne.n	8001988 <uart2_dma1_config+0x124>
	{
		USART2->CR1 |= USART_CR1_M;			// 1 start, 9 data, n stop
 800197a:	4b48      	ldr	r3, [pc, #288]	@ (8001a9c <uart2_dma1_config+0x238>)
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	4a47      	ldr	r2, [pc, #284]	@ (8001a9c <uart2_dma1_config+0x238>)
 8001980:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001984:	60d3      	str	r3, [r2, #12]
 8001986:	e001      	b.n	800198c <uart2_dma1_config+0x128>
	}
	else
	{
		return USART_INVALID_NDATA;
 8001988:	2302      	movs	r3, #2
 800198a:	e07b      	b.n	8001a84 <uart2_dma1_config+0x220>
	}

	if (nstop == USART_STOP_1)
 800198c:	7abb      	ldrb	r3, [r7, #10]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d106      	bne.n	80019a0 <uart2_dma1_config+0x13c>
	{
		USART2->CR2 &= ~USART_CR2_STOP;		// 1 stop bit
 8001992:	4b42      	ldr	r3, [pc, #264]	@ (8001a9c <uart2_dma1_config+0x238>)
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	4a41      	ldr	r2, [pc, #260]	@ (8001a9c <uart2_dma1_config+0x238>)
 8001998:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800199c:	6113      	str	r3, [r2, #16]
 800199e:	e021      	b.n	80019e4 <uart2_dma1_config+0x180>
	}
	else if (nstop == USART_STOP_HALF)
 80019a0:	7abb      	ldrb	r3, [r7, #10]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d10c      	bne.n	80019c0 <uart2_dma1_config+0x15c>
	{
		USART2->CR2 &= ~USART_CR2_STOP;		// half stop bit
 80019a6:	4b3d      	ldr	r3, [pc, #244]	@ (8001a9c <uart2_dma1_config+0x238>)
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	4a3c      	ldr	r2, [pc, #240]	@ (8001a9c <uart2_dma1_config+0x238>)
 80019ac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019b0:	6113      	str	r3, [r2, #16]
		USART2->CR2 |= USART_CR2_STOP_0;
 80019b2:	4b3a      	ldr	r3, [pc, #232]	@ (8001a9c <uart2_dma1_config+0x238>)
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	4a39      	ldr	r2, [pc, #228]	@ (8001a9c <uart2_dma1_config+0x238>)
 80019b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019bc:	6113      	str	r3, [r2, #16]
 80019be:	e011      	b.n	80019e4 <uart2_dma1_config+0x180>
	}
	else if (nstop == USART_STOP_2)
 80019c0:	7abb      	ldrb	r3, [r7, #10]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d10c      	bne.n	80019e0 <uart2_dma1_config+0x17c>
	{
		USART2->CR2 &= ~USART_CR2_STOP;		// 2 stop bits
 80019c6:	4b35      	ldr	r3, [pc, #212]	@ (8001a9c <uart2_dma1_config+0x238>)
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	4a34      	ldr	r2, [pc, #208]	@ (8001a9c <uart2_dma1_config+0x238>)
 80019cc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019d0:	6113      	str	r3, [r2, #16]
		USART2->CR2 |= USART_CR2_STOP_1;
 80019d2:	4b32      	ldr	r3, [pc, #200]	@ (8001a9c <uart2_dma1_config+0x238>)
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	4a31      	ldr	r2, [pc, #196]	@ (8001a9c <uart2_dma1_config+0x238>)
 80019d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019dc:	6113      	str	r3, [r2, #16]
 80019de:	e001      	b.n	80019e4 <uart2_dma1_config+0x180>
	}
	else
	{
		return USART_INVALID_NSTOP;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e04f      	b.n	8001a84 <uart2_dma1_config+0x220>
	}

	// pg. 519 STM32F401RE reference
	float usart_div = f_cpu / (2 * 16.0 * baud);		// APB1 bus is 1/2 clock speed of f_cpu
 80019e4:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa0 <uart2_dma1_config+0x23c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fd37 	bl	800045c <__aeabi_ui2d>
 80019ee:	4604      	mov	r4, r0
 80019f0:	460d      	mov	r5, r1
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f7fe fd32 	bl	800045c <__aeabi_ui2d>
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	4b29      	ldr	r3, [pc, #164]	@ (8001aa4 <uart2_dma1_config+0x240>)
 80019fe:	f7fe fda7 	bl	8000550 <__aeabi_dmul>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4620      	mov	r0, r4
 8001a08:	4629      	mov	r1, r5
 8001a0a:	f7fe fecb 	bl	80007a4 <__aeabi_ddiv>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4610      	mov	r0, r2
 8001a14:	4619      	mov	r1, r3
 8001a16:	f7ff f835 	bl	8000a84 <__aeabi_d2f>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	617b      	str	r3, [r7, #20]
	uint16_t mantissa = (uint16_t) usart_div;
 8001a1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a26:	ee17 3a90 	vmov	r3, s15
 8001a2a:	827b      	strh	r3, [r7, #18]
	uint8_t fraction = (uint8_t) ((usart_div - mantissa) * 16);
 8001a2c:	8a7b      	ldrh	r3, [r7, #18]
 8001a2e:	ee07 3a90 	vmov	s15, r3
 8001a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a36:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a3e:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001a42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a4a:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a4e:	793b      	ldrb	r3, [r7, #4]
 8001a50:	747b      	strb	r3, [r7, #17]
	USART2->BRR = mantissa << 4 | fraction;
 8001a52:	8a7b      	ldrh	r3, [r7, #18]
 8001a54:	011a      	lsls	r2, r3, #4
 8001a56:	7c7b      	ldrb	r3, [r7, #17]
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	4b10      	ldr	r3, [pc, #64]	@ (8001a9c <uart2_dma1_config+0x238>)
 8001a5c:	609a      	str	r2, [r3, #8]

	USART2->CR3 |= USART_CR3_DMAT;		// enable DMA transmitter
 8001a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a9c <uart2_dma1_config+0x238>)
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	4a0e      	ldr	r2, [pc, #56]	@ (8001a9c <uart2_dma1_config+0x238>)
 8001a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a68:	6153      	str	r3, [r2, #20]

	USART2->CR1 |= USART_CR1_TE;		// transmitter enable
 8001a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a9c <uart2_dma1_config+0x238>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a9c <uart2_dma1_config+0x238>)
 8001a70:	f043 0308 	orr.w	r3, r3, #8
 8001a74:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RE;		// receiver enable
 8001a76:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <uart2_dma1_config+0x238>)
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	4a08      	ldr	r2, [pc, #32]	@ (8001a9c <uart2_dma1_config+0x238>)
 8001a7c:	f043 0304 	orr.w	r3, r3, #4
 8001a80:	60d3      	str	r3, [r2, #12]

	return USART_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	400260a0 	.word	0x400260a0
 8001a94:	40004404 	.word	0x40004404
 8001a98:	40020000 	.word	0x40020000
 8001a9c:	40004400 	.word	0x40004400
 8001aa0:	200003ac 	.word	0x200003ac
 8001aa4:	40400000 	.word	0x40400000

08001aa8 <uart2_dma1_write>:

	return USART_OK;
}

void uart2_dma1_write(uint16_t n, uint8_t * data)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	6039      	str	r1, [r7, #0]
 8001ab2:	80fb      	strh	r3, [r7, #6]
	while (!(USART2->SR & USART_SR_TXE));	// wait for transmit data register empty
 8001ab4:	bf00      	nop
 8001ab6:	4b18      	ldr	r3, [pc, #96]	@ (8001b18 <uart2_dma1_write+0x70>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0f9      	beq.n	8001ab6 <uart2_dma1_write+0xe>
	USART2->SR &= ~USART_SR_TC;				// clear flag
 8001ac2:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <uart2_dma1_write+0x70>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a14      	ldr	r2, [pc, #80]	@ (8001b18 <uart2_dma1_write+0x70>)
 8001ac8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001acc:	6013      	str	r3, [r2, #0]

	DMA1_Stream6->CR &= ~DMA_SxCR_EN;		// disable DMA stream
 8001ace:	4b13      	ldr	r3, [pc, #76]	@ (8001b1c <uart2_dma1_write+0x74>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a12      	ldr	r2, [pc, #72]	@ (8001b1c <uart2_dma1_write+0x74>)
 8001ad4:	f023 0301 	bic.w	r3, r3, #1
 8001ad8:	6013      	str	r3, [r2, #0]
	while (DMA1_Stream6->CR & DMA_SxCR_EN);
 8001ada:	bf00      	nop
 8001adc:	4b0f      	ldr	r3, [pc, #60]	@ (8001b1c <uart2_dma1_write+0x74>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1f9      	bne.n	8001adc <uart2_dma1_write+0x34>

	// clear flags
	DMA1->HIFCR |= DMA_HIFCR_CTCIF6 | DMA_HIFCR_CHTIF6 | DMA_HIFCR_CTEIF6 | DMA_HIFCR_CDMEIF6 | DMA_HIFCR_CFEIF6;
 8001ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b20 <uart2_dma1_write+0x78>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	4a0c      	ldr	r2, [pc, #48]	@ (8001b20 <uart2_dma1_write+0x78>)
 8001aee:	f443 1374 	orr.w	r3, r3, #3997696	@ 0x3d0000
 8001af2:	60d3      	str	r3, [r2, #12]

	DMA1_Stream6->NDTR = n;					// set # of data items to transfer
 8001af4:	4a09      	ldr	r2, [pc, #36]	@ (8001b1c <uart2_dma1_write+0x74>)
 8001af6:	88fb      	ldrh	r3, [r7, #6]
 8001af8:	6053      	str	r3, [r2, #4]
	DMA1_Stream6->M0AR = (uint32_t) data;	// pointer to data
 8001afa:	4a08      	ldr	r2, [pc, #32]	@ (8001b1c <uart2_dma1_write+0x74>)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	60d3      	str	r3, [r2, #12]
	DMA1_Stream6->CR |= DMA_SxCR_EN;		// enable DMA stream
 8001b00:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <uart2_dma1_write+0x74>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a05      	ldr	r2, [pc, #20]	@ (8001b1c <uart2_dma1_write+0x74>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6013      	str	r3, [r2, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	40004400 	.word	0x40004400
 8001b1c:	400260a0 	.word	0x400260a0
 8001b20:	40026000 	.word	0x40026000

08001b24 <memset>:
 8001b24:	4402      	add	r2, r0
 8001b26:	4603      	mov	r3, r0
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d100      	bne.n	8001b2e <memset+0xa>
 8001b2c:	4770      	bx	lr
 8001b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8001b32:	e7f9      	b.n	8001b28 <memset+0x4>

08001b34 <__libc_init_array>:
 8001b34:	b570      	push	{r4, r5, r6, lr}
 8001b36:	4d0d      	ldr	r5, [pc, #52]	@ (8001b6c <__libc_init_array+0x38>)
 8001b38:	4c0d      	ldr	r4, [pc, #52]	@ (8001b70 <__libc_init_array+0x3c>)
 8001b3a:	1b64      	subs	r4, r4, r5
 8001b3c:	10a4      	asrs	r4, r4, #2
 8001b3e:	2600      	movs	r6, #0
 8001b40:	42a6      	cmp	r6, r4
 8001b42:	d109      	bne.n	8001b58 <__libc_init_array+0x24>
 8001b44:	4d0b      	ldr	r5, [pc, #44]	@ (8001b74 <__libc_init_array+0x40>)
 8001b46:	4c0c      	ldr	r4, [pc, #48]	@ (8001b78 <__libc_init_array+0x44>)
 8001b48:	f000 f818 	bl	8001b7c <_init>
 8001b4c:	1b64      	subs	r4, r4, r5
 8001b4e:	10a4      	asrs	r4, r4, #2
 8001b50:	2600      	movs	r6, #0
 8001b52:	42a6      	cmp	r6, r4
 8001b54:	d105      	bne.n	8001b62 <__libc_init_array+0x2e>
 8001b56:	bd70      	pop	{r4, r5, r6, pc}
 8001b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b5c:	4798      	blx	r3
 8001b5e:	3601      	adds	r6, #1
 8001b60:	e7ee      	b.n	8001b40 <__libc_init_array+0xc>
 8001b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b66:	4798      	blx	r3
 8001b68:	3601      	adds	r6, #1
 8001b6a:	e7f2      	b.n	8001b52 <__libc_init_array+0x1e>
 8001b6c:	08001bf4 	.word	0x08001bf4
 8001b70:	08001bf4 	.word	0x08001bf4
 8001b74:	08001bf4 	.word	0x08001bf4
 8001b78:	08001bf8 	.word	0x08001bf8

08001b7c <_init>:
 8001b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b7e:	bf00      	nop
 8001b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b82:	bc08      	pop	{r3}
 8001b84:	469e      	mov	lr, r3
 8001b86:	4770      	bx	lr

08001b88 <_fini>:
 8001b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b8a:	bf00      	nop
 8001b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b8e:	bc08      	pop	{r3}
 8001b90:	469e      	mov	lr, r3
 8001b92:	4770      	bx	lr
