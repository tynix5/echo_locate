
echo_locate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001398  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800152c  0800152c  0000252c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001618  08001618  00003004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001618  08001618  00003004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001618  08001618  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001618  08001618  00002618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800161c  0800161c  0000261c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08001620  00003000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000004  08001624  00003004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08001624  000030f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002201  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000959  00000000  00000000  00005235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000258  00000000  00000000  00005b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001a1  00000000  00000000  00005de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024c15  00000000  00000000  00005f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003ce1  00000000  00000000  0002ab9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083460  00000000  00000000  0002e87f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b1cdf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000804  00000000  00000000  000b1d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000b2528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001514 	.word	0x08001514

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08001514 	.word	0x08001514

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	@ 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	3c01      	subs	r4, #1
 8000310:	bf28      	it	cs
 8000312:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000316:	d2e9      	bcs.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_dmul>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000552:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000556:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055a:	bf1d      	ittte	ne
 800055c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000560:	ea94 0f0c 	teqne	r4, ip
 8000564:	ea95 0f0c 	teqne	r5, ip
 8000568:	f000 f8de 	bleq	8000728 <__aeabi_dmul+0x1dc>
 800056c:	442c      	add	r4, r5
 800056e:	ea81 0603 	eor.w	r6, r1, r3
 8000572:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000576:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057e:	bf18      	it	ne
 8000580:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000584:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000588:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800058c:	d038      	beq.n	8000600 <__aeabi_dmul+0xb4>
 800058e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000592:	f04f 0500 	mov.w	r5, #0
 8000596:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a2:	f04f 0600 	mov.w	r6, #0
 80005a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005aa:	f09c 0f00 	teq	ip, #0
 80005ae:	bf18      	it	ne
 80005b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005bc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c0:	d204      	bcs.n	80005cc <__aeabi_dmul+0x80>
 80005c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c6:	416d      	adcs	r5, r5
 80005c8:	eb46 0606 	adc.w	r6, r6, r6
 80005cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e4:	bf88      	it	hi
 80005e6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ea:	d81e      	bhi.n	800062a <__aeabi_dmul+0xde>
 80005ec:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000604:	ea46 0101 	orr.w	r1, r6, r1
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	ea81 0103 	eor.w	r1, r1, r3
 8000610:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000614:	bfc2      	ittt	gt
 8000616:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061e:	bd70      	popgt	{r4, r5, r6, pc}
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f04f 0e00 	mov.w	lr, #0
 8000628:	3c01      	subs	r4, #1
 800062a:	f300 80ab 	bgt.w	8000784 <__aeabi_dmul+0x238>
 800062e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000632:	bfde      	ittt	le
 8000634:	2000      	movle	r0, #0
 8000636:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063a:	bd70      	pople	{r4, r5, r6, pc}
 800063c:	f1c4 0400 	rsb	r4, r4, #0
 8000640:	3c20      	subs	r4, #32
 8000642:	da35      	bge.n	80006b0 <__aeabi_dmul+0x164>
 8000644:	340c      	adds	r4, #12
 8000646:	dc1b      	bgt.n	8000680 <__aeabi_dmul+0x134>
 8000648:	f104 0414 	add.w	r4, r4, #20
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f305 	lsl.w	r3, r0, r5
 8000654:	fa20 f004 	lsr.w	r0, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800066c:	fa21 f604 	lsr.w	r6, r1, r4
 8000670:	eb42 0106 	adc.w	r1, r2, r6
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 040c 	rsb	r4, r4, #12
 8000684:	f1c4 0520 	rsb	r5, r4, #32
 8000688:	fa00 f304 	lsl.w	r3, r0, r4
 800068c:	fa20 f005 	lsr.w	r0, r0, r5
 8000690:	fa01 f204 	lsl.w	r2, r1, r4
 8000694:	ea40 0002 	orr.w	r0, r0, r2
 8000698:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	f141 0100 	adc.w	r1, r1, #0
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f205 	lsl.w	r2, r0, r5
 80006b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006bc:	fa20 f304 	lsr.w	r3, r0, r4
 80006c0:	fa01 f205 	lsl.w	r2, r1, r5
 80006c4:	ea43 0302 	orr.w	r3, r3, r2
 80006c8:	fa21 f004 	lsr.w	r0, r1, r4
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	fa21 f204 	lsr.w	r2, r1, r4
 80006d4:	ea20 0002 	bic.w	r0, r0, r2
 80006d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e0:	bf08      	it	eq
 80006e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f094 0f00 	teq	r4, #0
 80006ec:	d10f      	bne.n	800070e <__aeabi_dmul+0x1c2>
 80006ee:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f2:	0040      	lsls	r0, r0, #1
 80006f4:	eb41 0101 	adc.w	r1, r1, r1
 80006f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006fc:	bf08      	it	eq
 80006fe:	3c01      	subeq	r4, #1
 8000700:	d0f7      	beq.n	80006f2 <__aeabi_dmul+0x1a6>
 8000702:	ea41 0106 	orr.w	r1, r1, r6
 8000706:	f095 0f00 	teq	r5, #0
 800070a:	bf18      	it	ne
 800070c:	4770      	bxne	lr
 800070e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000712:	0052      	lsls	r2, r2, #1
 8000714:	eb43 0303 	adc.w	r3, r3, r3
 8000718:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800071c:	bf08      	it	eq
 800071e:	3d01      	subeq	r5, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1c6>
 8000722:	ea43 0306 	orr.w	r3, r3, r6
 8000726:	4770      	bx	lr
 8000728:	ea94 0f0c 	teq	r4, ip
 800072c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000730:	bf18      	it	ne
 8000732:	ea95 0f0c 	teqne	r5, ip
 8000736:	d00c      	beq.n	8000752 <__aeabi_dmul+0x206>
 8000738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800073c:	bf18      	it	ne
 800073e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000742:	d1d1      	bne.n	80006e8 <__aeabi_dmul+0x19c>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000756:	bf06      	itte	eq
 8000758:	4610      	moveq	r0, r2
 800075a:	4619      	moveq	r1, r3
 800075c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000760:	d019      	beq.n	8000796 <__aeabi_dmul+0x24a>
 8000762:	ea94 0f0c 	teq	r4, ip
 8000766:	d102      	bne.n	800076e <__aeabi_dmul+0x222>
 8000768:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800076c:	d113      	bne.n	8000796 <__aeabi_dmul+0x24a>
 800076e:	ea95 0f0c 	teq	r5, ip
 8000772:	d105      	bne.n	8000780 <__aeabi_dmul+0x234>
 8000774:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000778:	bf1c      	itt	ne
 800077a:	4610      	movne	r0, r2
 800077c:	4619      	movne	r1, r3
 800077e:	d10a      	bne.n	8000796 <__aeabi_dmul+0x24a>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079e:	bd70      	pop	{r4, r5, r6, pc}

080007a0 <__aeabi_ddiv>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ae:	bf1d      	ittte	ne
 80007b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b4:	ea94 0f0c 	teqne	r4, ip
 80007b8:	ea95 0f0c 	teqne	r5, ip
 80007bc:	f000 f8a7 	bleq	800090e <__aeabi_ddiv+0x16e>
 80007c0:	eba4 0405 	sub.w	r4, r4, r5
 80007c4:	ea81 0e03 	eor.w	lr, r1, r3
 80007c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d0:	f000 8088 	beq.w	80008e4 <__aeabi_ddiv+0x144>
 80007d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f8:	429d      	cmp	r5, r3
 80007fa:	bf08      	it	eq
 80007fc:	4296      	cmpeq	r6, r2
 80007fe:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000802:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000806:	d202      	bcs.n	800080e <__aeabi_ddiv+0x6e>
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	1ab6      	subs	r6, r6, r2
 8000810:	eb65 0503 	sbc.w	r5, r5, r3
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 000c 	orrcs.w	r0, r0, ip
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800087c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000880:	d018      	beq.n	80008b4 <__aeabi_ddiv+0x114>
 8000882:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000886:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000892:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000896:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089e:	d1c0      	bne.n	8000822 <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a4:	d10b      	bne.n	80008be <__aeabi_ddiv+0x11e>
 80008a6:	ea41 0100 	orr.w	r1, r1, r0
 80008aa:	f04f 0000 	mov.w	r0, #0
 80008ae:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b2:	e7b6      	b.n	8000822 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b8:	bf04      	itt	eq
 80008ba:	4301      	orreq	r1, r0
 80008bc:	2000      	moveq	r0, #0
 80008be:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c2:	bf88      	it	hi
 80008c4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c8:	f63f aeaf 	bhi.w	800062a <__aeabi_dmul+0xde>
 80008cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d0:	bf04      	itt	eq
 80008d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008da:	f150 0000 	adcs.w	r0, r0, #0
 80008de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	e690      	b.n	800062a <__aeabi_dmul+0xde>
 8000908:	ea45 0e06 	orr.w	lr, r5, r6
 800090c:	e68d      	b.n	800062a <__aeabi_dmul+0xde>
 800090e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000912:	ea94 0f0c 	teq	r4, ip
 8000916:	bf08      	it	eq
 8000918:	ea95 0f0c 	teqeq	r5, ip
 800091c:	f43f af3b 	beq.w	8000796 <__aeabi_dmul+0x24a>
 8000920:	ea94 0f0c 	teq	r4, ip
 8000924:	d10a      	bne.n	800093c <__aeabi_ddiv+0x19c>
 8000926:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092a:	f47f af34 	bne.w	8000796 <__aeabi_dmul+0x24a>
 800092e:	ea95 0f0c 	teq	r5, ip
 8000932:	f47f af25 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e72c      	b.n	8000796 <__aeabi_dmul+0x24a>
 800093c:	ea95 0f0c 	teq	r5, ip
 8000940:	d106      	bne.n	8000950 <__aeabi_ddiv+0x1b0>
 8000942:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000946:	f43f aefd 	beq.w	8000744 <__aeabi_dmul+0x1f8>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e722      	b.n	8000796 <__aeabi_dmul+0x24a>
 8000950:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095a:	f47f aec5 	bne.w	80006e8 <__aeabi_dmul+0x19c>
 800095e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000962:	f47f af0d 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000966:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096a:	f47f aeeb 	bne.w	8000744 <__aeabi_dmul+0x1f8>
 800096e:	e712      	b.n	8000796 <__aeabi_dmul+0x24a>

08000970 <__aeabi_d2f>:
 8000970:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000974:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000978:	bf24      	itt	cs
 800097a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800097e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000982:	d90d      	bls.n	80009a0 <__aeabi_d2f+0x30>
 8000984:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000988:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800098c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000990:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000994:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000998:	bf08      	it	eq
 800099a:	f020 0001 	biceq.w	r0, r0, #1
 800099e:	4770      	bx	lr
 80009a0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a4:	d121      	bne.n	80009ea <__aeabi_d2f+0x7a>
 80009a6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009aa:	bfbc      	itt	lt
 80009ac:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009b0:	4770      	bxlt	lr
 80009b2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ba:	f1c2 0218 	rsb	r2, r2, #24
 80009be:	f1c2 0c20 	rsb	ip, r2, #32
 80009c2:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c6:	fa20 f002 	lsr.w	r0, r0, r2
 80009ca:	bf18      	it	ne
 80009cc:	f040 0001 	orrne.w	r0, r0, #1
 80009d0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009dc:	ea40 000c 	orr.w	r0, r0, ip
 80009e0:	fa23 f302 	lsr.w	r3, r3, r2
 80009e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e8:	e7cc      	b.n	8000984 <__aeabi_d2f+0x14>
 80009ea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ee:	d107      	bne.n	8000a00 <__aeabi_d2f+0x90>
 80009f0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f4:	bf1e      	ittt	ne
 80009f6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009fa:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009fe:	4770      	bxne	lr
 8000a00:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a04:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a08:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <main>:
void adc1_dma_config(void);
void tim2_trig_config(void);


int main(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000a16:	af02      	add	r7, sp, #8

	sysclock_config();
 8000a18:	f000 f978 	bl	8000d0c <sysclock_config>

	float32_t state[NUM_FILTER_TAPS + BLOCK_SIZE - 1];
	arm_fir_init_f32(&hfir, NUM_FILTER_TAPS, ftaps, state, BLOCK_SIZE);
 8000a1c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000a20:	2220      	movs	r2, #32
 8000a22:	9200      	str	r2, [sp, #0]
 8000a24:	4aaf      	ldr	r2, [pc, #700]	@ (8000ce4 <main+0x2d4>)
 8000a26:	213b      	movs	r1, #59	@ 0x3b
 8000a28:	48af      	ldr	r0, [pc, #700]	@ (8000ce8 <main+0x2d8>)
 8000a2a:	f000 fc04 	bl	8001236 <arm_fir_init_f32>

	float32_t out_buff[BLOCK_SIZE];

	uart2_set_fcpu(84000000);
 8000a2e:	48af      	ldr	r0, [pc, #700]	@ (8000cec <main+0x2dc>)
 8000a30:	f000 fc34 	bl	800129c <uart2_set_fcpu>
	uart2_config(115200, USART_DATA_8, USART_STOP_1);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2100      	movs	r1, #0
 8000a38:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8000a3c:	f000 fc3e 	bl	80012bc <uart2_config>

	tim2_trig_config();
 8000a40:	f000 fade 	bl	8001000 <tim2_trig_config>
	adc1_dma_config();
 8000a44:	f000 f9f0 	bl	8000e28 <adc1_dma_config>

	while (1)
	{

		while (!((DMA2->LISR) & DMA_LISR_TCIF0));		// wait for stream to complete
 8000a48:	bf00      	nop
 8000a4a:	4ba9      	ldr	r3, [pc, #676]	@ (8000cf0 <main+0x2e0>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f003 0320 	and.w	r3, r3, #32
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d0f9      	beq.n	8000a4a <main+0x3a>
		ADC1->CR2 &= ~ADC_CR2_DMA;						// disable ADC DMA
 8000a56:	4ba7      	ldr	r3, [pc, #668]	@ (8000cf4 <main+0x2e4>)
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	4aa6      	ldr	r2, [pc, #664]	@ (8000cf4 <main+0x2e4>)
 8000a5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000a60:	6093      	str	r3, [r2, #8]
		DMA2->LIFCR |= DMA_LIFCR_CTCIF0 | DMA_LIFCR_CHTIF0;			// clear transfer complete and half complete flag
 8000a62:	4ba3      	ldr	r3, [pc, #652]	@ (8000cf0 <main+0x2e0>)
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	4aa2      	ldr	r2, [pc, #648]	@ (8000cf0 <main+0x2e0>)
 8000a68:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000a6c:	6093      	str	r3, [r2, #8]

		for (uint8_t i = 0; i < BLOCK_SIZE; i++)
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
 8000a74:	e014      	b.n	8000aa0 <main+0x90>
		{
			stream_f[i] = (float) stream[i];
 8000a76:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8000a7a:	4a9f      	ldr	r2, [pc, #636]	@ (8000cf8 <main+0x2e8>)
 8000a7c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000a80:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8000a84:	ee07 2a90 	vmov	s15, r2
 8000a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a8c:	4a9b      	ldr	r2, [pc, #620]	@ (8000cfc <main+0x2ec>)
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	4413      	add	r3, r2
 8000a92:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t i = 0; i < BLOCK_SIZE; i++)
 8000a96:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
 8000aa0:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8000aa4:	2b1f      	cmp	r3, #31
 8000aa6:	d9e6      	bls.n	8000a76 <main+0x66>
		}

		arm_fir_f32(&hfir, stream_f, out_buff, BLOCK_SIZE);
 8000aa8:	f107 0210 	add.w	r2, r7, #16
 8000aac:	2320      	movs	r3, #32
 8000aae:	4993      	ldr	r1, [pc, #588]	@ (8000cfc <main+0x2ec>)
 8000ab0:	488d      	ldr	r0, [pc, #564]	@ (8000ce8 <main+0x2d8>)
 8000ab2:	f000 fb50 	bl	8001156 <arm_fir_f32>

		ADC1->CR2 |= ADC_CR2_DMA;
 8000ab6:	4b8f      	ldr	r3, [pc, #572]	@ (8000cf4 <main+0x2e4>)
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	4a8e      	ldr	r2, [pc, #568]	@ (8000cf4 <main+0x2e4>)
 8000abc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ac0:	6093      	str	r3, [r2, #8]


		uint8_t str[11];

		for (uint32_t i = 0; i < BLOCK_SIZE; i++)
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 8000ac8:	e105      	b.n	8000cd6 <main+0x2c6>
		{
			str[0] = (uint16_t) stream[i] / 1000 + '0';
 8000aca:	4a8b      	ldr	r2, [pc, #556]	@ (8000cf8 <main+0x2e8>)
 8000acc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000ad0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ad4:	4a8a      	ldr	r2, [pc, #552]	@ (8000d00 <main+0x2f0>)
 8000ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ada:	099b      	lsrs	r3, r3, #6
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	3330      	adds	r3, #48	@ 0x30
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ae8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000aec:	701a      	strb	r2, [r3, #0]
			str[1] = (uint16_t) stream[i] / 100 % 10 + '0';
 8000aee:	4a82      	ldr	r2, [pc, #520]	@ (8000cf8 <main+0x2e8>)
 8000af0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000af4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000af8:	4a82      	ldr	r2, [pc, #520]	@ (8000d04 <main+0x2f4>)
 8000afa:	fba2 2303 	umull	r2, r3, r2, r3
 8000afe:	095b      	lsrs	r3, r3, #5
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	4b81      	ldr	r3, [pc, #516]	@ (8000d08 <main+0x2f8>)
 8000b04:	fba3 1302 	umull	r1, r3, r3, r2
 8000b08:	08d9      	lsrs	r1, r3, #3
 8000b0a:	460b      	mov	r3, r1
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	440b      	add	r3, r1
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	1ad3      	subs	r3, r2, r3
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	3330      	adds	r3, #48	@ 0x30
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000b20:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000b24:	705a      	strb	r2, [r3, #1]
			str[2] = (uint16_t) stream[i] / 10 % 10 + '0';
 8000b26:	4a74      	ldr	r2, [pc, #464]	@ (8000cf8 <main+0x2e8>)
 8000b28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000b2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b30:	4a75      	ldr	r2, [pc, #468]	@ (8000d08 <main+0x2f8>)
 8000b32:	fba2 2303 	umull	r2, r3, r2, r3
 8000b36:	08db      	lsrs	r3, r3, #3
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	4b73      	ldr	r3, [pc, #460]	@ (8000d08 <main+0x2f8>)
 8000b3c:	fba3 1302 	umull	r1, r3, r3, r2
 8000b40:	08d9      	lsrs	r1, r3, #3
 8000b42:	460b      	mov	r3, r1
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	440b      	add	r3, r1
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	3330      	adds	r3, #48	@ 0x30
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000b58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000b5c:	709a      	strb	r2, [r3, #2]
			str[3] = (uint16_t) stream[i] % 10 + '0';
 8000b5e:	4a66      	ldr	r2, [pc, #408]	@ (8000cf8 <main+0x2e8>)
 8000b60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000b64:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b68:	4b67      	ldr	r3, [pc, #412]	@ (8000d08 <main+0x2f8>)
 8000b6a:	fba3 1302 	umull	r1, r3, r3, r2
 8000b6e:	08d9      	lsrs	r1, r3, #3
 8000b70:	460b      	mov	r3, r1
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	440b      	add	r3, r1
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	3330      	adds	r3, #48	@ 0x30
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000b86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000b8a:	70da      	strb	r2, [r3, #3]
			str[4] = ',';
 8000b8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000b90:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000b94:	222c      	movs	r2, #44	@ 0x2c
 8000b96:	711a      	strb	r2, [r3, #4]
			str[5] = ' ';
 8000b98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000b9c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ba0:	2220      	movs	r2, #32
 8000ba2:	715a      	strb	r2, [r3, #5]
			str[6] = (uint16_t) out_buff[i] / 1000 + '0';
 8000ba4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ba8:	f5a3 72f8 	sub.w	r2, r3, #496	@ 0x1f0
 8000bac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	4413      	add	r3, r2
 8000bb4:	edd3 7a00 	vldr	s15, [r3]
 8000bb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bbc:	ee17 3a90 	vmov	r3, s15
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	4a4f      	ldr	r2, [pc, #316]	@ (8000d00 <main+0x2f0>)
 8000bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc8:	099b      	lsrs	r3, r3, #6
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	3330      	adds	r3, #48	@ 0x30
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000bd6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000bda:	719a      	strb	r2, [r3, #6]
			str[7] = (uint16_t) out_buff[i] / 100 % 10 + '0';
 8000bdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000be0:	f5a3 72f8 	sub.w	r2, r3, #496	@ 0x1f0
 8000be4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	4413      	add	r3, r2
 8000bec:	edd3 7a00 	vldr	s15, [r3]
 8000bf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bf4:	ee17 3a90 	vmov	r3, s15
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	4a42      	ldr	r2, [pc, #264]	@ (8000d04 <main+0x2f4>)
 8000bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8000c00:	095b      	lsrs	r3, r3, #5
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	4b40      	ldr	r3, [pc, #256]	@ (8000d08 <main+0x2f8>)
 8000c06:	fba3 1302 	umull	r1, r3, r3, r2
 8000c0a:	08d9      	lsrs	r1, r3, #3
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	440b      	add	r3, r1
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	3330      	adds	r3, #48	@ 0x30
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000c26:	71da      	strb	r2, [r3, #7]
			str[8] = (uint16_t) out_buff[i] / 10 % 10 + '0';
 8000c28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c2c:	f5a3 72f8 	sub.w	r2, r3, #496	@ 0x1f0
 8000c30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	4413      	add	r3, r2
 8000c38:	edd3 7a00 	vldr	s15, [r3]
 8000c3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c40:	ee17 3a90 	vmov	r3, s15
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	4a30      	ldr	r2, [pc, #192]	@ (8000d08 <main+0x2f8>)
 8000c48:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4c:	08db      	lsrs	r3, r3, #3
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	4b2d      	ldr	r3, [pc, #180]	@ (8000d08 <main+0x2f8>)
 8000c52:	fba3 1302 	umull	r1, r3, r3, r2
 8000c56:	08d9      	lsrs	r1, r3, #3
 8000c58:	460b      	mov	r3, r1
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	440b      	add	r3, r1
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	3330      	adds	r3, #48	@ 0x30
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000c72:	721a      	strb	r2, [r3, #8]
			str[9] = (uint16_t) out_buff[i] % 10 + '0';
 8000c74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c78:	f5a3 72f8 	sub.w	r2, r3, #496	@ 0x1f0
 8000c7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	4413      	add	r3, r2
 8000c84:	edd3 7a00 	vldr	s15, [r3]
 8000c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c8c:	ee17 3a90 	vmov	r3, s15
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	4b1d      	ldr	r3, [pc, #116]	@ (8000d08 <main+0x2f8>)
 8000c94:	fba3 1302 	umull	r1, r3, r3, r2
 8000c98:	08d9      	lsrs	r1, r3, #3
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	3330      	adds	r3, #48	@ 0x30
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000cb0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000cb4:	725a      	strb	r2, [r3, #9]
			str[10] = '\r';
 8000cb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000cba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000cbe:	220d      	movs	r2, #13
 8000cc0:	729a      	strb	r2, [r3, #10]
			uart2_write(str, 11);
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	210b      	movs	r1, #11
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 fbdc 	bl	8001484 <uart2_write>
		for (uint32_t i = 0; i < BLOCK_SIZE; i++)
 8000ccc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 8000cd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000cda:	2b1f      	cmp	r3, #31
 8000cdc:	f67f aef5 	bls.w	8000aca <main+0xba>
	{
 8000ce0:	e6b2      	b.n	8000a48 <main+0x38>
 8000ce2:	bf00      	nop
 8000ce4:	0800152c 	.word	0x0800152c
 8000ce8:	20000020 	.word	0x20000020
 8000cec:	0501bd00 	.word	0x0501bd00
 8000cf0:	40026400 	.word	0x40026400
 8000cf4:	40012000 	.word	0x40012000
 8000cf8:	2000002c 	.word	0x2000002c
 8000cfc:	2000006c 	.word	0x2000006c
 8000d00:	10624dd3 	.word	0x10624dd3
 8000d04:	51eb851f 	.word	0x51eb851f
 8000d08:	cccccccd 	.word	0xcccccccd

08000d0c <sysclock_config>:
	}
}


void sysclock_config(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
	// 16 MHz HSI oscillator is default on reset, but select anyways
	RCC->CR |= RCC_CR_HSION;
 8000d12:	4b42      	ldr	r3, [pc, #264]	@ (8000e1c <sysclock_config+0x110>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a41      	ldr	r2, [pc, #260]	@ (8000e1c <sysclock_config+0x110>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6013      	str	r3, [r2, #0]
	// wait for HSI to be ready
	while (!((RCC->CR) & RCC_CR_HSIRDY));
 8000d1e:	bf00      	nop
 8000d20:	4b3e      	ldr	r3, [pc, #248]	@ (8000e1c <sysclock_config+0x110>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f003 0302 	and.w	r3, r3, #2
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d0f9      	beq.n	8000d20 <sysclock_config+0x14>

	// enable power interface clock for APB1
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000d2c:	4b3b      	ldr	r3, [pc, #236]	@ (8000e1c <sysclock_config+0x110>)
 8000d2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d32:	641a      	str	r2, [r3, #64]	@ 0x40

	// configure VCO to scale 2 per CubeMX
	PWR->CR |= PWR_CR_VOS_1;
 8000d34:	4b3a      	ldr	r3, [pc, #232]	@ (8000e20 <sysclock_config+0x114>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a39      	ldr	r2, [pc, #228]	@ (8000e20 <sysclock_config+0x114>)
 8000d3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d3e:	6013      	str	r3, [r2, #0]
	PWR->CR &= ~PWR_CR_VOS_0;
 8000d40:	4b37      	ldr	r3, [pc, #220]	@ (8000e20 <sysclock_config+0x114>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a36      	ldr	r2, [pc, #216]	@ (8000e20 <sysclock_config+0x114>)
 8000d46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000d4a:	6013      	str	r3, [r2, #0]

	// configure FLASH
	// instruction cache, prefetch enable, and data cache enabled
	uint32_t flash;
	flash = FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN;
 8000d4c:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000d50:	60fb      	str	r3, [r7, #12]
	flash |= 2;		// 2 wait states for flash
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	60fb      	str	r3, [r7, #12]
	FLASH->ACR = flash;
 8000d5a:	4a32      	ldr	r2, [pc, #200]	@ (8000e24 <sysclock_config+0x118>)
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	6013      	str	r3, [r2, #0]

	// configure bus prescalers
	uint32_t cfgr = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_PPRE2_2;		// APB2 prescaler of 1 (84MHz)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000d6a:	60bb      	str	r3, [r7, #8]
	cfgr |= RCC_CFGR_PPRE1_2;		// APB1 prescaler of 2 (42MHZ)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d72:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_HPRE;			// AHB prescaler of 1 (84MHz)
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000d7a:	60bb      	str	r3, [r7, #8]
	RCC->CFGR = cfgr;
 8000d7c:	4a27      	ldr	r2, [pc, #156]	@ (8000e1c <sysclock_config+0x110>)
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	6093      	str	r3, [r2, #8]

	// configure main PLL
	uint32_t pll_cfg = RCC->PLLCFGR;
 8000d82:	4b26      	ldr	r3, [pc, #152]	@ (8000e1c <sysclock_config+0x110>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	607b      	str	r3, [r7, #4]
	pll_cfg &= ~RCC_PLLCFGR_PLLQ;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8000d8e:	607b      	str	r3, [r7, #4]
	pll_cfg |= RCC_PLLCFGR_PLLQ_2; // configure Q prescaler for USB, SDIO, RNG clocks (/4)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d96:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLP;	// main PLL division factor of 2
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000d9e:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLN;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000da6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000daa:	607b      	str	r3, [r7, #4]
	pll_cfg |= 168UL << 6;	// pll multiplication factor for VCO (x168)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f443 5328 	orr.w	r3, r3, #10752	@ 0x2a00
 8000db2:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLM;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000dba:	607b      	str	r3, [r7, #4]
	pll_cfg |= 16UL << 0;	// pll division factor for main PLL and audio PLL (/16)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f043 0310 	orr.w	r3, r3, #16
 8000dc2:	607b      	str	r3, [r7, #4]

	RCC->PLLCFGR = pll_cfg;
 8000dc4:	4a15      	ldr	r2, [pc, #84]	@ (8000e1c <sysclock_config+0x110>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6053      	str	r3, [r2, #4]

	// enable PLL and wait for ready
	RCC->CR |= RCC_CR_PLLON;
 8000dca:	4b14      	ldr	r3, [pc, #80]	@ (8000e1c <sysclock_config+0x110>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a13      	ldr	r2, [pc, #76]	@ (8000e1c <sysclock_config+0x110>)
 8000dd0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000dd4:	6013      	str	r3, [r2, #0]
	while (!((RCC->CR) & RCC_CR_PLLRDY));
 8000dd6:	bf00      	nop
 8000dd8:	4b10      	ldr	r3, [pc, #64]	@ (8000e1c <sysclock_config+0x110>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d0f9      	beq.n	8000dd8 <sysclock_config+0xcc>

	// select clock source
	cfgr = RCC->CFGR;
 8000de4:	4b0d      	ldr	r3, [pc, #52]	@ (8000e1c <sysclock_config+0x110>)
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	60bb      	str	r3, [r7, #8]
	cfgr |= RCC_CFGR_SW_1;		// select PLL as system clock
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	f043 0302 	orr.w	r3, r3, #2
 8000df0:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_SW_0;
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	f023 0301 	bic.w	r3, r3, #1
 8000df8:	60bb      	str	r3, [r7, #8]
	RCC->CFGR = cfgr;
 8000dfa:	4a08      	ldr	r2, [pc, #32]	@ (8000e1c <sysclock_config+0x110>)
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	6093      	str	r3, [r2, #8]

	// wait for PLL clock source to become active
	while (!((RCC->CFGR) & RCC_CFGR_SWS_1));
 8000e00:	bf00      	nop
 8000e02:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <sysclock_config+0x110>)
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f003 0308 	and.w	r3, r3, #8
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d0f9      	beq.n	8000e02 <sysclock_config+0xf6>
}
 8000e0e:	bf00      	nop
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40007000 	.word	0x40007000
 8000e24:	40023c00 	.word	0x40023c00

08000e28 <adc1_dma_config>:


void adc1_dma_config(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;				// enable ADC1 clock
 8000e2c:	4b6d      	ldr	r3, [pc, #436]	@ (8000fe4 <adc1_dma_config+0x1bc>)
 8000e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e30:	4a6c      	ldr	r2, [pc, #432]	@ (8000fe4 <adc1_dma_config+0x1bc>)
 8000e32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e36:	6453      	str	r3, [r2, #68]	@ 0x44
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;			// enable GPIOA clock
 8000e38:	4b6a      	ldr	r3, [pc, #424]	@ (8000fe4 <adc1_dma_config+0x1bc>)
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3c:	4a69      	ldr	r2, [pc, #420]	@ (8000fe4 <adc1_dma_config+0x1bc>)
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	6313      	str	r3, [r2, #48]	@ 0x30

	// PA0 as analog input
	GPIOA->MODER |= GPIO_MODER_MODER0_0 | GPIO_MODER_MODER0_1;
 8000e44:	4b68      	ldr	r3, [pc, #416]	@ (8000fe8 <adc1_dma_config+0x1c0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a67      	ldr	r2, [pc, #412]	@ (8000fe8 <adc1_dma_config+0x1c0>)
 8000e4a:	f043 0303 	orr.w	r3, r3, #3
 8000e4e:	6013      	str	r3, [r2, #0]

	ADC1->CR2 &= ~ADC_CR2_ADON;						// turn off ADC to configure
 8000e50:	4b66      	ldr	r3, [pc, #408]	@ (8000fec <adc1_dma_config+0x1c4>)
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	4a65      	ldr	r2, [pc, #404]	@ (8000fec <adc1_dma_config+0x1c4>)
 8000e56:	f023 0301 	bic.w	r3, r3, #1
 8000e5a:	6093      	str	r3, [r2, #8]

	// APB2 clock (84 MHz) / 4 = 21 MHz
	// MAX ADC clock freq is 36 MHz (pg 106 datasheet)
	ADC->CCR &= ~ADC_CCR_ADCPRE;
 8000e5c:	4b64      	ldr	r3, [pc, #400]	@ (8000ff0 <adc1_dma_config+0x1c8>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	4a63      	ldr	r2, [pc, #396]	@ (8000ff0 <adc1_dma_config+0x1c8>)
 8000e62:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000e66:	6053      	str	r3, [r2, #4]
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 8000e68:	4b61      	ldr	r3, [pc, #388]	@ (8000ff0 <adc1_dma_config+0x1c8>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	4a60      	ldr	r2, [pc, #384]	@ (8000ff0 <adc1_dma_config+0x1c8>)
 8000e6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e72:	6053      	str	r3, [r2, #4]


	// trigger detection on rising edge
	ADC1->CR2 |= ADC_CR2_EXTEN_0;
 8000e74:	4b5d      	ldr	r3, [pc, #372]	@ (8000fec <adc1_dma_config+0x1c4>)
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	4a5c      	ldr	r2, [pc, #368]	@ (8000fec <adc1_dma_config+0x1c4>)
 8000e7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e7e:	6093      	str	r3, [r2, #8]
	ADC1->CR2 &= ~ADC_CR2_EXTEN_1;
 8000e80:	4b5a      	ldr	r3, [pc, #360]	@ (8000fec <adc1_dma_config+0x1c4>)
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	4a59      	ldr	r2, [pc, #356]	@ (8000fec <adc1_dma_config+0x1c4>)
 8000e86:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000e8a:	6093      	str	r3, [r2, #8]

	// TIM2 TRGO event
	ADC1->CR2 |= ADC_CR2_EXTSEL_1 | ADC_CR2_EXTSEL_2;
 8000e8c:	4b57      	ldr	r3, [pc, #348]	@ (8000fec <adc1_dma_config+0x1c4>)
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	4a56      	ldr	r2, [pc, #344]	@ (8000fec <adc1_dma_config+0x1c4>)
 8000e92:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 8000e96:	6093      	str	r3, [r2, #8]
	ADC1->CR2 &= ~(ADC_CR2_EXTSEL_0 | ADC_CR2_EXTSEL_3);
 8000e98:	4b54      	ldr	r3, [pc, #336]	@ (8000fec <adc1_dma_config+0x1c4>)
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	4a53      	ldr	r2, [pc, #332]	@ (8000fec <adc1_dma_config+0x1c4>)
 8000e9e:	f023 6310 	bic.w	r3, r3, #150994944	@ 0x9000000
 8000ea2:	6093      	str	r3, [r2, #8]

	ADC1->SQR1 &= ~ADC_SQR1_L;				// 1 conversion per sequence
 8000ea4:	4b51      	ldr	r3, [pc, #324]	@ (8000fec <adc1_dma_config+0x1c4>)
 8000ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ea8:	4a50      	ldr	r2, [pc, #320]	@ (8000fec <adc1_dma_config+0x1c4>)
 8000eaa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000eae:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC1->SQR3 &= ~ADC_SQR3_SQ1;			// channel 0 (PA0) is conversion channel
 8000eb0:	4b4e      	ldr	r3, [pc, #312]	@ (8000fec <adc1_dma_config+0x1c4>)
 8000eb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000eb4:	4a4d      	ldr	r2, [pc, #308]	@ (8000fec <adc1_dma_config+0x1c4>)
 8000eb6:	f023 031f 	bic.w	r3, r3, #31
 8000eba:	6353      	str	r3, [r2, #52]	@ 0x34

	/* DMA2 Channel 0, Stream 0 --> ADC1 */
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;		// enable DMA2 clock
 8000ebc:	4b49      	ldr	r3, [pc, #292]	@ (8000fe4 <adc1_dma_config+0x1bc>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec0:	4a48      	ldr	r2, [pc, #288]	@ (8000fe4 <adc1_dma_config+0x1bc>)
 8000ec2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ec6:	6313      	str	r3, [r2, #48]	@ 0x30

	DMA2_Stream0->CR &= ~DMA_SxCR_EN;		// disable stream
 8000ec8:	4b4a      	ldr	r3, [pc, #296]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a49      	ldr	r2, [pc, #292]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000ece:	f023 0301 	bic.w	r3, r3, #1
 8000ed2:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream0->CR & DMA_SxCR_EN);	// wait for stream to disable
 8000ed4:	bf00      	nop
 8000ed6:	4b47      	ldr	r3, [pc, #284]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1f9      	bne.n	8000ed6 <adc1_dma_config+0xae>

	DMA2_Stream0->PAR = (uint32_t)&(ADC1->DR);// peripheral address
 8000ee2:	4b44      	ldr	r3, [pc, #272]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000ee4:	4a44      	ldr	r2, [pc, #272]	@ (8000ff8 <adc1_dma_config+0x1d0>)
 8000ee6:	609a      	str	r2, [r3, #8]
	DMA2_Stream0->M0AR = (uint32_t)stream;	// destination memory address
 8000ee8:	4b42      	ldr	r3, [pc, #264]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000eea:	4a44      	ldr	r2, [pc, #272]	@ (8000ffc <adc1_dma_config+0x1d4>)
 8000eec:	60da      	str	r2, [r3, #12]
	DMA2_Stream0->NDTR = BLOCK_SIZE;		// number of units to be transmitted
 8000eee:	4b41      	ldr	r3, [pc, #260]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000ef0:	2220      	movs	r2, #32
 8000ef2:	605a      	str	r2, [r3, #4]

	DMA2_Stream0->CR &= ~DMA_SxCR_CHSEL;	// channel 0 selected
 8000ef4:	4b3f      	ldr	r3, [pc, #252]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a3e      	ldr	r2, [pc, #248]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000efa:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8000efe:	6013      	str	r3, [r2, #0]

	DMA2_Stream0->CR &= ~DMA_SxCR_PFCTRL;	// DMA is the flow controller
 8000f00:	4b3c      	ldr	r3, [pc, #240]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a3b      	ldr	r2, [pc, #236]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000f06:	f023 0320 	bic.w	r3, r3, #32
 8000f0a:	6013      	str	r3, [r2, #0]

	// priority level: medium
	DMA2_Stream0->CR |= DMA_SxCR_PL_0;
 8000f0c:	4b39      	ldr	r3, [pc, #228]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a38      	ldr	r2, [pc, #224]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000f12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f16:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~DMA_SxCR_PL_1;
 8000f18:	4b36      	ldr	r3, [pc, #216]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a35      	ldr	r2, [pc, #212]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000f1e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000f22:	6013      	str	r3, [r2, #0]

	// disable direct mode
	// FIFO threshold of 1/2 before transfer
	DMA2_Stream0->FCR |= DMA_SxFCR_DMDIS;
 8000f24:	4b33      	ldr	r3, [pc, #204]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	4a32      	ldr	r2, [pc, #200]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000f2a:	f043 0304 	orr.w	r3, r3, #4
 8000f2e:	6153      	str	r3, [r2, #20]
	DMA2_Stream0->FCR |= DMA_SxFCR_FTH_0;
 8000f30:	4b30      	ldr	r3, [pc, #192]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	4a2f      	ldr	r2, [pc, #188]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	6153      	str	r3, [r2, #20]
	DMA2_Stream0->FCR &= ~DMA_SxFCR_FTH_1;
 8000f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	4a2c      	ldr	r2, [pc, #176]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000f42:	f023 0302 	bic.w	r3, r3, #2
 8000f46:	6153      	str	r3, [r2, #20]

	// memory data size: half word (16 bits)
	DMA2_Stream0->CR |= DMA_SxCR_MSIZE_0;
 8000f48:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a29      	ldr	r2, [pc, #164]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000f4e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f52:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~DMA_SxCR_MSIZE_1;
 8000f54:	4b27      	ldr	r3, [pc, #156]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a26      	ldr	r2, [pc, #152]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000f5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f5e:	6013      	str	r3, [r2, #0]

	// peripheral data size: half word (16 bits)
	DMA2_Stream0->CR |= DMA_SxCR_PSIZE_0;
 8000f60:	4b24      	ldr	r3, [pc, #144]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a23      	ldr	r2, [pc, #140]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000f66:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f6a:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~DMA_SxCR_PSIZE_1;
 8000f6c:	4b21      	ldr	r3, [pc, #132]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a20      	ldr	r2, [pc, #128]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000f72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000f76:	6013      	str	r3, [r2, #0]

	// increment memory address after every transfer
	DMA2_Stream0->CR |= DMA_SxCR_MINC;
 8000f78:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000f7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f82:	6013      	str	r3, [r2, #0]

	// disable peripheral address increment
	DMA2_Stream0->CR &= ~DMA_SxCR_PINC;
 8000f84:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a1a      	ldr	r2, [pc, #104]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000f8a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000f8e:	6013      	str	r3, [r2, #0]

	// peripheral to memory data direction
	DMA2_Stream0->CR &= ~DMA_SxCR_DIR;
 8000f90:	4b18      	ldr	r3, [pc, #96]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a17      	ldr	r2, [pc, #92]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000f96:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000f9a:	6013      	str	r3, [r2, #0]

	// circular mode --> reload NDTR after every transfer complete
	DMA2_Stream0->CR |= DMA_SxCR_CIRC;
 8000f9c:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a14      	ldr	r2, [pc, #80]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000fa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fa6:	6013      	str	r3, [r2, #0]


	DMA2_Stream0->CR |= DMA_SxCR_EN;		// enable DMA stream
 8000fa8:	4b12      	ldr	r3, [pc, #72]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a11      	ldr	r2, [pc, #68]	@ (8000ff4 <adc1_dma_config+0x1cc>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	6013      	str	r3, [r2, #0]

	ADC1->CR2 |= ADC_CR2_DMA;				// enable DMA
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000fec <adc1_dma_config+0x1c4>)
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	4a0c      	ldr	r2, [pc, #48]	@ (8000fec <adc1_dma_config+0x1c4>)
 8000fba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fbe:	6093      	str	r3, [r2, #8]
	ADC1->CR2 &= ~ADC_CR2_DDS;				// no DMA requests after last transfer (BLOCK_SIZE transfers)
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fec <adc1_dma_config+0x1c4>)
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	4a09      	ldr	r2, [pc, #36]	@ (8000fec <adc1_dma_config+0x1c4>)
 8000fc6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000fca:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_ADON;				// turn on ADC
 8000fcc:	4b07      	ldr	r3, [pc, #28]	@ (8000fec <adc1_dma_config+0x1c4>)
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	4a06      	ldr	r2, [pc, #24]	@ (8000fec <adc1_dma_config+0x1c4>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6093      	str	r3, [r2, #8]
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40020000 	.word	0x40020000
 8000fec:	40012000 	.word	0x40012000
 8000ff0:	40012300 	.word	0x40012300
 8000ff4:	40026410 	.word	0x40026410
 8000ff8:	4001204c 	.word	0x4001204c
 8000ffc:	2000002c 	.word	0x2000002c

08001000 <tim2_trig_config>:


void tim2_trig_config(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;				// enable TIM2 clock
 8001004:	4b1d      	ldr	r3, [pc, #116]	@ (800107c <tim2_trig_config+0x7c>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001008:	4a1c      	ldr	r2, [pc, #112]	@ (800107c <tim2_trig_config+0x7c>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	6413      	str	r3, [r2, #64]	@ 0x40

	TIM2->CR1 &= ~TIM_CR1_DIR;			// upcounting
 8001010:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800101a:	f023 0310 	bic.w	r3, r3, #16
 800101e:	6013      	str	r3, [r2, #0]
	TIM2->PSC = 0;						// /1 prescaler
 8001020:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001024:	2200      	movs	r2, #0
 8001026:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 2100;					// 40kHz frequency
 8001028:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800102c:	f640 0234 	movw	r2, #2100	@ 0x834
 8001030:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM2->CR2 |= TIM_CR2_MMS_1;
 8001032:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800103c:	f043 0320 	orr.w	r3, r3, #32
 8001040:	6053      	str	r3, [r2, #4]
	TIM2->CR2 &= ~(TIM_CR2_MMS_0 | TIM_CR2_MMS_2);		// update event as TRGO
 8001042:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800104c:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8001050:	6053      	str	r3, [r2, #4]

	TIM2->EGR |= TIM_EGR_UG;			// generate update event
 8001052:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6153      	str	r3, [r2, #20]

	TIM2->CR1 |= TIM_CR1_CEN;			// enable counter
 8001062:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6013      	str	r3, [r2, #0]
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	40023800 	.word	0x40023800

08001080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <NMI_Handler+0x4>

08001088 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <HardFault_Handler+0x4>

08001090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <MemManage_Handler+0x4>

08001098 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <BusFault_Handler+0x4>

080010a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <UsageFault_Handler+0x4>

080010a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d6:	f000 f8cd 	bl	8001274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e4:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <SystemInit+0x20>)
 80010e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ea:	4a05      	ldr	r2, [pc, #20]	@ (8001100 <SystemInit+0x20>)
 80010ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001104:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800113c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001108:	f7ff ffea 	bl	80010e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800110c:	480c      	ldr	r0, [pc, #48]	@ (8001140 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800110e:	490d      	ldr	r1, [pc, #52]	@ (8001144 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001110:	4a0d      	ldr	r2, [pc, #52]	@ (8001148 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001114:	e002      	b.n	800111c <LoopCopyDataInit>

08001116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111a:	3304      	adds	r3, #4

0800111c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800111c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001120:	d3f9      	bcc.n	8001116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001122:	4a0a      	ldr	r2, [pc, #40]	@ (800114c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001124:	4c0a      	ldr	r4, [pc, #40]	@ (8001150 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001128:	e001      	b.n	800112e <LoopFillZerobss>

0800112a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800112c:	3204      	adds	r2, #4

0800112e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001130:	d3fb      	bcc.n	800112a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001132:	f000 f9cb 	bl	80014cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001136:	f7ff fc6b 	bl	8000a10 <main>
  bx  lr    
 800113a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800113c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001144:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001148:	08001620 	.word	0x08001620
  ldr r2, =_sbss
 800114c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001150:	200000f4 	.word	0x200000f4

08001154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001154:	e7fe      	b.n	8001154 <ADC_IRQHandler>

08001156 <arm_fir_f32>:
ARM_DSP_ATTRIBUTE void arm_fir_f32(
  const arm_fir_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 8001156:	b480      	push	{r7}
 8001158:	b08f      	sub	sp, #60	@ 0x3c
 800115a:	af00      	add	r7, sp, #0
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	603b      	str	r3, [r7, #0]
        float32_t *pState = S->pState;                 /* State pointer */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	637b      	str	r3, [r7, #52]	@ 0x34
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	617b      	str	r3, [r7, #20]
        float32_t *pStateCurnt;                        /* Points to the current sample of the state */
        float32_t *px;                                 /* Temporary pointer for state buffer */
  const float32_t *pb;                                 /* Temporary pointer for coefficient buffer */
        float32_t acc0;                                /* Accumulator */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	613b      	str	r3, [r7, #16]
        float32_t c0;                                           /* Temporary variable to hold coefficient value */
#endif

  /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
  /* pStateCurnt points to the location where the new input data should be written */
  pStateCurnt = &(S->pState[(numTaps - 1U)]);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001180:	3b01      	subs	r3, #1
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	633b      	str	r3, [r7, #48]	@ 0x30
  blkCnt = blockSize % 0x8U;

#else

  /* Initialize blkCnt with number of taps */
  blkCnt = blockSize;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800118c:	e034      	b.n	80011f8 <arm_fir_f32+0xa2>
  {
    /* Copy one sample at a time into state buffer */
    *pStateCurnt++ = *pSrc++;
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	1d13      	adds	r3, r2, #4
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001196:	1d19      	adds	r1, r3, #4
 8001198:	6339      	str	r1, [r7, #48]	@ 0x30
 800119a:	6812      	ldr	r2, [r2, #0]
 800119c:	601a      	str	r2, [r3, #0]

    /* Set the accumulator to zero */
    acc0 = 0.0f;
 800119e:	f04f 0300 	mov.w	r3, #0
 80011a2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Initialize state pointer */
    px = pState;
 80011a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Initialize Coefficient pointer */
    pb = pCoeffs;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	62bb      	str	r3, [r7, #40]	@ 0x28

    i = numTaps;
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	623b      	str	r3, [r7, #32]

    /* Perform the multiply-accumulates */
    while (i > 0U)
 80011b0:	e014      	b.n	80011dc <arm_fir_f32+0x86>
    {
      /* acc =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0] */
      acc0 += *px++ * *pb++;
 80011b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011b4:	1d1a      	adds	r2, r3, #4
 80011b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80011b8:	ed93 7a00 	vldr	s14, [r3]
 80011bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011be:	1d1a      	adds	r2, r3, #4
 80011c0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80011c2:	edd3 7a00 	vldr	s15, [r3]
 80011c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ca:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80011ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

      i--;
 80011d6:	6a3b      	ldr	r3, [r7, #32]
 80011d8:	3b01      	subs	r3, #1
 80011da:	623b      	str	r3, [r7, #32]
    while (i > 0U)
 80011dc:	6a3b      	ldr	r3, [r7, #32]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1e7      	bne.n	80011b2 <arm_fir_f32+0x5c>
    }

    /* Store result in destination buffer. */
    *pDst++ = acc0;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	1d1a      	adds	r2, r3, #4
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011ea:	601a      	str	r2, [r3, #0]

    /* Advance state pointer by 1 for the next sample */
    pState = pState + 1U;
 80011ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011ee:	3304      	adds	r3, #4
 80011f0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Decrement loop counter */
    blkCnt--;
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1c7      	bne.n	800118e <arm_fir_f32+0x38>
  /* Processing is complete.
     Now copy the last numTaps - 1 samples to the start of the state buffer.
     This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCurnt = S->pState;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	633b      	str	r3, [r7, #48]	@ 0x30
  tapCnt = (numTaps - 1U) % 0x4U;

#else

  /* Initialize tapCnt with number of taps */
  tapCnt = (numTaps - 1U);
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	3b01      	subs	r3, #1
 8001208:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy remaining data */
  while (tapCnt > 0U)
 800120a:	e00a      	b.n	8001222 <arm_fir_f32+0xcc>
  {
    *pStateCurnt++ = *pState++;
 800120c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800120e:	1d13      	adds	r3, r2, #4
 8001210:	637b      	str	r3, [r7, #52]	@ 0x34
 8001212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001214:	1d19      	adds	r1, r3, #4
 8001216:	6339      	str	r1, [r7, #48]	@ 0x30
 8001218:	6812      	ldr	r2, [r2, #0]
 800121a:	601a      	str	r2, [r3, #0]

    /* Decrement loop counter */
    tapCnt--;
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	3b01      	subs	r3, #1
 8001220:	61fb      	str	r3, [r7, #28]
  while (tapCnt > 0U)
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1f1      	bne.n	800120c <arm_fir_f32+0xb6>
  }

}
 8001228:	bf00      	nop
 800122a:	bf00      	nop
 800122c:	373c      	adds	r7, #60	@ 0x3c
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <arm_fir_init_f32>:
        arm_fir_instance_f32 * S,
        uint16_t numTaps,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b084      	sub	sp, #16
 800123a:	af00      	add	r7, sp, #0
 800123c:	60f8      	str	r0, [r7, #12]
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	460b      	mov	r3, r1
 8001244:	817b      	strh	r3, [r7, #10]
  /* Assign filter taps */
  S->numTaps = numTaps;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	897a      	ldrh	r2, [r7, #10]
 800124a:	801a      	strh	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	609a      	str	r2, [r3, #8]

  /* Clear state buffer. The size is always (blockSize + numTaps - 1) */
#if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  memset(pState, 0, (numTaps + (blockSize - 1U) + blockSize) * sizeof(float32_t));
#else
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 8001252:	897a      	ldrh	r2, [r7, #10]
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	4413      	add	r3, r2
 8001258:	3b01      	subs	r3, #1
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	461a      	mov	r2, r3
 800125e:	2100      	movs	r1, #0
 8001260:	6838      	ldr	r0, [r7, #0]
 8001262:	f000 f92b 	bl	80014bc <memset>
#endif
  /* Assign state pointer */
  S->pState = pState;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	605a      	str	r2, [r3, #4]
}
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <HAL_IncTick+0x20>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_IncTick+0x24>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4413      	add	r3, r2
 8001284:	4a04      	ldr	r2, [pc, #16]	@ (8001298 <HAL_IncTick+0x24>)
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000000 	.word	0x20000000
 8001298:	200000ec 	.word	0x200000ec

0800129c <uart2_set_fcpu>:

unsigned long f_cpu;

/** Functions ----------------------------------------------------------------*/
void uart2_set_fcpu(unsigned long freq)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	f_cpu = freq;
 80012a4:	4a04      	ldr	r2, [pc, #16]	@ (80012b8 <uart2_set_fcpu+0x1c>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	200000f0 	.word	0x200000f0

080012bc <uart2_config>:

uart_err_type_t uart2_config(uint32_t baud, uart_data_type_t ndata, uart_stop_type_t nstop)
{
 80012bc:	b5b0      	push	{r4, r5, r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	460b      	mov	r3, r1
 80012c6:	72fb      	strb	r3, [r7, #11]
 80012c8:	4613      	mov	r3, r2
 80012ca:	72bb      	strb	r3, [r7, #10]

	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;	// enable UART2 clock
 80012cc:	4b5c      	ldr	r3, [pc, #368]	@ (8001440 <uart2_config+0x184>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d0:	4a5b      	ldr	r2, [pc, #364]	@ (8001440 <uart2_config+0x184>)
 80012d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012d6:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;	// enable GPIOA clock
 80012d8:	4b59      	ldr	r3, [pc, #356]	@ (8001440 <uart2_config+0x184>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012dc:	4a58      	ldr	r2, [pc, #352]	@ (8001440 <uart2_config+0x184>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6313      	str	r3, [r2, #48]	@ 0x30

	// alternate function mode on TX (PA2) and RX (PA3)
	GPIOA->MODER |= GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1;
 80012e4:	4b57      	ldr	r3, [pc, #348]	@ (8001444 <uart2_config+0x188>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a56      	ldr	r2, [pc, #344]	@ (8001444 <uart2_config+0x188>)
 80012ea:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80012ee:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_0 | GPIO_MODER_MODER3_0);
 80012f0:	4b54      	ldr	r3, [pc, #336]	@ (8001444 <uart2_config+0x188>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a53      	ldr	r2, [pc, #332]	@ (8001444 <uart2_config+0x188>)
 80012f6:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 80012fa:	6013      	str	r3, [r2, #0]

	// select alternate function mode 7 for each
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL2 | GPIO_AFRL_AFRL3);
 80012fc:	4b51      	ldr	r3, [pc, #324]	@ (8001444 <uart2_config+0x188>)
 80012fe:	6a1b      	ldr	r3, [r3, #32]
 8001300:	4a50      	ldr	r2, [pc, #320]	@ (8001444 <uart2_config+0x188>)
 8001302:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001306:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL2_0 | GPIO_AFRL_AFRL3_0 |
 8001308:	4b4e      	ldr	r3, [pc, #312]	@ (8001444 <uart2_config+0x188>)
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	4a4d      	ldr	r2, [pc, #308]	@ (8001444 <uart2_config+0x188>)
 800130e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8001312:	6213      	str	r3, [r2, #32]
					GPIO_AFRL_AFRL2_1 | GPIO_AFRL_AFRL3_1 |
					GPIO_AFRL_AFRL2_2 | GPIO_AFRL_AFRL3_2;

	USART2->CR1 |= USART_CR1_UE;			// UART2 enable
 8001314:	4b4c      	ldr	r3, [pc, #304]	@ (8001448 <uart2_config+0x18c>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	4a4b      	ldr	r2, [pc, #300]	@ (8001448 <uart2_config+0x18c>)
 800131a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800131e:	60d3      	str	r3, [r2, #12]

	if (ndata == USART_DATA_8)
 8001320:	7afb      	ldrb	r3, [r7, #11]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d106      	bne.n	8001334 <uart2_config+0x78>
	{
		USART2->CR1 &= ~USART_CR1_M;		// 1 start, 8 data, n stop
 8001326:	4b48      	ldr	r3, [pc, #288]	@ (8001448 <uart2_config+0x18c>)
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	4a47      	ldr	r2, [pc, #284]	@ (8001448 <uart2_config+0x18c>)
 800132c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001330:	60d3      	str	r3, [r2, #12]
 8001332:	e00b      	b.n	800134c <uart2_config+0x90>
	}
	else if (ndata == USART_DATA_9)
 8001334:	7afb      	ldrb	r3, [r7, #11]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d106      	bne.n	8001348 <uart2_config+0x8c>
	{
		USART2->CR1 |= USART_CR1_M;			// 1 start, 9 data, n stop
 800133a:	4b43      	ldr	r3, [pc, #268]	@ (8001448 <uart2_config+0x18c>)
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	4a42      	ldr	r2, [pc, #264]	@ (8001448 <uart2_config+0x18c>)
 8001340:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001344:	60d3      	str	r3, [r2, #12]
 8001346:	e001      	b.n	800134c <uart2_config+0x90>
	}
	else
	{
		return USART_INVALID_NDATA;
 8001348:	2302      	movs	r3, #2
 800134a:	e075      	b.n	8001438 <uart2_config+0x17c>
	}

	if (nstop == USART_STOP_1)
 800134c:	7abb      	ldrb	r3, [r7, #10]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d106      	bne.n	8001360 <uart2_config+0xa4>
	{
		USART2->CR2 &= ~USART_CR2_STOP;		// 1 stop bit
 8001352:	4b3d      	ldr	r3, [pc, #244]	@ (8001448 <uart2_config+0x18c>)
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	4a3c      	ldr	r2, [pc, #240]	@ (8001448 <uart2_config+0x18c>)
 8001358:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800135c:	6113      	str	r3, [r2, #16]
 800135e:	e021      	b.n	80013a4 <uart2_config+0xe8>
	}
	else if (nstop == USART_STOP_HALF)
 8001360:	7abb      	ldrb	r3, [r7, #10]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d10c      	bne.n	8001380 <uart2_config+0xc4>
	{
		USART2->CR2 &= ~USART_CR2_STOP;		// half stop bit
 8001366:	4b38      	ldr	r3, [pc, #224]	@ (8001448 <uart2_config+0x18c>)
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	4a37      	ldr	r2, [pc, #220]	@ (8001448 <uart2_config+0x18c>)
 800136c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001370:	6113      	str	r3, [r2, #16]
		USART2->CR2 |= USART_CR2_STOP_0;
 8001372:	4b35      	ldr	r3, [pc, #212]	@ (8001448 <uart2_config+0x18c>)
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	4a34      	ldr	r2, [pc, #208]	@ (8001448 <uart2_config+0x18c>)
 8001378:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800137c:	6113      	str	r3, [r2, #16]
 800137e:	e011      	b.n	80013a4 <uart2_config+0xe8>
	}
	else if (nstop == USART_STOP_2)
 8001380:	7abb      	ldrb	r3, [r7, #10]
 8001382:	2b02      	cmp	r3, #2
 8001384:	d10c      	bne.n	80013a0 <uart2_config+0xe4>
	{
		USART2->CR2 &= ~USART_CR2_STOP;		// 2 stop bits
 8001386:	4b30      	ldr	r3, [pc, #192]	@ (8001448 <uart2_config+0x18c>)
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	4a2f      	ldr	r2, [pc, #188]	@ (8001448 <uart2_config+0x18c>)
 800138c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001390:	6113      	str	r3, [r2, #16]
		USART2->CR2 |= USART_CR2_STOP_1;
 8001392:	4b2d      	ldr	r3, [pc, #180]	@ (8001448 <uart2_config+0x18c>)
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	4a2c      	ldr	r2, [pc, #176]	@ (8001448 <uart2_config+0x18c>)
 8001398:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800139c:	6113      	str	r3, [r2, #16]
 800139e:	e001      	b.n	80013a4 <uart2_config+0xe8>
	}
	else
	{
		return USART_INVALID_NSTOP;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e049      	b.n	8001438 <uart2_config+0x17c>
	}

	// pg. 519 STM32F401RE reference
	float usart_div = f_cpu / (2 * 16.0 * baud);		// APB1 bus is 1/2 clock speed of f_cpu
 80013a4:	4b29      	ldr	r3, [pc, #164]	@ (800144c <uart2_config+0x190>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f855 	bl	8000458 <__aeabi_ui2d>
 80013ae:	4604      	mov	r4, r0
 80013b0:	460d      	mov	r5, r1
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f7ff f850 	bl	8000458 <__aeabi_ui2d>
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	4b24      	ldr	r3, [pc, #144]	@ (8001450 <uart2_config+0x194>)
 80013be:	f7ff f8c5 	bl	800054c <__aeabi_dmul>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4620      	mov	r0, r4
 80013c8:	4629      	mov	r1, r5
 80013ca:	f7ff f9e9 	bl	80007a0 <__aeabi_ddiv>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f7ff facb 	bl	8000970 <__aeabi_d2f>
 80013da:	4603      	mov	r3, r0
 80013dc:	617b      	str	r3, [r7, #20]
	uint16_t mantissa = (uint16_t) usart_div;
 80013de:	edd7 7a05 	vldr	s15, [r7, #20]
 80013e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013e6:	ee17 3a90 	vmov	r3, s15
 80013ea:	827b      	strh	r3, [r7, #18]
	uint8_t fraction = (uint8_t) ((usart_div - mantissa) * 16);
 80013ec:	8a7b      	ldrh	r3, [r7, #18]
 80013ee:	ee07 3a90 	vmov	s15, r3
 80013f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80013fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013fe:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001402:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800140a:	edc7 7a01 	vstr	s15, [r7, #4]
 800140e:	793b      	ldrb	r3, [r7, #4]
 8001410:	747b      	strb	r3, [r7, #17]
	USART2->BRR = mantissa << 4 | fraction;
 8001412:	8a7b      	ldrh	r3, [r7, #18]
 8001414:	011a      	lsls	r2, r3, #4
 8001416:	7c7b      	ldrb	r3, [r7, #17]
 8001418:	431a      	orrs	r2, r3
 800141a:	4b0b      	ldr	r3, [pc, #44]	@ (8001448 <uart2_config+0x18c>)
 800141c:	609a      	str	r2, [r3, #8]

	USART2->CR1 |= USART_CR1_TE;		// transmitter enable
 800141e:	4b0a      	ldr	r3, [pc, #40]	@ (8001448 <uart2_config+0x18c>)
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	4a09      	ldr	r2, [pc, #36]	@ (8001448 <uart2_config+0x18c>)
 8001424:	f043 0308 	orr.w	r3, r3, #8
 8001428:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RE;		// receiver enable
 800142a:	4b07      	ldr	r3, [pc, #28]	@ (8001448 <uart2_config+0x18c>)
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	4a06      	ldr	r2, [pc, #24]	@ (8001448 <uart2_config+0x18c>)
 8001430:	f043 0304 	orr.w	r3, r3, #4
 8001434:	60d3      	str	r3, [r2, #12]

	return USART_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bdb0      	pop	{r4, r5, r7, pc}
 8001440:	40023800 	.word	0x40023800
 8001444:	40020000 	.word	0x40020000
 8001448:	40004400 	.word	0x40004400
 800144c:	200000f0 	.word	0x200000f0
 8001450:	40400000 	.word	0x40400000

08001454 <uart2_write_byte>:

uart_err_type_t uart2_write_byte(uint8_t data)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
	while (!((USART2->SR) & USART_SR_TXE));		// wait for TX buffer empty
 800145e:	bf00      	nop
 8001460:	4b07      	ldr	r3, [pc, #28]	@ (8001480 <uart2_write_byte+0x2c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f9      	beq.n	8001460 <uart2_write_byte+0xc>
	USART2->DR = data;
 800146c:	4a04      	ldr	r2, [pc, #16]	@ (8001480 <uart2_write_byte+0x2c>)
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	6053      	str	r3, [r2, #4]

	return USART_OK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	40004400 	.word	0x40004400

08001484 <uart2_write>:


uart_err_type_t uart2_write(uint8_t * data, uint8_t len)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i = 0; i < len; i++)
 8001490:	2300      	movs	r3, #0
 8001492:	73fb      	strb	r3, [r7, #15]
 8001494:	e009      	b.n	80014aa <uart2_write+0x26>
	{
		uart2_write_byte(data[i]);
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	4413      	add	r3, r2
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ffd8 	bl	8001454 <uart2_write_byte>
	for (uint8_t i = 0; i < len; i++)
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	3301      	adds	r3, #1
 80014a8:	73fb      	strb	r3, [r7, #15]
 80014aa:	7bfa      	ldrb	r2, [r7, #15]
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d3f1      	bcc.n	8001496 <uart2_write+0x12>
	}

	return USART_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <memset>:
 80014bc:	4402      	add	r2, r0
 80014be:	4603      	mov	r3, r0
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d100      	bne.n	80014c6 <memset+0xa>
 80014c4:	4770      	bx	lr
 80014c6:	f803 1b01 	strb.w	r1, [r3], #1
 80014ca:	e7f9      	b.n	80014c0 <memset+0x4>

080014cc <__libc_init_array>:
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	4d0d      	ldr	r5, [pc, #52]	@ (8001504 <__libc_init_array+0x38>)
 80014d0:	4c0d      	ldr	r4, [pc, #52]	@ (8001508 <__libc_init_array+0x3c>)
 80014d2:	1b64      	subs	r4, r4, r5
 80014d4:	10a4      	asrs	r4, r4, #2
 80014d6:	2600      	movs	r6, #0
 80014d8:	42a6      	cmp	r6, r4
 80014da:	d109      	bne.n	80014f0 <__libc_init_array+0x24>
 80014dc:	4d0b      	ldr	r5, [pc, #44]	@ (800150c <__libc_init_array+0x40>)
 80014de:	4c0c      	ldr	r4, [pc, #48]	@ (8001510 <__libc_init_array+0x44>)
 80014e0:	f000 f818 	bl	8001514 <_init>
 80014e4:	1b64      	subs	r4, r4, r5
 80014e6:	10a4      	asrs	r4, r4, #2
 80014e8:	2600      	movs	r6, #0
 80014ea:	42a6      	cmp	r6, r4
 80014ec:	d105      	bne.n	80014fa <__libc_init_array+0x2e>
 80014ee:	bd70      	pop	{r4, r5, r6, pc}
 80014f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80014f4:	4798      	blx	r3
 80014f6:	3601      	adds	r6, #1
 80014f8:	e7ee      	b.n	80014d8 <__libc_init_array+0xc>
 80014fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80014fe:	4798      	blx	r3
 8001500:	3601      	adds	r6, #1
 8001502:	e7f2      	b.n	80014ea <__libc_init_array+0x1e>
 8001504:	08001618 	.word	0x08001618
 8001508:	08001618 	.word	0x08001618
 800150c:	08001618 	.word	0x08001618
 8001510:	0800161c 	.word	0x0800161c

08001514 <_init>:
 8001514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001516:	bf00      	nop
 8001518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800151a:	bc08      	pop	{r3}
 800151c:	469e      	mov	lr, r3
 800151e:	4770      	bx	lr

08001520 <_fini>:
 8001520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001522:	bf00      	nop
 8001524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001526:	bc08      	pop	{r3}
 8001528:	469e      	mov	lr, r3
 800152a:	4770      	bx	lr
