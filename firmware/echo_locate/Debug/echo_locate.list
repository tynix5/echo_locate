
echo_locate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002800  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002998  08002998  00003998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a0c  08002a0c  00004054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002a0c  08002a0c  00004054  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002a0c  08002a0c  00004054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a0c  08002a0c  00003a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a10  08002a10  00003a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08002a14  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  20000054  08002a68  00004054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  08002a68  0000453c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002c54  00000000  00000000  00004084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b93  00000000  00000000  00006cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000280  00000000  00000000  00007870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001e1  00000000  00000000  00007af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024cf2  00000000  00000000  00007cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000433a  00000000  00000000  0002c9c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083978  00000000  00000000  00030cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4675  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d20  00000000  00000000  000b46b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000b53d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000054 	.word	0x20000054
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002980 	.word	0x08002980

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000058 	.word	0x20000058
 80001d4:	08002980 	.word	0x08002980

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	0000      	movs	r0, r0
	...

08000b28 <main>:
void compute_event_pos(float * x, float * y, float mic0_x, float mic0_y,
					   float mic1_x, float mic1_y, float mic2_x, float mic2_y,
					   float mic1_delay, float mic2_delay);

int main(void)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 8000b2e:	af02      	add	r7, sp, #8

	sysclock_config();
 8000b30:	f000 fa2c 	bl	8000f8c <sysclock_config>

	q15_t mic0_state[NUM_FILTER_TAPS + SAMPLE_SIZE - 1];
	q15_t mic1_state[NUM_FILTER_TAPS + SAMPLE_SIZE - 1];
	q15_t mic2_state[NUM_FILTER_TAPS + SAMPLE_SIZE - 1];

	arm_fir_decimate_init_q15(&hfir0, NUM_FILTER_TAPS, 4, ftaps_q15, mic0_state, SAMPLE_SIZE);
 8000b34:	2330      	movs	r3, #48	@ 0x30
 8000b36:	9301      	str	r3, [sp, #4]
 8000b38:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	4bca      	ldr	r3, [pc, #808]	@ (8000e68 <main+0x340>)
 8000b40:	2204      	movs	r2, #4
 8000b42:	212e      	movs	r1, #46	@ 0x2e
 8000b44:	48c9      	ldr	r0, [pc, #804]	@ (8000e6c <main+0x344>)
 8000b46:	f001 f94c 	bl	8001de2 <arm_fir_decimate_init_q15>
	arm_fir_decimate_init_q15(&hfir1, NUM_FILTER_TAPS, 4, ftaps_q15, mic1_state, SAMPLE_SIZE);
 8000b4a:	2330      	movs	r3, #48	@ 0x30
 8000b4c:	9301      	str	r3, [sp, #4]
 8000b4e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	4bc4      	ldr	r3, [pc, #784]	@ (8000e68 <main+0x340>)
 8000b56:	2204      	movs	r2, #4
 8000b58:	212e      	movs	r1, #46	@ 0x2e
 8000b5a:	48c5      	ldr	r0, [pc, #788]	@ (8000e70 <main+0x348>)
 8000b5c:	f001 f941 	bl	8001de2 <arm_fir_decimate_init_q15>
	arm_fir_decimate_init_q15(&hfir2, NUM_FILTER_TAPS, 4, ftaps_q15, mic2_state, SAMPLE_SIZE);
 8000b60:	2330      	movs	r3, #48	@ 0x30
 8000b62:	9301      	str	r3, [sp, #4]
 8000b64:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	4bbf      	ldr	r3, [pc, #764]	@ (8000e68 <main+0x340>)
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	212e      	movs	r1, #46	@ 0x2e
 8000b70:	48c0      	ldr	r0, [pc, #768]	@ (8000e74 <main+0x34c>)
 8000b72:	f001 f936 	bl	8001de2 <arm_fir_decimate_init_q15>

	q15_t mic0_filtered[DECIMATION_SIZE];
	q15_t mic1_filtered[DECIMATION_SIZE];
	q15_t mic2_filtered[DECIMATION_SIZE];

	uart2_set_fcpu(84000000);
 8000b76:	48c0      	ldr	r0, [pc, #768]	@ (8000e78 <main+0x350>)
 8000b78:	f001 f97a 	bl	8001e70 <uart2_set_fcpu>
	uart2_dma1_config(115200, USART_DATA_8, USART_STOP_1);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8000b84:	f001 f984 	bl	8001e90 <uart2_dma1_config>

	tim2_trig_config();
 8000b88:	f000 fbc8 	bl	800131c <tim2_trig_config>
	adc1_dma_config();
 8000b8c:	f000 fa8c 	bl	80010a8 <adc1_dma_config>

	GPIOA->MODER &= ~GPIO_MODER_MODER10;
 8000b90:	4bba      	ldr	r3, [pc, #744]	@ (8000e7c <main+0x354>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4ab9      	ldr	r2, [pc, #740]	@ (8000e7c <main+0x354>)
 8000b96:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000b9a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER10_0;
 8000b9c:	4bb7      	ldr	r3, [pc, #732]	@ (8000e7c <main+0x354>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4ab6      	ldr	r2, [pc, #728]	@ (8000e7c <main+0x354>)
 8000ba2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ba6:	6013      	str	r3, [r2, #0]

	GPIOA->MODER &= ~GPIO_MODER_MODER8;
 8000ba8:	4bb4      	ldr	r3, [pc, #720]	@ (8000e7c <main+0x354>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4ab3      	ldr	r2, [pc, #716]	@ (8000e7c <main+0x354>)
 8000bae:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000bb2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER8_0;
 8000bb4:	4bb1      	ldr	r3, [pc, #708]	@ (8000e7c <main+0x354>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4ab0      	ldr	r2, [pc, #704]	@ (8000e7c <main+0x354>)
 8000bba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bbe:	6013      	str	r3, [r2, #0]

	float mic0_timestamp = 0, mic1_timestamp = 0, mic2_timestamp = 0;
 8000bc0:	f04f 0300 	mov.w	r3, #0
 8000bc4:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8000bc8:	f04f 0300 	mov.w	r3, #0
 8000bcc:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 8000bd0:	f04f 0300 	mov.w	r3, #0
 8000bd4:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4

	uint8_t detection_cnt = 0;						// number of microphones that have detected an event
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f887 32a3 	strb.w	r3, [r7, #675]	@ 0x2a3
	uint32_t sample_cnt = 0;						// # of samples collected
 8000bde:	2300      	movs	r3, #0
 8000be0:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c

	while (1)
	{

		GPIOA->ODR |= GPIO_ODR_OD10;
 8000be4:	4ba5      	ldr	r3, [pc, #660]	@ (8000e7c <main+0x354>)
 8000be6:	695b      	ldr	r3, [r3, #20]
 8000be8:	4aa4      	ldr	r2, [pc, #656]	@ (8000e7c <main+0x354>)
 8000bea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bee:	6153      	str	r3, [r2, #20]
		while (!!(DMA2_Stream0->CR & DMA_SxCR_CT) == dma_tgt);		// wait for stream to complete
 8000bf0:	bf00      	nop
 8000bf2:	4ba3      	ldr	r3, [pc, #652]	@ (8000e80 <main+0x358>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	bf14      	ite	ne
 8000bfe:	2301      	movne	r3, #1
 8000c00:	2300      	moveq	r3, #0
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b9f      	ldr	r3, [pc, #636]	@ (8000e84 <main+0x35c>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d0f1      	beq.n	8000bf2 <main+0xca>
		GPIOA->ODR &= ~GPIO_ODR_OD10;
 8000c0e:	4b9b      	ldr	r3, [pc, #620]	@ (8000e7c <main+0x354>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	4a9a      	ldr	r2, [pc, #616]	@ (8000e7c <main+0x354>)
 8000c14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000c18:	6153      	str	r3, [r2, #20]
		dma_tgt = !dma_tgt;								// switch DMA targets
 8000c1a:	4b9a      	ldr	r3, [pc, #616]	@ (8000e84 <main+0x35c>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	bf0c      	ite	eq
 8000c22:	2301      	moveq	r3, #1
 8000c24:	2300      	movne	r3, #0
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b96      	ldr	r3, [pc, #600]	@ (8000e84 <main+0x35c>)
 8000c2c:	701a      	strb	r2, [r3, #0]
		DMA2->LIFCR |= DMA_LIFCR_CTCIF0 | DMA_LIFCR_CHTIF0;			// clear transfer complete and half complete flag
 8000c2e:	4b96      	ldr	r3, [pc, #600]	@ (8000e88 <main+0x360>)
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	4a95      	ldr	r2, [pc, #596]	@ (8000e88 <main+0x360>)
 8000c34:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000c38:	6093      	str	r3, [r2, #8]

		stream_splice();
 8000c3a:	f000 fbaf 	bl	800139c <stream_splice>

		GPIOA->ODR |= GPIO_ODR_OD8;
 8000c3e:	4b8f      	ldr	r3, [pc, #572]	@ (8000e7c <main+0x354>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	4a8e      	ldr	r2, [pc, #568]	@ (8000e7c <main+0x354>)
 8000c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c48:	6153      	str	r3, [r2, #20]

		// Cross correlation instead of filtering?
		arm_fir_decimate_fast_q15(&hfir0, mic0_samp, mic0_filtered, SAMPLE_SIZE);
 8000c4a:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8000c4e:	2330      	movs	r3, #48	@ 0x30
 8000c50:	498e      	ldr	r1, [pc, #568]	@ (8000e8c <main+0x364>)
 8000c52:	4886      	ldr	r0, [pc, #536]	@ (8000e6c <main+0x344>)
 8000c54:	f000 ff11 	bl	8001a7a <arm_fir_decimate_fast_q15>
		arm_fir_decimate_fast_q15(&hfir1, mic1_samp, mic1_filtered, SAMPLE_SIZE);
 8000c58:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000c5c:	2330      	movs	r3, #48	@ 0x30
 8000c5e:	498c      	ldr	r1, [pc, #560]	@ (8000e90 <main+0x368>)
 8000c60:	4883      	ldr	r0, [pc, #524]	@ (8000e70 <main+0x348>)
 8000c62:	f000 ff0a 	bl	8001a7a <arm_fir_decimate_fast_q15>
		arm_fir_decimate_fast_q15(&hfir2, mic2_samp, mic2_filtered, SAMPLE_SIZE);
 8000c66:	f107 0214 	add.w	r2, r7, #20
 8000c6a:	2330      	movs	r3, #48	@ 0x30
 8000c6c:	4989      	ldr	r1, [pc, #548]	@ (8000e94 <main+0x36c>)
 8000c6e:	4881      	ldr	r0, [pc, #516]	@ (8000e74 <main+0x34c>)
 8000c70:	f000 ff03 	bl	8001a7a <arm_fir_decimate_fast_q15>

		uint16_t mic0_max, mic1_max, mic2_max;			// hold indices of max values in filtered sample (0-DECIMATION_SIZE)
		find_filter_peaks(mic0_filtered, mic1_filtered, mic2_filtered, &mic0_max, &mic1_max, &mic2_max);
 8000c74:	f107 0412 	add.w	r4, r7, #18
 8000c78:	f107 0214 	add.w	r2, r7, #20
 8000c7c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000c80:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8000c84:	f107 030e 	add.w	r3, r7, #14
 8000c88:	9301      	str	r3, [sp, #4]
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	4623      	mov	r3, r4
 8000c92:	f000 fc07 	bl	80014a4 <find_filter_peaks>

		float sample_based_time = sample_cnt * SAMPLE_PERIOD;
 8000c96:	f8d7 029c 	ldr.w	r0, [r7, #668]	@ 0x29c
 8000c9a:	f7ff fbdf 	bl	800045c <__aeabi_ui2d>
 8000c9e:	a36e      	add	r3, pc, #440	@ (adr r3, 8000e58 <main+0x330>)
 8000ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca4:	f7ff fd7e 	bl	80007a4 <__aeabi_ddiv>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	4610      	mov	r0, r2
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f7ff fee8 	bl	8000a84 <__aeabi_d2f>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
		// if a new event has been detected, update time stamps and event count
		if ((abs(mic0_filtered[mic0_max]) > THRESH_EVENT) && (sample_based_time - mic0_timestamp > EVENT_DB_TIME))
 8000cba:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8000cbe:	f2a3 239e 	subw	r3, r3, #670	@ 0x29e
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8000cca:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8000cce:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	bfb8      	it	lt
 8000cd6:	425b      	neglt	r3, r3
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000cde:	d933      	bls.n	8000d48 <main+0x220>
 8000ce0:	ed97 7aa6 	vldr	s14, [r7, #664]	@ 0x298
 8000ce4:	edd7 7aab 	vldr	s15, [r7, #684]	@ 0x2ac
 8000ce8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cec:	ee17 0a90 	vmov	r0, s15
 8000cf0:	f7ff fbd6 	bl	80004a0 <__aeabi_f2d>
 8000cf4:	a35a      	add	r3, pc, #360	@ (adr r3, 8000e60 <main+0x338>)
 8000cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cfa:	f7ff feb9 	bl	8000a70 <__aeabi_dcmpgt>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d021      	beq.n	8000d48 <main+0x220>
		{
			mic0_timestamp = (sample_cnt + mic0_max) * SAMPLE_PERIOD;
 8000d04:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8000d08:	f2a3 239e 	subw	r3, r3, #670	@ 0x29e
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8000d14:	4413      	add	r3, r2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fba0 	bl	800045c <__aeabi_ui2d>
 8000d1c:	a34e      	add	r3, pc, #312	@ (adr r3, 8000e58 <main+0x330>)
 8000d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d22:	f7ff fd3f 	bl	80007a4 <__aeabi_ddiv>
 8000d26:	4602      	mov	r2, r0
 8000d28:	460b      	mov	r3, r1
 8000d2a:	4610      	mov	r0, r2
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f7ff fea9 	bl	8000a84 <__aeabi_d2f>
 8000d32:	4603      	mov	r3, r0
 8000d34:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
			mic_detected_event[0] = 1;
 8000d38:	4b57      	ldr	r3, [pc, #348]	@ (8000e98 <main+0x370>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	701a      	strb	r2, [r3, #0]
			detection_cnt++;
 8000d3e:	f897 32a3 	ldrb.w	r3, [r7, #675]	@ 0x2a3
 8000d42:	3301      	adds	r3, #1
 8000d44:	f887 32a3 	strb.w	r3, [r7, #675]	@ 0x2a3
		}

		if ((abs(mic1_filtered[mic1_max]) > THRESH_EVENT) && (sample_based_time - mic1_timestamp > EVENT_DB_TIME))
 8000d48:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8000d4c:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	461a      	mov	r2, r3
 8000d54:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8000d58:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8000d5c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	bfb8      	it	lt
 8000d64:	425b      	neglt	r3, r3
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000d6c:	d933      	bls.n	8000dd6 <main+0x2ae>
 8000d6e:	ed97 7aa6 	vldr	s14, [r7, #664]	@ 0x298
 8000d72:	edd7 7aaa 	vldr	s15, [r7, #680]	@ 0x2a8
 8000d76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d7a:	ee17 0a90 	vmov	r0, s15
 8000d7e:	f7ff fb8f 	bl	80004a0 <__aeabi_f2d>
 8000d82:	a337      	add	r3, pc, #220	@ (adr r3, 8000e60 <main+0x338>)
 8000d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d88:	f7ff fe72 	bl	8000a70 <__aeabi_dcmpgt>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d021      	beq.n	8000dd6 <main+0x2ae>
		{
			// account for sample delay later
			mic1_timestamp = (sample_cnt + mic1_max) * SAMPLE_PERIOD;
 8000d92:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8000d96:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8000d9a:	881b      	ldrh	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8000da2:	4413      	add	r3, r2
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fb59 	bl	800045c <__aeabi_ui2d>
 8000daa:	a32b      	add	r3, pc, #172	@ (adr r3, 8000e58 <main+0x330>)
 8000dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db0:	f7ff fcf8 	bl	80007a4 <__aeabi_ddiv>
 8000db4:	4602      	mov	r2, r0
 8000db6:	460b      	mov	r3, r1
 8000db8:	4610      	mov	r0, r2
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f7ff fe62 	bl	8000a84 <__aeabi_d2f>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
			mic_detected_event[1] = 1;
 8000dc6:	4b34      	ldr	r3, [pc, #208]	@ (8000e98 <main+0x370>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	705a      	strb	r2, [r3, #1]
			detection_cnt++;
 8000dcc:	f897 32a3 	ldrb.w	r3, [r7, #675]	@ 0x2a3
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	f887 32a3 	strb.w	r3, [r7, #675]	@ 0x2a3
		}

		if ((abs(mic2_filtered[mic2_max]) > THRESH_EVENT) && (sample_based_time - mic2_timestamp > EVENT_DB_TIME))
 8000dd6:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8000dda:	f2a3 23a2 	subw	r3, r3, #674	@ 0x2a2
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8000de6:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8000dea:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	bfb8      	it	lt
 8000df2:	425b      	neglt	r3, r3
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000dfa:	d959      	bls.n	8000eb0 <main+0x388>
 8000dfc:	ed97 7aa6 	vldr	s14, [r7, #664]	@ 0x298
 8000e00:	edd7 7aa9 	vldr	s15, [r7, #676]	@ 0x2a4
 8000e04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e08:	ee17 0a90 	vmov	r0, s15
 8000e0c:	f7ff fb48 	bl	80004a0 <__aeabi_f2d>
 8000e10:	a313      	add	r3, pc, #76	@ (adr r3, 8000e60 <main+0x338>)
 8000e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e16:	f7ff fe2b 	bl	8000a70 <__aeabi_dcmpgt>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d047      	beq.n	8000eb0 <main+0x388>
		{
			// account for sample delay later
			mic2_timestamp = (sample_cnt + mic2_max) * SAMPLE_PERIOD;
 8000e20:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8000e24:	f2a3 23a2 	subw	r3, r3, #674	@ 0x2a2
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8000e30:	4413      	add	r3, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fb12 	bl	800045c <__aeabi_ui2d>
 8000e38:	a307      	add	r3, pc, #28	@ (adr r3, 8000e58 <main+0x330>)
 8000e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3e:	f7ff fcb1 	bl	80007a4 <__aeabi_ddiv>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	4610      	mov	r0, r2
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f7ff fe1b 	bl	8000a84 <__aeabi_d2f>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	e024      	b.n	8000e9c <main+0x374>
 8000e52:	bf00      	nop
 8000e54:	f3af 8000 	nop.w
 8000e58:	00000000 	.word	0x00000000
 8000e5c:	40e38800 	.word	0x40e38800
 8000e60:	9999999a 	.word	0x9999999a
 8000e64:	3fb99999 	.word	0x3fb99999
 8000e68:	08002998 	.word	0x08002998
 8000e6c:	20000070 	.word	0x20000070
 8000e70:	2000007c 	.word	0x2000007c
 8000e74:	20000088 	.word	0x20000088
 8000e78:	0501bd00 	.word	0x0501bd00
 8000e7c:	40020000 	.word	0x40020000
 8000e80:	40026410 	.word	0x40026410
 8000e84:	200003f4 	.word	0x200003f4
 8000e88:	40026400 	.word	0x40026400
 8000e8c:	200002d4 	.word	0x200002d4
 8000e90:	20000334 	.word	0x20000334
 8000e94:	20000394 	.word	0x20000394
 8000e98:	200003f8 	.word	0x200003f8
 8000e9c:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
			mic_detected_event[2] = 1;
 8000ea0:	4b36      	ldr	r3, [pc, #216]	@ (8000f7c <main+0x454>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	709a      	strb	r2, [r3, #2]
			detection_cnt++;
 8000ea6:	f897 32a3 	ldrb.w	r3, [r7, #675]	@ 0x2a3
 8000eaa:	3301      	adds	r3, #1
 8000eac:	f887 32a3 	strb.w	r3, [r7, #675]	@ 0x2a3
		}


		if (detection_cnt >= 3)
 8000eb0:	f897 32a3 	ldrb.w	r3, [r7, #675]	@ 0x2a3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d954      	bls.n	8000f62 <main+0x43a>
		{
			if (detection_cnt == 3 && mic_detected_event[0] && mic_detected_event[1] && mic_detected_event[2])
 8000eb8:	f897 32a3 	ldrb.w	r3, [r7, #675]	@ 0x2a3
 8000ebc:	2b03      	cmp	r3, #3
 8000ebe:	d144      	bne.n	8000f4a <main+0x422>
 8000ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8000f7c <main+0x454>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d040      	beq.n	8000f4a <main+0x422>
 8000ec8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f7c <main+0x454>)
 8000eca:	785b      	ldrb	r3, [r3, #1]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d03c      	beq.n	8000f4a <main+0x422>
 8000ed0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f7c <main+0x454>)
 8000ed2:	789b      	ldrb	r3, [r3, #2]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d038      	beq.n	8000f4a <main+0x422>
			{
				// GOOD state
				// mic0 is the reference
				float mic1_delay = mic1_timestamp - mic0_timestamp;
 8000ed8:	ed97 7aaa 	vldr	s14, [r7, #680]	@ 0x2a8
 8000edc:	edd7 7aab 	vldr	s15, [r7, #684]	@ 0x2ac
 8000ee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ee4:	edc7 7aa5 	vstr	s15, [r7, #660]	@ 0x294
				float mic2_delay = mic2_timestamp - mic0_timestamp;
 8000ee8:	ed97 7aa9 	vldr	s14, [r7, #676]	@ 0x2a4
 8000eec:	edd7 7aab 	vldr	s15, [r7, #684]	@ 0x2ac
 8000ef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ef4:	edc7 7aa4 	vstr	s15, [r7, #656]	@ 0x290
					float coords_f[2];			// (x, y)
					uint8_t serial[8];
				} coords;

				// initial guess
				coords.coords_f[0] = 0.3;
 8000ef8:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8000efc:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8000f00:	4a1f      	ldr	r2, [pc, #124]	@ (8000f80 <main+0x458>)
 8000f02:	601a      	str	r2, [r3, #0]
				coords.coords_f[1] = 0.5;
 8000f04:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8000f08:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8000f0c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8000f10:	605a      	str	r2, [r3, #4]

				compute_event_pos(&coords.coords_f[0], &coords.coords_f[1], MIC0_XPOS, MIC0_YPOS, MIC1_XPOS, MIC1_YPOS, MIC2_XPOS, MIC2_YPOS, mic1_delay, mic2_delay);
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	1d1a      	adds	r2, r3, #4
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	edd7 3aa4 	vldr	s7, [r7, #656]	@ 0x290
 8000f1c:	ed97 3aa5 	vldr	s6, [r7, #660]	@ 0x294
 8000f20:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 8000f24:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 8000f28:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8000f2c:	ed9f 1a15 	vldr	s2, [pc, #84]	@ 8000f84 <main+0x45c>
 8000f30:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8000f84 <main+0x45c>
 8000f34:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8000f84 <main+0x45c>
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 fb24 	bl	8001588 <compute_event_pos>
				uart2_dma1_write(8, coords.serial);
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	4619      	mov	r1, r3
 8000f44:	2008      	movs	r0, #8
 8000f46:	f001 f8c5 	bl	80020d4 <uart2_dma1_write>
			{
				// ERROR state
			}

			// reset event detection
			detection_cnt = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	f887 32a3 	strb.w	r3, [r7, #675]	@ 0x2a3
			mic_detected_event[0] = 0;
 8000f50:	4b0a      	ldr	r3, [pc, #40]	@ (8000f7c <main+0x454>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
			mic_detected_event[1] = 0;
 8000f56:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <main+0x454>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	705a      	strb	r2, [r3, #1]
			mic_detected_event[2] = 0;
 8000f5c:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <main+0x454>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	709a      	strb	r2, [r3, #2]
		}

		sample_cnt += SAMPLE_SIZE;
 8000f62:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8000f66:	3330      	adds	r3, #48	@ 0x30
 8000f68:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c

		GPIOA->ODR &= ~GPIO_ODR_OD8;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <main+0x460>)
 8000f6e:	695b      	ldr	r3, [r3, #20]
 8000f70:	4a05      	ldr	r2, [pc, #20]	@ (8000f88 <main+0x460>)
 8000f72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000f76:	6153      	str	r3, [r2, #20]
	{
 8000f78:	e634      	b.n	8000be4 <main+0xbc>
 8000f7a:	bf00      	nop
 8000f7c:	200003f8 	.word	0x200003f8
 8000f80:	3e99999a 	.word	0x3e99999a
 8000f84:	00000000 	.word	0x00000000
 8000f88:	40020000 	.word	0x40020000

08000f8c <sysclock_config>:
	}
}

void sysclock_config(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
	// 16 MHz HSI oscillator is default on reset, but select anyways
	RCC->CR |= RCC_CR_HSION;
 8000f92:	4b42      	ldr	r3, [pc, #264]	@ (800109c <sysclock_config+0x110>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a41      	ldr	r2, [pc, #260]	@ (800109c <sysclock_config+0x110>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6013      	str	r3, [r2, #0]
	// wait for HSI to be ready
	while (!((RCC->CR) & RCC_CR_HSIRDY));
 8000f9e:	bf00      	nop
 8000fa0:	4b3e      	ldr	r3, [pc, #248]	@ (800109c <sysclock_config+0x110>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0f9      	beq.n	8000fa0 <sysclock_config+0x14>

	// enable power interface clock for APB1
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000fac:	4b3b      	ldr	r3, [pc, #236]	@ (800109c <sysclock_config+0x110>)
 8000fae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000fb2:	641a      	str	r2, [r3, #64]	@ 0x40

	// configure VCO to scale 2 per CubeMX
	PWR->CR |= PWR_CR_VOS_1;
 8000fb4:	4b3a      	ldr	r3, [pc, #232]	@ (80010a0 <sysclock_config+0x114>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a39      	ldr	r2, [pc, #228]	@ (80010a0 <sysclock_config+0x114>)
 8000fba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fbe:	6013      	str	r3, [r2, #0]
	PWR->CR &= ~PWR_CR_VOS_0;
 8000fc0:	4b37      	ldr	r3, [pc, #220]	@ (80010a0 <sysclock_config+0x114>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a36      	ldr	r2, [pc, #216]	@ (80010a0 <sysclock_config+0x114>)
 8000fc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000fca:	6013      	str	r3, [r2, #0]

	// configure FLASH
	// instruction cache, prefetch enable, and data cache enabled
	uint32_t flash;
	flash = FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN;
 8000fcc:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000fd0:	60fb      	str	r3, [r7, #12]
	flash |= 2;		// 2 wait states for flash
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f043 0302 	orr.w	r3, r3, #2
 8000fd8:	60fb      	str	r3, [r7, #12]
	FLASH->ACR = flash;
 8000fda:	4a32      	ldr	r2, [pc, #200]	@ (80010a4 <sysclock_config+0x118>)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	6013      	str	r3, [r2, #0]

	// configure bus prescalers
	uint32_t cfgr = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_PPRE2_2;		// APB2 prescaler of 1 (84MHz)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000fea:	60bb      	str	r3, [r7, #8]
	cfgr |= RCC_CFGR_PPRE1_2;		// APB1 prescaler of 2 (42MHZ)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ff2:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_HPRE;			// AHB prescaler of 1 (84MHz)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000ffa:	60bb      	str	r3, [r7, #8]
	RCC->CFGR = cfgr;
 8000ffc:	4a27      	ldr	r2, [pc, #156]	@ (800109c <sysclock_config+0x110>)
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	6093      	str	r3, [r2, #8]

	// configure main PLL
	uint32_t pll_cfg = RCC->PLLCFGR;
 8001002:	4b26      	ldr	r3, [pc, #152]	@ (800109c <sysclock_config+0x110>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	607b      	str	r3, [r7, #4]
	pll_cfg &= ~RCC_PLLCFGR_PLLQ;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800100e:	607b      	str	r3, [r7, #4]
	pll_cfg |= RCC_PLLCFGR_PLLQ_2; // configure Q prescaler for USB, SDIO, RNG clocks (/4)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001016:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLP;	// main PLL division factor of 2
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800101e:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLN;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001026:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800102a:	607b      	str	r3, [r7, #4]
	pll_cfg |= 168UL << 6;	// pll multiplication factor for VCO (x168)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f443 5328 	orr.w	r3, r3, #10752	@ 0x2a00
 8001032:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLM;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800103a:	607b      	str	r3, [r7, #4]
	pll_cfg |= 16UL << 0;	// pll division factor for main PLL and audio PLL (/16)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f043 0310 	orr.w	r3, r3, #16
 8001042:	607b      	str	r3, [r7, #4]

	RCC->PLLCFGR = pll_cfg;
 8001044:	4a15      	ldr	r2, [pc, #84]	@ (800109c <sysclock_config+0x110>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6053      	str	r3, [r2, #4]

	// enable PLL and wait for ready
	RCC->CR |= RCC_CR_PLLON;
 800104a:	4b14      	ldr	r3, [pc, #80]	@ (800109c <sysclock_config+0x110>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a13      	ldr	r2, [pc, #76]	@ (800109c <sysclock_config+0x110>)
 8001050:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001054:	6013      	str	r3, [r2, #0]
	while (!((RCC->CR) & RCC_CR_PLLRDY));
 8001056:	bf00      	nop
 8001058:	4b10      	ldr	r3, [pc, #64]	@ (800109c <sysclock_config+0x110>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0f9      	beq.n	8001058 <sysclock_config+0xcc>

	// select clock source
	cfgr = RCC->CFGR;
 8001064:	4b0d      	ldr	r3, [pc, #52]	@ (800109c <sysclock_config+0x110>)
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	60bb      	str	r3, [r7, #8]
	cfgr |= RCC_CFGR_SW_1;		// select PLL as system clock
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_SW_0;
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	f023 0301 	bic.w	r3, r3, #1
 8001078:	60bb      	str	r3, [r7, #8]
	RCC->CFGR = cfgr;
 800107a:	4a08      	ldr	r2, [pc, #32]	@ (800109c <sysclock_config+0x110>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	6093      	str	r3, [r2, #8]

	// wait for PLL clock source to become active
	while (!((RCC->CFGR) & RCC_CFGR_SWS_1));
 8001080:	bf00      	nop
 8001082:	4b06      	ldr	r3, [pc, #24]	@ (800109c <sysclock_config+0x110>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	2b00      	cmp	r3, #0
 800108c:	d0f9      	beq.n	8001082 <sysclock_config+0xf6>
}
 800108e:	bf00      	nop
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	40023800 	.word	0x40023800
 80010a0:	40007000 	.word	0x40007000
 80010a4:	40023c00 	.word	0x40023c00

080010a8 <adc1_dma_config>:

void adc1_dma_config(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;				// enable ADC1 clock
 80010ac:	4b93      	ldr	r3, [pc, #588]	@ (80012fc <adc1_dma_config+0x254>)
 80010ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b0:	4a92      	ldr	r2, [pc, #584]	@ (80012fc <adc1_dma_config+0x254>)
 80010b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010b6:	6453      	str	r3, [r2, #68]	@ 0x44
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;			// enable GPIOA clock
 80010b8:	4b90      	ldr	r3, [pc, #576]	@ (80012fc <adc1_dma_config+0x254>)
 80010ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010bc:	4a8f      	ldr	r2, [pc, #572]	@ (80012fc <adc1_dma_config+0x254>)
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	6313      	str	r3, [r2, #48]	@ 0x30

	// PA0 as analog input
	GPIOA->MODER |= GPIO_MODER_MODER0_0 | GPIO_MODER_MODER0_1;
 80010c4:	4b8e      	ldr	r3, [pc, #568]	@ (8001300 <adc1_dma_config+0x258>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a8d      	ldr	r2, [pc, #564]	@ (8001300 <adc1_dma_config+0x258>)
 80010ca:	f043 0303 	orr.w	r3, r3, #3
 80010ce:	6013      	str	r3, [r2, #0]
	// PA1 as analog input
	GPIOA->MODER |= GPIO_MODER_MODER1_0 | GPIO_MODER_MODER1_1;
 80010d0:	4b8b      	ldr	r3, [pc, #556]	@ (8001300 <adc1_dma_config+0x258>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a8a      	ldr	r2, [pc, #552]	@ (8001300 <adc1_dma_config+0x258>)
 80010d6:	f043 030c 	orr.w	r3, r3, #12
 80010da:	6013      	str	r3, [r2, #0]
	// PA4 as analog input
	GPIOA->MODER |= GPIO_MODER_MODER4_0 | GPIO_MODER_MODER4_1;
 80010dc:	4b88      	ldr	r3, [pc, #544]	@ (8001300 <adc1_dma_config+0x258>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a87      	ldr	r2, [pc, #540]	@ (8001300 <adc1_dma_config+0x258>)
 80010e2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80010e6:	6013      	str	r3, [r2, #0]

	ADC1->CR2 &= ~ADC_CR2_ADON;						// turn off ADC to configure
 80010e8:	4b86      	ldr	r3, [pc, #536]	@ (8001304 <adc1_dma_config+0x25c>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	4a85      	ldr	r2, [pc, #532]	@ (8001304 <adc1_dma_config+0x25c>)
 80010ee:	f023 0301 	bic.w	r3, r3, #1
 80010f2:	6093      	str	r3, [r2, #8]

	// APB2 clock (84 MHz) / 4 = 21 MHz
	// MAX ADC clock freq is 36 MHz (pg 106 datasheet)
	ADC->CCR &= ~ADC_CCR_ADCPRE;
 80010f4:	4b84      	ldr	r3, [pc, #528]	@ (8001308 <adc1_dma_config+0x260>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	4a83      	ldr	r2, [pc, #524]	@ (8001308 <adc1_dma_config+0x260>)
 80010fa:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80010fe:	6053      	str	r3, [r2, #4]
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 8001100:	4b81      	ldr	r3, [pc, #516]	@ (8001308 <adc1_dma_config+0x260>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	4a80      	ldr	r2, [pc, #512]	@ (8001308 <adc1_dma_config+0x260>)
 8001106:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800110a:	6053      	str	r3, [r2, #4]

	// trigger detection on rising edge
	ADC1->CR2 |= ADC_CR2_EXTEN_0;
 800110c:	4b7d      	ldr	r3, [pc, #500]	@ (8001304 <adc1_dma_config+0x25c>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	4a7c      	ldr	r2, [pc, #496]	@ (8001304 <adc1_dma_config+0x25c>)
 8001112:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001116:	6093      	str	r3, [r2, #8]
	ADC1->CR2 &= ~ADC_CR2_EXTEN_1;
 8001118:	4b7a      	ldr	r3, [pc, #488]	@ (8001304 <adc1_dma_config+0x25c>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	4a79      	ldr	r2, [pc, #484]	@ (8001304 <adc1_dma_config+0x25c>)
 800111e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8001122:	6093      	str	r3, [r2, #8]

	// TIM2 TRGO event
	ADC1->CR2 |= ADC_CR2_EXTSEL_1 | ADC_CR2_EXTSEL_2;
 8001124:	4b77      	ldr	r3, [pc, #476]	@ (8001304 <adc1_dma_config+0x25c>)
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	4a76      	ldr	r2, [pc, #472]	@ (8001304 <adc1_dma_config+0x25c>)
 800112a:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 800112e:	6093      	str	r3, [r2, #8]
	ADC1->CR2 &= ~(ADC_CR2_EXTSEL_0 | ADC_CR2_EXTSEL_3);
 8001130:	4b74      	ldr	r3, [pc, #464]	@ (8001304 <adc1_dma_config+0x25c>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	4a73      	ldr	r2, [pc, #460]	@ (8001304 <adc1_dma_config+0x25c>)
 8001136:	f023 6310 	bic.w	r3, r3, #150994944	@ 0x9000000
 800113a:	6093      	str	r3, [r2, #8]

	// Scan mode to convert all 3 channels
	ADC1->CR1 |= ADC_CR1_SCAN;
 800113c:	4b71      	ldr	r3, [pc, #452]	@ (8001304 <adc1_dma_config+0x25c>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	4a70      	ldr	r2, [pc, #448]	@ (8001304 <adc1_dma_config+0x25c>)
 8001142:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001146:	6053      	str	r3, [r2, #4]

	// EOC bit set at end of each sequence of regular conversions
	ADC1->CR2 &= ~ADC_CR2_EOCS;
 8001148:	4b6e      	ldr	r3, [pc, #440]	@ (8001304 <adc1_dma_config+0x25c>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	4a6d      	ldr	r2, [pc, #436]	@ (8001304 <adc1_dma_config+0x25c>)
 800114e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001152:	6093      	str	r3, [r2, #8]

	// 3 cycles before sample
	ADC1->SMPR2 &= ~(ADC_SMPR2_SMP0 | ADC_SMPR2_SMP1 | ADC_SMPR2_SMP2);
 8001154:	4b6b      	ldr	r3, [pc, #428]	@ (8001304 <adc1_dma_config+0x25c>)
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	4a6a      	ldr	r2, [pc, #424]	@ (8001304 <adc1_dma_config+0x25c>)
 800115a:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800115e:	f023 0301 	bic.w	r3, r3, #1
 8001162:	6113      	str	r3, [r2, #16]

	// 3 conversions per sequence
	ADC1->SQR1 &= ~ADC_SQR1_L;
 8001164:	4b67      	ldr	r3, [pc, #412]	@ (8001304 <adc1_dma_config+0x25c>)
 8001166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001168:	4a66      	ldr	r2, [pc, #408]	@ (8001304 <adc1_dma_config+0x25c>)
 800116a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800116e:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC1->SQR1 |= ADC_SQR1_L_1;
 8001170:	4b64      	ldr	r3, [pc, #400]	@ (8001304 <adc1_dma_config+0x25c>)
 8001172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001174:	4a63      	ldr	r2, [pc, #396]	@ (8001304 <adc1_dma_config+0x25c>)
 8001176:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800117a:	62d3      	str	r3, [r2, #44]	@ 0x2c

	// channel 0 (PA0 --> ADC1_IN0) is first conversion
	ADC1->SQR3 &= ~ADC_SQR3_SQ1;
 800117c:	4b61      	ldr	r3, [pc, #388]	@ (8001304 <adc1_dma_config+0x25c>)
 800117e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001180:	4a60      	ldr	r2, [pc, #384]	@ (8001304 <adc1_dma_config+0x25c>)
 8001182:	f023 031f 	bic.w	r3, r3, #31
 8001186:	6353      	str	r3, [r2, #52]	@ 0x34

	// channel 1 (PA1 --> ADC1_IN1) is second conversion
	ADC1->SQR3 &= ~ADC_SQR3_SQ2;
 8001188:	4b5e      	ldr	r3, [pc, #376]	@ (8001304 <adc1_dma_config+0x25c>)
 800118a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800118c:	4a5d      	ldr	r2, [pc, #372]	@ (8001304 <adc1_dma_config+0x25c>)
 800118e:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 8001192:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC1->SQR3 |= ADC_SQR3_SQ2_0;
 8001194:	4b5b      	ldr	r3, [pc, #364]	@ (8001304 <adc1_dma_config+0x25c>)
 8001196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001198:	4a5a      	ldr	r2, [pc, #360]	@ (8001304 <adc1_dma_config+0x25c>)
 800119a:	f043 0320 	orr.w	r3, r3, #32
 800119e:	6353      	str	r3, [r2, #52]	@ 0x34

	// channel 4 (PA4 --> ADC1_IN4) is third conversion
	ADC1->SQR3 &= ~ADC_SQR3_SQ3;
 80011a0:	4b58      	ldr	r3, [pc, #352]	@ (8001304 <adc1_dma_config+0x25c>)
 80011a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011a4:	4a57      	ldr	r2, [pc, #348]	@ (8001304 <adc1_dma_config+0x25c>)
 80011a6:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80011aa:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC1->SQR3 |= ADC_SQR3_SQ3_2;
 80011ac:	4b55      	ldr	r3, [pc, #340]	@ (8001304 <adc1_dma_config+0x25c>)
 80011ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011b0:	4a54      	ldr	r2, [pc, #336]	@ (8001304 <adc1_dma_config+0x25c>)
 80011b2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011b6:	6353      	str	r3, [r2, #52]	@ 0x34


	/* DMA2 Channel 0, Stream 0 --> ADC1 */
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;		// enable DMA2 clock
 80011b8:	4b50      	ldr	r3, [pc, #320]	@ (80012fc <adc1_dma_config+0x254>)
 80011ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011bc:	4a4f      	ldr	r2, [pc, #316]	@ (80012fc <adc1_dma_config+0x254>)
 80011be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011c2:	6313      	str	r3, [r2, #48]	@ 0x30

	DMA2_Stream0->CR &= ~DMA_SxCR_EN;		// disable stream
 80011c4:	4b51      	ldr	r3, [pc, #324]	@ (800130c <adc1_dma_config+0x264>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a50      	ldr	r2, [pc, #320]	@ (800130c <adc1_dma_config+0x264>)
 80011ca:	f023 0301 	bic.w	r3, r3, #1
 80011ce:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream0->CR & DMA_SxCR_EN);	// wait for stream to disable
 80011d0:	bf00      	nop
 80011d2:	4b4e      	ldr	r3, [pc, #312]	@ (800130c <adc1_dma_config+0x264>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1f9      	bne.n	80011d2 <adc1_dma_config+0x12a>

	DMA2_Stream0->PAR = (uint32_t)&(ADC1->DR);// peripheral address
 80011de:	4b4b      	ldr	r3, [pc, #300]	@ (800130c <adc1_dma_config+0x264>)
 80011e0:	4a4b      	ldr	r2, [pc, #300]	@ (8001310 <adc1_dma_config+0x268>)
 80011e2:	609a      	str	r2, [r3, #8]
	DMA2_Stream0->M0AR = (uint32_t)stream0;	// destination memory address (CT = 0)
 80011e4:	4b49      	ldr	r3, [pc, #292]	@ (800130c <adc1_dma_config+0x264>)
 80011e6:	4a4b      	ldr	r2, [pc, #300]	@ (8001314 <adc1_dma_config+0x26c>)
 80011e8:	60da      	str	r2, [r3, #12]
	DMA2_Stream0->M1AR = (uint32_t)stream1;	// destination memory address (CT = 1)
 80011ea:	4b48      	ldr	r3, [pc, #288]	@ (800130c <adc1_dma_config+0x264>)
 80011ec:	4a4a      	ldr	r2, [pc, #296]	@ (8001318 <adc1_dma_config+0x270>)
 80011ee:	611a      	str	r2, [r3, #16]
	DMA2_Stream0->NDTR = BLOCK_SIZE;		// number of units to be transmitted
 80011f0:	4b46      	ldr	r3, [pc, #280]	@ (800130c <adc1_dma_config+0x264>)
 80011f2:	2290      	movs	r2, #144	@ 0x90
 80011f4:	605a      	str	r2, [r3, #4]

	DMA2_Stream0->CR &= ~DMA_SxCR_CHSEL;	// channel 0 selected
 80011f6:	4b45      	ldr	r3, [pc, #276]	@ (800130c <adc1_dma_config+0x264>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a44      	ldr	r2, [pc, #272]	@ (800130c <adc1_dma_config+0x264>)
 80011fc:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8001200:	6013      	str	r3, [r2, #0]

	DMA2_Stream0->CR &= ~DMA_SxCR_PFCTRL;	// DMA is the flow controller
 8001202:	4b42      	ldr	r3, [pc, #264]	@ (800130c <adc1_dma_config+0x264>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a41      	ldr	r2, [pc, #260]	@ (800130c <adc1_dma_config+0x264>)
 8001208:	f023 0320 	bic.w	r3, r3, #32
 800120c:	6013      	str	r3, [r2, #0]

	// priority level: medium
	DMA2_Stream0->CR |= DMA_SxCR_PL_0;
 800120e:	4b3f      	ldr	r3, [pc, #252]	@ (800130c <adc1_dma_config+0x264>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a3e      	ldr	r2, [pc, #248]	@ (800130c <adc1_dma_config+0x264>)
 8001214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001218:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~DMA_SxCR_PL_1;
 800121a:	4b3c      	ldr	r3, [pc, #240]	@ (800130c <adc1_dma_config+0x264>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a3b      	ldr	r2, [pc, #236]	@ (800130c <adc1_dma_config+0x264>)
 8001220:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001224:	6013      	str	r3, [r2, #0]

	// disable direct mode
	// FIFO threshold of 1/2 before transfer
	DMA2_Stream0->FCR |= DMA_SxFCR_DMDIS;
 8001226:	4b39      	ldr	r3, [pc, #228]	@ (800130c <adc1_dma_config+0x264>)
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	4a38      	ldr	r2, [pc, #224]	@ (800130c <adc1_dma_config+0x264>)
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	6153      	str	r3, [r2, #20]
	DMA2_Stream0->FCR |= DMA_SxFCR_FTH_0;
 8001232:	4b36      	ldr	r3, [pc, #216]	@ (800130c <adc1_dma_config+0x264>)
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	4a35      	ldr	r2, [pc, #212]	@ (800130c <adc1_dma_config+0x264>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6153      	str	r3, [r2, #20]
	DMA2_Stream0->FCR &= ~DMA_SxFCR_FTH_1;
 800123e:	4b33      	ldr	r3, [pc, #204]	@ (800130c <adc1_dma_config+0x264>)
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	4a32      	ldr	r2, [pc, #200]	@ (800130c <adc1_dma_config+0x264>)
 8001244:	f023 0302 	bic.w	r3, r3, #2
 8001248:	6153      	str	r3, [r2, #20]

	// memory data size: half word (16 bits)
	DMA2_Stream0->CR |= DMA_SxCR_MSIZE_0;
 800124a:	4b30      	ldr	r3, [pc, #192]	@ (800130c <adc1_dma_config+0x264>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a2f      	ldr	r2, [pc, #188]	@ (800130c <adc1_dma_config+0x264>)
 8001250:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001254:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~DMA_SxCR_MSIZE_1;
 8001256:	4b2d      	ldr	r3, [pc, #180]	@ (800130c <adc1_dma_config+0x264>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a2c      	ldr	r2, [pc, #176]	@ (800130c <adc1_dma_config+0x264>)
 800125c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001260:	6013      	str	r3, [r2, #0]

	// peripheral data size: half word (16 bits)
	DMA2_Stream0->CR |= DMA_SxCR_PSIZE_0;
 8001262:	4b2a      	ldr	r3, [pc, #168]	@ (800130c <adc1_dma_config+0x264>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a29      	ldr	r2, [pc, #164]	@ (800130c <adc1_dma_config+0x264>)
 8001268:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800126c:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~DMA_SxCR_PSIZE_1;
 800126e:	4b27      	ldr	r3, [pc, #156]	@ (800130c <adc1_dma_config+0x264>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a26      	ldr	r2, [pc, #152]	@ (800130c <adc1_dma_config+0x264>)
 8001274:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001278:	6013      	str	r3, [r2, #0]

	// increment memory address after every transfer
	DMA2_Stream0->CR |= DMA_SxCR_MINC;
 800127a:	4b24      	ldr	r3, [pc, #144]	@ (800130c <adc1_dma_config+0x264>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a23      	ldr	r2, [pc, #140]	@ (800130c <adc1_dma_config+0x264>)
 8001280:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001284:	6013      	str	r3, [r2, #0]

	// disable peripheral address increment
	DMA2_Stream0->CR &= ~DMA_SxCR_PINC;
 8001286:	4b21      	ldr	r3, [pc, #132]	@ (800130c <adc1_dma_config+0x264>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a20      	ldr	r2, [pc, #128]	@ (800130c <adc1_dma_config+0x264>)
 800128c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001290:	6013      	str	r3, [r2, #0]

	// peripheral to memory data direction
	DMA2_Stream0->CR &= ~DMA_SxCR_DIR;
 8001292:	4b1e      	ldr	r3, [pc, #120]	@ (800130c <adc1_dma_config+0x264>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a1d      	ldr	r2, [pc, #116]	@ (800130c <adc1_dma_config+0x264>)
 8001298:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800129c:	6013      	str	r3, [r2, #0]

	// circular mode --> reload NDTR after every transfer complete
	DMA2_Stream0->CR |= DMA_SxCR_CIRC;
 800129e:	4b1b      	ldr	r3, [pc, #108]	@ (800130c <adc1_dma_config+0x264>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a1a      	ldr	r2, [pc, #104]	@ (800130c <adc1_dma_config+0x264>)
 80012a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012a8:	6013      	str	r3, [r2, #0]

	// double buffer mode; current target is memory 0 (DMA_SxM0AR)
	DMA2_Stream0->CR |= DMA_SxCR_DBM;
 80012aa:	4b18      	ldr	r3, [pc, #96]	@ (800130c <adc1_dma_config+0x264>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a17      	ldr	r2, [pc, #92]	@ (800130c <adc1_dma_config+0x264>)
 80012b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012b4:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~DMA_SxCR_CT;
 80012b6:	4b15      	ldr	r3, [pc, #84]	@ (800130c <adc1_dma_config+0x264>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a14      	ldr	r2, [pc, #80]	@ (800130c <adc1_dma_config+0x264>)
 80012bc:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80012c0:	6013      	str	r3, [r2, #0]


	DMA2_Stream0->CR |= DMA_SxCR_EN;		// enable DMA stream
 80012c2:	4b12      	ldr	r3, [pc, #72]	@ (800130c <adc1_dma_config+0x264>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a11      	ldr	r2, [pc, #68]	@ (800130c <adc1_dma_config+0x264>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6013      	str	r3, [r2, #0]

	ADC1->CR2 |= ADC_CR2_DMA;				// enable DMA
 80012ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001304 <adc1_dma_config+0x25c>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001304 <adc1_dma_config+0x25c>)
 80012d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012d8:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_DDS;				// DMA requests issued as long as DMA=1
 80012da:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <adc1_dma_config+0x25c>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	4a09      	ldr	r2, [pc, #36]	@ (8001304 <adc1_dma_config+0x25c>)
 80012e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012e4:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_ADON;				// turn on ADC
 80012e6:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <adc1_dma_config+0x25c>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	4a06      	ldr	r2, [pc, #24]	@ (8001304 <adc1_dma_config+0x25c>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6093      	str	r3, [r2, #8]
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020000 	.word	0x40020000
 8001304:	40012000 	.word	0x40012000
 8001308:	40012300 	.word	0x40012300
 800130c:	40026410 	.word	0x40026410
 8001310:	4001204c 	.word	0x4001204c
 8001314:	20000094 	.word	0x20000094
 8001318:	200001b4 	.word	0x200001b4

0800131c <tim2_trig_config>:

void tim2_trig_config(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;				// enable TIM2 clock
 8001320:	4b1d      	ldr	r3, [pc, #116]	@ (8001398 <tim2_trig_config+0x7c>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001324:	4a1c      	ldr	r2, [pc, #112]	@ (8001398 <tim2_trig_config+0x7c>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	6413      	str	r3, [r2, #64]	@ 0x40

	TIM2->CR1 &= ~TIM_CR1_DIR;			// upcounting
 800132c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001336:	f023 0310 	bic.w	r3, r3, #16
 800133a:	6013      	str	r3, [r2, #0]
	TIM2->PSC = 0;						// /1 prescaler
 800133c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001340:	2200      	movs	r2, #0
 8001342:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 2099;					// 40kHz frequency
 8001344:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001348:	f640 0233 	movw	r2, #2099	@ 0x833
 800134c:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM2->CR2 |= TIM_CR2_MMS_1;
 800134e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001358:	f043 0320 	orr.w	r3, r3, #32
 800135c:	6053      	str	r3, [r2, #4]
	TIM2->CR2 &= ~(TIM_CR2_MMS_0 | TIM_CR2_MMS_2);		// update event as TRGO
 800135e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001368:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 800136c:	6053      	str	r3, [r2, #4]

	TIM2->EGR |= TIM_EGR_UG;			// generate update event
 800136e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6153      	str	r3, [r2, #20]

	TIM2->CR1 |= TIM_CR1_CEN;			// enable counter
 800137e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6013      	str	r3, [r2, #0]
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	40023800 	.word	0x40023800

0800139c <stream_splice>:

void stream_splice(void)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < BLOCK_SIZE; i += 3)
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	e065      	b.n	8001474 <stream_splice+0xd8>
	{
		uint32_t ind = i / 3;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a37      	ldr	r2, [pc, #220]	@ (8001488 <stream_splice+0xec>)
 80013ac:	fba2 2303 	umull	r2, r3, r2, r3
 80013b0:	085b      	lsrs	r3, r3, #1
 80013b2:	603b      	str	r3, [r7, #0]

		// DMA is targeting M1AR ---> read from M0AR memory
		// TO DO: check ranges of mic0
		if (dma_tgt)
 80013b4:	4b35      	ldr	r3, [pc, #212]	@ (800148c <stream_splice+0xf0>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d02c      	beq.n	8001416 <stream_splice+0x7a>
		{
			mic0_samp[ind] = ((int16_t)stream0[i] - 2048) << 4;
 80013bc:	4a34      	ldr	r2, [pc, #208]	@ (8001490 <stream_splice+0xf4>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013c4:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	011b      	lsls	r3, r3, #4
 80013ce:	b219      	sxth	r1, r3
 80013d0:	4a30      	ldr	r2, [pc, #192]	@ (8001494 <stream_splice+0xf8>)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			mic1_samp[ind] = ((int16_t)stream0[i+1] - 2048) << 4;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3301      	adds	r3, #1
 80013dc:	4a2c      	ldr	r2, [pc, #176]	@ (8001490 <stream_splice+0xf4>)
 80013de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013e2:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	b21b      	sxth	r3, r3
 80013ea:	011b      	lsls	r3, r3, #4
 80013ec:	b219      	sxth	r1, r3
 80013ee:	4a2a      	ldr	r2, [pc, #168]	@ (8001498 <stream_splice+0xfc>)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			mic2_samp[ind] = ((int16_t)stream0[i+2] - 2048) << 4;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3302      	adds	r3, #2
 80013fa:	4a25      	ldr	r2, [pc, #148]	@ (8001490 <stream_splice+0xf4>)
 80013fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001400:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001404:	b29b      	uxth	r3, r3
 8001406:	b21b      	sxth	r3, r3
 8001408:	011b      	lsls	r3, r3, #4
 800140a:	b219      	sxth	r1, r3
 800140c:	4a23      	ldr	r2, [pc, #140]	@ (800149c <stream_splice+0x100>)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001414:	e02b      	b.n	800146e <stream_splice+0xd2>
		}
		else
		{
			mic0_samp[ind] = ((int16_t)stream1[i] - 2048) << 4;
 8001416:	4a22      	ldr	r2, [pc, #136]	@ (80014a0 <stream_splice+0x104>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800141e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001422:	b29b      	uxth	r3, r3
 8001424:	b21b      	sxth	r3, r3
 8001426:	011b      	lsls	r3, r3, #4
 8001428:	b219      	sxth	r1, r3
 800142a:	4a1a      	ldr	r2, [pc, #104]	@ (8001494 <stream_splice+0xf8>)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			mic1_samp[ind] = ((int16_t)stream1[i+1] - 2048) << 4;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3301      	adds	r3, #1
 8001436:	4a1a      	ldr	r2, [pc, #104]	@ (80014a0 <stream_splice+0x104>)
 8001438:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800143c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001440:	b29b      	uxth	r3, r3
 8001442:	b21b      	sxth	r3, r3
 8001444:	011b      	lsls	r3, r3, #4
 8001446:	b219      	sxth	r1, r3
 8001448:	4a13      	ldr	r2, [pc, #76]	@ (8001498 <stream_splice+0xfc>)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			mic2_samp[ind] = ((int16_t)stream1[i+2] - 2048) << 4;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3302      	adds	r3, #2
 8001454:	4a12      	ldr	r2, [pc, #72]	@ (80014a0 <stream_splice+0x104>)
 8001456:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800145a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800145e:	b29b      	uxth	r3, r3
 8001460:	b21b      	sxth	r3, r3
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	b219      	sxth	r1, r3
 8001466:	4a0d      	ldr	r2, [pc, #52]	@ (800149c <stream_splice+0x100>)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint32_t i = 0; i < BLOCK_SIZE; i += 3)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3303      	adds	r3, #3
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b8f      	cmp	r3, #143	@ 0x8f
 8001478:	d996      	bls.n	80013a8 <stream_splice+0xc>
		}
	}
}
 800147a:	bf00      	nop
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	aaaaaaab 	.word	0xaaaaaaab
 800148c:	200003f4 	.word	0x200003f4
 8001490:	20000094 	.word	0x20000094
 8001494:	200002d4 	.word	0x200002d4
 8001498:	20000334 	.word	0x20000334
 800149c:	20000394 	.word	0x20000394
 80014a0:	200001b4 	.word	0x200001b4

080014a4 <find_filter_peaks>:

void find_filter_peaks(q15_t * mic0_filtered, q15_t * mic1_filtered, q15_t * mic2_filtered,
						uint16_t * mic0_ind, uint16_t * mic1_ind, uint16_t * mic2_ind)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b087      	sub	sp, #28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
 80014b0:	603b      	str	r3, [r7, #0]
	*mic0_ind = 0;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	2200      	movs	r2, #0
 80014b6:	801a      	strh	r2, [r3, #0]
	*mic1_ind = 0;
 80014b8:	6a3b      	ldr	r3, [r7, #32]
 80014ba:	2200      	movs	r2, #0
 80014bc:	801a      	strh	r2, [r3, #0]
	*mic2_ind = 0;
 80014be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c0:	2200      	movs	r2, #0
 80014c2:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 1; i < DECIMATION_SIZE; i++)
 80014c4:	2301      	movs	r3, #1
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	e053      	b.n	8001572 <find_filter_peaks+0xce>
	{
		if (abs(mic0_filtered[i]) > abs(mic0_filtered[*mic0_ind]))
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	4413      	add	r3, r2
 80014d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	bfb8      	it	lt
 80014da:	425b      	neglt	r3, r3
 80014dc:	b29a      	uxth	r2, r3
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	68f9      	ldr	r1, [r7, #12]
 80014e6:	440b      	add	r3, r1
 80014e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bfb8      	it	lt
 80014f0:	425b      	neglt	r3, r3
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d903      	bls.n	8001500 <find_filter_peaks+0x5c>
		{
			*mic0_ind = i;
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	801a      	strh	r2, [r3, #0]
		}
		if (abs(mic1_filtered[i]) > abs(mic1_filtered[*mic1_ind]))
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	68ba      	ldr	r2, [r7, #8]
 8001506:	4413      	add	r3, r2
 8001508:	f9b3 3000 	ldrsh.w	r3, [r3]
 800150c:	2b00      	cmp	r3, #0
 800150e:	bfb8      	it	lt
 8001510:	425b      	neglt	r3, r3
 8001512:	b29a      	uxth	r2, r3
 8001514:	6a3b      	ldr	r3, [r7, #32]
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	68b9      	ldr	r1, [r7, #8]
 800151c:	440b      	add	r3, r1
 800151e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001522:	2b00      	cmp	r3, #0
 8001524:	bfb8      	it	lt
 8001526:	425b      	neglt	r3, r3
 8001528:	b29b      	uxth	r3, r3
 800152a:	429a      	cmp	r2, r3
 800152c:	d903      	bls.n	8001536 <find_filter_peaks+0x92>
		{
			*mic1_ind = i;
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	b29a      	uxth	r2, r3
 8001532:	6a3b      	ldr	r3, [r7, #32]
 8001534:	801a      	strh	r2, [r3, #0]
		}
		if (abs(mic2_filtered[i]) > abs(mic2_filtered[*mic2_ind]))
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001542:	2b00      	cmp	r3, #0
 8001544:	bfb8      	it	lt
 8001546:	425b      	neglt	r3, r3
 8001548:	b29a      	uxth	r2, r3
 800154a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	440b      	add	r3, r1
 8001554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001558:	2b00      	cmp	r3, #0
 800155a:	bfb8      	it	lt
 800155c:	425b      	neglt	r3, r3
 800155e:	b29b      	uxth	r3, r3
 8001560:	429a      	cmp	r2, r3
 8001562:	d903      	bls.n	800156c <find_filter_peaks+0xc8>
		{
			*mic2_ind = i;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	b29a      	uxth	r2, r3
 8001568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156a:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 1; i < DECIMATION_SIZE; i++)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	3301      	adds	r3, #1
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	2b0b      	cmp	r3, #11
 8001576:	d9a8      	bls.n	80014ca <find_filter_peaks+0x26>
		}
	}
}
 8001578:	bf00      	nop
 800157a:	bf00      	nop
 800157c:	371c      	adds	r7, #28
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <compute_event_pos>:

void compute_event_pos(float * x, float * y, float mic0_x, float mic0_y,
					   float mic1_x, float mic1_y, float mic2_x, float mic2_y,
					   float mic1_delay, float mic2_delay)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	ed2d 8b02 	vpush	{d8}
 800158e:	b0a0      	sub	sp, #128	@ 0x80
 8001590:	af00      	add	r7, sp, #0
 8001592:	6278      	str	r0, [r7, #36]	@ 0x24
 8001594:	6239      	str	r1, [r7, #32]
 8001596:	ed87 0a07 	vstr	s0, [r7, #28]
 800159a:	edc7 0a06 	vstr	s1, [r7, #24]
 800159e:	ed87 1a05 	vstr	s2, [r7, #20]
 80015a2:	edc7 1a04 	vstr	s3, [r7, #16]
 80015a6:	ed87 2a03 	vstr	s4, [r7, #12]
 80015aa:	edc7 2a02 	vstr	s5, [r7, #8]
 80015ae:	ed87 3a01 	vstr	s6, [r7, #4]
 80015b2:	edc7 3a00 	vstr	s7, [r7]

	for (uint8_t i = 0; i < 5; i++)
 80015b6:	2300      	movs	r3, #0
 80015b8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80015bc:	e1e2      	b.n	8001984 <compute_event_pos+0x3fc>
	{
		// distances from mic1 and mic2 to mic0
		float d10 = SPEED_OF_SOUND * mic1_delay;
 80015be:	edd7 7a01 	vldr	s15, [r7, #4]
 80015c2:	ed9f 7aef 	vldr	s14, [pc, #956]	@ 8001980 <compute_event_pos+0x3f8>
 80015c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ca:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
		float d20 = SPEED_OF_SOUND * mic2_delay;
 80015ce:	edd7 7a00 	vldr	s15, [r7]
 80015d2:	ed9f 7aeb 	vldr	s14, [pc, #940]	@ 8001980 <compute_event_pos+0x3f8>
 80015d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015da:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

		// compute radii of guesses
		float r0 = sqrtf(powf(*x - mic0_x, 2) + powf(*y - mic0_y, 2));
 80015de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e0:	ed93 7a00 	vldr	s14, [r3]
 80015e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80015e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ec:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80015f0:	eeb0 0a67 	vmov.f32	s0, s15
 80015f4:	f000 fdde 	bl	80021b4 <powf>
 80015f8:	eeb0 8a40 	vmov.f32	s16, s0
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	ed93 7a00 	vldr	s14, [r3]
 8001602:	edd7 7a06 	vldr	s15, [r7, #24]
 8001606:	ee77 7a67 	vsub.f32	s15, s14, s15
 800160a:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800160e:	eeb0 0a67 	vmov.f32	s0, s15
 8001612:	f000 fdcf 	bl	80021b4 <powf>
 8001616:	eef0 7a40 	vmov.f32	s15, s0
 800161a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800161e:	eeb0 0a67 	vmov.f32	s0, s15
 8001622:	f000 fe1f 	bl	8002264 <sqrtf>
 8001626:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
		float r1 = sqrtf(powf(*x - mic1_x, 2) + powf(*y - mic1_y, 2));
 800162a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162c:	ed93 7a00 	vldr	s14, [r3]
 8001630:	edd7 7a05 	vldr	s15, [r7, #20]
 8001634:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001638:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800163c:	eeb0 0a67 	vmov.f32	s0, s15
 8001640:	f000 fdb8 	bl	80021b4 <powf>
 8001644:	eeb0 8a40 	vmov.f32	s16, s0
 8001648:	6a3b      	ldr	r3, [r7, #32]
 800164a:	ed93 7a00 	vldr	s14, [r3]
 800164e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001656:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800165a:	eeb0 0a67 	vmov.f32	s0, s15
 800165e:	f000 fda9 	bl	80021b4 <powf>
 8001662:	eef0 7a40 	vmov.f32	s15, s0
 8001666:	ee78 7a27 	vadd.f32	s15, s16, s15
 800166a:	eeb0 0a67 	vmov.f32	s0, s15
 800166e:	f000 fdf9 	bl	8002264 <sqrtf>
 8001672:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
		float r2 = sqrtf(powf(*x - mic2_x, 2) + powf(*y - mic2_y, 2));
 8001676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001678:	ed93 7a00 	vldr	s14, [r3]
 800167c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001684:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8001688:	eeb0 0a67 	vmov.f32	s0, s15
 800168c:	f000 fd92 	bl	80021b4 <powf>
 8001690:	eeb0 8a40 	vmov.f32	s16, s0
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	ed93 7a00 	vldr	s14, [r3]
 800169a:	edd7 7a02 	vldr	s15, [r7, #8]
 800169e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016a2:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80016a6:	eeb0 0a67 	vmov.f32	s0, s15
 80016aa:	f000 fd83 	bl	80021b4 <powf>
 80016ae:	eef0 7a40 	vmov.f32	s15, s0
 80016b2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80016b6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ba:	f000 fdd3 	bl	8002264 <sqrtf>
 80016be:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68

		// compute residuals (error)
		// [f]
		float res1 = r1 - r0 - d10;
 80016c2:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 80016c6:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80016ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016ce:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80016d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d6:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
		float res2 = r2 - r0 - d20;
 80016da:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 80016de:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80016e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016e6:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80016ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ee:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

		// create Jacobian
		float j11 = (*x - mic1_x) / r1 - (*x - mic0_x) / r0;
 80016f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f4:	ed93 7a00 	vldr	s14, [r3]
 80016f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80016fc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001700:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001704:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170a:	edd3 6a00 	vldr	s13, [r3]
 800170e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001712:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8001716:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 800171a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800171e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001722:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		float j12 = (*y - mic1_y) / r1 - (*y - mic0_y) / r0;
 8001726:	6a3b      	ldr	r3, [r7, #32]
 8001728:	ed93 7a00 	vldr	s14, [r3]
 800172c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001730:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001734:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800173c:	6a3b      	ldr	r3, [r7, #32]
 800173e:	edd3 6a00 	vldr	s13, [r3]
 8001742:	edd7 7a06 	vldr	s15, [r7, #24]
 8001746:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800174a:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 800174e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001752:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001756:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		float j21 = (*x - mic2_x) / r2 - (*x - mic0_x) / r0;
 800175a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175c:	ed93 7a00 	vldr	s14, [r3]
 8001760:	edd7 7a03 	vldr	s15, [r7, #12]
 8001764:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001768:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800176c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001772:	edd3 6a00 	vldr	s13, [r3]
 8001776:	edd7 7a07 	vldr	s15, [r7, #28]
 800177a:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800177e:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 8001782:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001786:	ee77 7a67 	vsub.f32	s15, s14, s15
 800178a:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		float j22 = (*y - mic2_y) / r2 - (*y - mic0_y) / r0;
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	ed93 7a00 	vldr	s14, [r3]
 8001794:	edd7 7a02 	vldr	s15, [r7, #8]
 8001798:	ee77 6a67 	vsub.f32	s13, s14, s15
 800179c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80017a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	edd3 6a00 	vldr	s13, [r3]
 80017aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80017ae:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80017b2:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 80017b6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80017ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017be:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

		// ([J]^T)[J]
		float prod11 = j11 * j11 + j21 * j21;
 80017c2:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80017c6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80017ca:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80017ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d6:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		float prod12 = j11 * j12 + j21 * j22;
 80017da:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80017de:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80017e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017e6:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 80017ea:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80017ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f6:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
		float prod21 = j12 * j11 + j22 * j21;
 80017fa:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80017fe:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001802:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001806:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 800180a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800180e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001816:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		float prod22 = j12 * j12 + j22 * j22;
 800181a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800181e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001822:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001826:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800182a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800182e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

		// ([J]^T)[f]
		float g1 = j11 * res1 + j21 * res2;
 8001832:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001836:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800183a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800183e:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8001842:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001846:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800184a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800184e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		float g2 = j12 * res1 + j22 * res2;
 8001852:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001856:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800185a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800185e:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8001862:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001866:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800186a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// solve system
		// ([J]^T)[J]delta = -([J]^T)[f]
		// delta = inv(([J]^T)[J]) * (-([J]^T)[f])
		float det = prod11 * prod22 - prod12 * prod21;
 8001872:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001876:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800187a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800187e:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8001882:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001886:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800188a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800188e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		if (fabsf(det) < 1e-6) break;
 8001892:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001896:	eef0 7ae7 	vabs.f32	s15, s15
 800189a:	ee17 0a90 	vmov	r0, s15
 800189e:	f7fe fdff 	bl	80004a0 <__aeabi_f2d>
 80018a2:	a333      	add	r3, pc, #204	@ (adr r3, 8001970 <compute_event_pos+0x3e8>)
 80018a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a8:	f7ff f8c4 	bl	8000a34 <__aeabi_dcmplt>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d16e      	bne.n	8001990 <compute_event_pos+0x408>

		float dx = (-prod22 * g1 + prod12 * g2) / det;
 80018b2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80018b6:	eeb1 7a67 	vneg.f32	s14, s15
 80018ba:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80018be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018c2:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80018c6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80018ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ce:	ee77 6a27 	vadd.f32	s13, s14, s15
 80018d2:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80018d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018da:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		float dy = (prod21 * g1 - prod11 * g1) / det;
 80018de:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80018e2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80018e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018ea:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 80018ee:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80018f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018f6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80018fa:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80018fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001902:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		*x += dx;
 8001906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001908:	ed93 7a00 	vldr	s14, [r3]
 800190c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001910:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001916:	edc3 7a00 	vstr	s15, [r3]
		*y += dy;
 800191a:	6a3b      	ldr	r3, [r7, #32]
 800191c:	ed93 7a00 	vldr	s14, [r3]
 8001920:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	edc3 7a00 	vstr	s15, [r3]

		if (sqrtf(dx * dx + dy * dy) < 1e-5) break;
 800192e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001932:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001936:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800193a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800193e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001942:	eeb0 0a67 	vmov.f32	s0, s15
 8001946:	f000 fc8d 	bl	8002264 <sqrtf>
 800194a:	ee10 3a10 	vmov	r3, s0
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fda6 	bl	80004a0 <__aeabi_f2d>
 8001954:	a308      	add	r3, pc, #32	@ (adr r3, 8001978 <compute_event_pos+0x3f0>)
 8001956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195a:	f7ff f86b 	bl	8000a34 <__aeabi_dcmplt>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d117      	bne.n	8001994 <compute_event_pos+0x40c>
	for (uint8_t i = 0; i < 5; i++)
 8001964:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001968:	3301      	adds	r3, #1
 800196a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800196e:	e009      	b.n	8001984 <compute_event_pos+0x3fc>
 8001970:	a0b5ed8d 	.word	0xa0b5ed8d
 8001974:	3eb0c6f7 	.word	0x3eb0c6f7
 8001978:	88e368f1 	.word	0x88e368f1
 800197c:	3ee4f8b5 	.word	0x3ee4f8b5
 8001980:	43ab8000 	.word	0x43ab8000
 8001984:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001988:	2b04      	cmp	r3, #4
 800198a:	f67f ae18 	bls.w	80015be <compute_event_pos+0x36>
	}

}
 800198e:	e002      	b.n	8001996 <compute_event_pos+0x40e>
		if (fabsf(det) < 1e-6) break;
 8001990:	bf00      	nop
 8001992:	e000      	b.n	8001996 <compute_event_pos+0x40e>
		if (sqrtf(dx * dx + dy * dy) < 1e-5) break;
 8001994:	bf00      	nop
}
 8001996:	bf00      	nop
 8001998:	3780      	adds	r7, #128	@ 0x80
 800199a:	46bd      	mov	sp, r7
 800199c:	ecbd 8b02 	vpop	{d8}
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop

080019a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <NMI_Handler+0x4>

080019ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <HardFault_Handler+0x4>

080019b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <MemManage_Handler+0x4>

080019bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <BusFault_Handler+0x4>

080019c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <UsageFault_Handler+0x4>

080019cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019fa:	f000 fa25 	bl	8001e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a08:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <SystemInit+0x20>)
 8001a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a0e:	4a05      	ldr	r2, [pc, #20]	@ (8001a24 <SystemInit+0x20>)
 8001a10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a2c:	f7ff ffea 	bl	8001a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a30:	480c      	ldr	r0, [pc, #48]	@ (8001a64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a32:	490d      	ldr	r1, [pc, #52]	@ (8001a68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a34:	4a0d      	ldr	r2, [pc, #52]	@ (8001a6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a38:	e002      	b.n	8001a40 <LoopCopyDataInit>

08001a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a3e:	3304      	adds	r3, #4

08001a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a44:	d3f9      	bcc.n	8001a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a46:	4a0a      	ldr	r2, [pc, #40]	@ (8001a70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a48:	4c0a      	ldr	r4, [pc, #40]	@ (8001a74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a4c:	e001      	b.n	8001a52 <LoopFillZerobss>

08001a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a50:	3204      	adds	r2, #4

08001a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a54:	d3fb      	bcc.n	8001a4e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001a56:	f000 fb89 	bl	800216c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a5a:	f7ff f865 	bl	8000b28 <main>
  bx  lr    
 8001a5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a60:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a68:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001a6c:	08002a14 	.word	0x08002a14
  ldr r2, =_sbss
 8001a70:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001a74:	2000053c 	.word	0x2000053c

08001a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a78:	e7fe      	b.n	8001a78 <ADC_IRQHandler>

08001a7a <arm_fir_decimate_fast_q15>:
ARM_DSP_ATTRIBUTE void arm_fir_decimate_fast_q15(
  const arm_fir_decimate_instance_q15 * S,
  const q15_t * pSrc,
        q15_t * pDst,
        uint32_t blockSize)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b0b5      	sub	sp, #212	@ 0xd4
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	60f8      	str	r0, [r7, #12]
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	603b      	str	r3, [r7, #0]
        q15_t *pState = S->pState;                     /* State pointer */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  const q15_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        q31_t x0, x1, c0;                              /* Temporary variables to hold state and coefficient values */
        q31_t sum0;                                    /* Accumulators */
        q31_t acc0, acc1;
        q15_t *px0, *px1;
        uint32_t blkCntN3;
        uint32_t numTaps = S->numTaps;                 /* Number of taps */
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	885b      	ldrh	r3, [r3, #2]
 8001a9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        uint32_t i, blkCnt, tapCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	fbb3 f3f2 	udiv	r3, r3, r2
 8001aaa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        q31_t c1;                                      /* Temporary variables to hold state and coefficient values */
#endif

  /* S->pState buffer contains previous frame (numTaps - 1) samples */
  /* pStateCur points to the location where the new input data should be written */
  pStateCur = S->pState + (numTaps - 1U);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ab6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8001aba:	3b01      	subs	r3, #1
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Total number of output samples to be computed */
  blkCnt = outBlockSize / 2;
 8001ac2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ac6:	085b      	lsrs	r3, r3, #1
 8001ac8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  blkCntN3 = outBlockSize - (2 * blkCnt);
 8001acc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  while (blkCnt > 0U)
 8001adc:	e0a0      	b.n	8001c20 <arm_fir_decimate_fast_q15+0x1a6>
  {
    /* Copy 2 * decimation factor number of new input samples into the state buffer */
    i = S->M * 2;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

    do
    {
      *pStateCur++ = *pSrc++;
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	1c93      	adds	r3, r2, #2
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af0:	1c99      	adds	r1, r3, #2
 8001af2:	6279      	str	r1, [r7, #36]	@ 0x24
 8001af4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001af8:	801a      	strh	r2, [r3, #0]

    } while (--i);
 8001afa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001afe:	3b01      	subs	r3, #1
 8001b00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001b04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1ed      	bne.n	8001ae8 <arm_fir_decimate_fast_q15+0x6e>

    /* Set accumulator to zero */
    acc0 = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    acc1 = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

    /* Initialize state pointer for all the samples */
    px0 = pState;
 8001b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b1a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    px1 = pState + S->M;
 8001b1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	4413      	add	r3, r2
 8001b28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

    /* Initialize coeff pointer */
    pb = pCoeffs;
 8001b2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001b30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    tapCnt = numTaps % 0x4U;

#else

    /* Initialize tapCnt with number of taps */
    tapCnt = numTaps;
 8001b34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001b38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (tapCnt > 0U)
 8001b3c:	e041      	b.n	8001bc2 <arm_fir_decimate_fast_q15+0x148>
    {
      /* Read coefficients */
      c0 = *pb++;
 8001b3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001b42:	1c9a      	adds	r2, r3, #2
 8001b44:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

      /* Fetch state variables for acc0, acc1 */
      x0 = *px0++;
 8001b50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b54:	1c9a      	adds	r2, r3, #2
 8001b56:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8001b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      x1 = *px1++;
 8001b62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b66:	1c9a      	adds	r2, r3, #2
 8001b68:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001b6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b70:	677b      	str	r3, [r7, #116]	@ 0x74

      /* Perform the multiply-accumulate */
      acc0 = __SMLAD(x0, c0, acc0);
 8001b72:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8001b76:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001b7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001b7e:	6639      	str	r1, [r7, #96]	@ 0x60
 8001b80:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001b82:	65bb      	str	r3, [r7, #88]	@ 0x58

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001b84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b86:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001b88:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001b8a:	fb23 1302 	smlad	r3, r3, r2, r1
 8001b8e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8001b90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
      acc1 = __SMLAD(x1, c0, acc1);
 8001b96:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8001b98:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001b9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001ba0:	6739      	str	r1, [r7, #112]	@ 0x70
 8001ba2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001ba4:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001ba6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ba8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001baa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001bac:	fb23 1302 	smlad	r3, r3, r2, r1
 8001bb0:	667b      	str	r3, [r7, #100]	@ 0x64
  return(result);
 8001bb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001bb4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

      /* Decrement loop counter */
      tapCnt--;
 8001bb8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    while (tapCnt > 0U)
 8001bc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1b9      	bne.n	8001b3e <arm_fir_decimate_fast_q15+0xc4>
    }

    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + S->M * 2;
 8001bca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Store filter output, smlad returns the values in 2.14 format */
    /* so downsacle by 15 to get output in 1.15 */
    *pDst++ = (q15_t) (__SSAT((acc0 >> 15), 16));
 8001bd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001bda:	13db      	asrs	r3, r3, #15
 8001bdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001be0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001be4:	f303 030f 	ssat	r3, #16, r3
 8001be8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001bec:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	1c9a      	adds	r2, r3, #2
 8001bf4:	607a      	str	r2, [r7, #4]
 8001bf6:	b20a      	sxth	r2, r1
 8001bf8:	801a      	strh	r2, [r3, #0]
    *pDst++ = (q15_t) (__SSAT((acc1 >> 15), 16));
 8001bfa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001bfe:	13db      	asrs	r3, r3, #15
 8001c00:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001c02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001c04:	f303 030f 	ssat	r3, #16, r3
 8001c08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001c0a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	1c9a      	adds	r2, r3, #2
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	b20a      	sxth	r2, r1
 8001c14:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    blkCnt--;
 8001c16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  while (blkCnt > 0U)
 8001c20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f47f af5a 	bne.w	8001ade <arm_fir_decimate_fast_q15+0x64>
  }

  while (blkCntN3 > 0U)
 8001c2a:	e06e      	b.n	8001d0a <arm_fir_decimate_fast_q15+0x290>
  {
    /* Copy decimation factor number of new input samples into the state buffer */
    i = S->M;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

    do
    {
      *pStateCur++ = *pSrc++;
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	1c93      	adds	r3, r2, #2
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3c:	1c99      	adds	r1, r3, #2
 8001c3e:	6279      	str	r1, [r7, #36]	@ 0x24
 8001c40:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c44:	801a      	strh	r2, [r3, #0]

    } while (--i);
 8001c46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001c50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1ed      	bne.n	8001c34 <arm_fir_decimate_fast_q15+0x1ba>

    /* Set accumulator to zero */
    sum0 = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    /* Initialize state pointer */
    px = pState;
 8001c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

    /* Initialize coeff pointer */
    pb = pCoeffs;
 8001c64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    tapCnt = numTaps % 0x4U;

#else

    /* Initialize tapCnt with number of taps */
    tapCnt = numTaps;
 8001c6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001c70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (tapCnt > 0U)
 8001c74:	e028      	b.n	8001cc8 <arm_fir_decimate_fast_q15+0x24e>
    {
      /* Read coefficients */
      c0 = *pb++;
 8001c76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001c7a:	1c9a      	adds	r2, r3, #2
 8001c7c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001c80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

      /* Fetch 1 state variable */
      x0 = *px++;
 8001c88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001c8c:	1c9a      	adds	r2, r3, #2
 8001c8e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001c92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      /* Perform the multiply-accumulate */
      sum0 = __SMLAD(x0, c0, sum0);
 8001c9a:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8001c9e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001ca2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ca6:	6539      	str	r1, [r7, #80]	@ 0x50
 8001ca8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001caa:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001cac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cb0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001cb2:	fb23 1302 	smlad	r3, r3, r2, r1
 8001cb6:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8001cb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      /* Decrement loop counter */
      tapCnt--;
 8001cbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    while (tapCnt > 0U)
 8001cc8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1d2      	bne.n	8001c76 <arm_fir_decimate_fast_q15+0x1fc>
    }

    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + S->M;
 8001cd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Store filter output, smlad returns the values in 2.14 format */
    /* so downsacle by 15 to get output in 1.15 */
    *pDst++ = (q15_t) (__SSAT((sum0 >> 15), 16));
 8001cdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ce0:	13db      	asrs	r3, r3, #15
 8001ce2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001ce6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001cea:	f303 030f 	ssat	r3, #16, r3
 8001cee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001cf2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	1c9a      	adds	r2, r3, #2
 8001cfa:	607a      	str	r2, [r7, #4]
 8001cfc:	b20a      	sxth	r2, r1
 8001cfe:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    blkCntN3--;
 8001d00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d04:	3b01      	subs	r3, #1
 8001d06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  while (blkCntN3 > 0U)
 8001d0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d18c      	bne.n	8001c2c <arm_fir_decimate_fast_q15+0x1b2>
  /* Processing is complete.
     Now copy the last numTaps - 1 samples to the satrt of the state buffer.
     This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCur = S->pState;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24

  i = (numTaps - 1U) >> 2U;
 8001d18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	089b      	lsrs	r3, r3, #2
 8001d20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  /* copy data */
  while (i > 0U)
 8001d24:	e038      	b.n	8001d98 <arm_fir_decimate_fast_q15+0x31e>
  {
    write_q15x2_ia (&pStateCur, read_q15x2_ia (&pState));
 8001d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d28:	3304      	adds	r3, #4
 8001d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d2e:	3b04      	subs	r3, #4
 8001d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  q15_t const * pQ15)
{
  q31_t val;

#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (&val, pQ15, 4);
 8001d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	623b      	str	r3, [r7, #32]
#else
  val = (pQ15[1] << 16) | (pQ15[0] & 0x0FFFF) ;
#endif

  return (val);
 8001d38:	6a3b      	ldr	r3, [r7, #32]
 8001d3a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001d3e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001d40:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE void write_q15x2_ia (
  q15_t ** pQ15,
  q31_t    value)
{
  q31_t val = value;
 8001d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d44:	61fb      	str	r3, [r7, #28]
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ15, &val, 4);
 8001d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	69fa      	ldr	r2, [r7, #28]
 8001d4c:	601a      	str	r2, [r3, #0]
#else
  (*pQ15)[0] = (q15_t)(val & 0x0FFFF);
  (*pQ15)[1] = (q15_t)((val >> 16) & 0x0FFFF);
#endif

 *pQ15 += 2;
 8001d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	1d1a      	adds	r2, r3, #4
 8001d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d56:	601a      	str	r2, [r3, #0]
}
 8001d58:	bf00      	nop
    write_q15x2_ia (&pStateCur, read_q15x2_ia (&pState));
 8001d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d62:	3b04      	subs	r3, #4
 8001d64:	63bb      	str	r3, [r7, #56]	@ 0x38
  memcpy (&val, pQ15, 4);
 8001d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	61bb      	str	r3, [r7, #24]
  return (val);
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001d72:	643a      	str	r2, [r7, #64]	@ 0x40
 8001d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  q31_t val = value;
 8001d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d78:	617b      	str	r3, [r7, #20]
  memcpy (*pQ15, &val, 4);
 8001d7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8001d82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	1d1a      	adds	r2, r3, #4
 8001d88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d8a:	601a      	str	r2, [r3, #0]
}
 8001d8c:	bf00      	nop

    /* Decrement loop counter */
    i--;
 8001d8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d92:	3b01      	subs	r3, #1
 8001d94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  while (i > 0U)
 8001d98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1c2      	bne.n	8001d26 <arm_fir_decimate_fast_q15+0x2ac>
  }

  i = (numTaps - 1U) % 0x04U;
 8001da0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001da4:	3b01      	subs	r3, #1
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  /* Copy data */
  while (i > 0U)
 8001dae:	e00d      	b.n	8001dcc <arm_fir_decimate_fast_q15+0x352>
  {
    *pStateCur++ = *pState++;
 8001db0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001db2:	1c93      	adds	r3, r2, #2
 8001db4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db8:	1c99      	adds	r1, r3, #2
 8001dba:	6279      	str	r1, [r7, #36]	@ 0x24
 8001dbc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001dc0:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    i--;
 8001dc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  while (i > 0U)
 8001dcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1ed      	bne.n	8001db0 <arm_fir_decimate_fast_q15+0x336>
  }

}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	37d4      	adds	r7, #212	@ 0xd4
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <arm_fir_decimate_init_q15>:
        uint16_t numTaps,
        uint8_t M,
  const q15_t * pCoeffs,
        q15_t * pState,
        uint32_t blockSize)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b086      	sub	sp, #24
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	607b      	str	r3, [r7, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	817b      	strh	r3, [r7, #10]
 8001df0:	4613      	mov	r3, r2
 8001df2:	727b      	strb	r3, [r7, #9]
  arm_status status;

  /* The size of the input block must be a multiple of the decimation factor */
  if ((blockSize % M) != 0U)
 8001df4:	7a7a      	ldrb	r2, [r7, #9]
 8001df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df8:	fbb3 f1f2 	udiv	r1, r3, r2
 8001dfc:	fb01 f202 	mul.w	r2, r1, r2
 8001e00:	1a9b      	subs	r3, r3, r2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d002      	beq.n	8001e0c <arm_fir_decimate_init_q15+0x2a>
  {
    /* Set status as ARM_MATH_LENGTH_ERROR */
    status = ARM_MATH_LENGTH_ERROR;
 8001e06:	23fe      	movs	r3, #254	@ 0xfe
 8001e08:	75fb      	strb	r3, [r7, #23]
 8001e0a:	e017      	b.n	8001e3c <arm_fir_decimate_init_q15+0x5a>
  }
  else
  {
    /* Assign filter taps */
    S->numTaps = numTaps;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	897a      	ldrh	r2, [r7, #10]
 8001e10:	805a      	strh	r2, [r3, #2]

    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	605a      	str	r2, [r3, #4]

    /* Clear the state buffer. The size is always (blockSize + numTaps - 1) */
    memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(q15_t));
 8001e18:	897a      	ldrh	r2, [r7, #10]
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	461a      	mov	r2, r3
 8001e24:	2100      	movs	r1, #0
 8001e26:	6a38      	ldr	r0, [r7, #32]
 8001e28:	f000 f992 	bl	8002150 <memset>

    /* Assign state pointer */
    S->pState = pState;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6a3a      	ldr	r2, [r7, #32]
 8001e30:	609a      	str	r2, [r3, #8]

    /* Assign Decimation Factor */
    S->M = M;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	7a7a      	ldrb	r2, [r7, #9]
 8001e36:	701a      	strb	r2, [r3, #0]

    status = ARM_MATH_SUCCESS;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 8001e3c:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <HAL_IncTick+0x20>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <HAL_IncTick+0x24>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	4a04      	ldr	r2, [pc, #16]	@ (8001e6c <HAL_IncTick+0x24>)
 8001e5a:	6013      	str	r3, [r2, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	200003fc 	.word	0x200003fc

08001e70 <uart2_set_fcpu>:

unsigned long f_cpu;

/** Functions ----------------------------------------------------------------*/
void uart2_set_fcpu(unsigned long freq)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	f_cpu = freq;
 8001e78:	4a04      	ldr	r2, [pc, #16]	@ (8001e8c <uart2_set_fcpu+0x1c>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6013      	str	r3, [r2, #0]
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20000400 	.word	0x20000400

08001e90 <uart2_dma1_config>:

	return USART_OK;
}

uart_err_type_t uart2_dma1_config(uint32_t baud, uart_data_type_t ndata, uart_stop_type_t nstop)
{
 8001e90:	b5b0      	push	{r4, r5, r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	72fb      	strb	r3, [r7, #11]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	72bb      	strb	r3, [r7, #10]
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;	// enable UART2 clock
 8001ea0:	4b85      	ldr	r3, [pc, #532]	@ (80020b8 <uart2_dma1_config+0x228>)
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea4:	4a84      	ldr	r2, [pc, #528]	@ (80020b8 <uart2_dma1_config+0x228>)
 8001ea6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eaa:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;	// enable GPIOA clock
 8001eac:	4b82      	ldr	r3, [pc, #520]	@ (80020b8 <uart2_dma1_config+0x228>)
 8001eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb0:	4a81      	ldr	r2, [pc, #516]	@ (80020b8 <uart2_dma1_config+0x228>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN;		// enable DMA1 clock
 8001eb8:	4b7f      	ldr	r3, [pc, #508]	@ (80020b8 <uart2_dma1_config+0x228>)
 8001eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebc:	4a7e      	ldr	r2, [pc, #504]	@ (80020b8 <uart2_dma1_config+0x228>)
 8001ebe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ec2:	6313      	str	r3, [r2, #48]	@ 0x30

	/* Setup DMA1 for transmission */
	// disable DMA1 to configure
	DMA1_Stream6->CR &= ~DMA_SxCR_EN;
 8001ec4:	4b7d      	ldr	r3, [pc, #500]	@ (80020bc <uart2_dma1_config+0x22c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a7c      	ldr	r2, [pc, #496]	@ (80020bc <uart2_dma1_config+0x22c>)
 8001eca:	f023 0301 	bic.w	r3, r3, #1
 8001ece:	6013      	str	r3, [r2, #0]
	while (DMA1_Stream6->CR & DMA_SxCR_EN);
 8001ed0:	bf00      	nop
 8001ed2:	4b7a      	ldr	r3, [pc, #488]	@ (80020bc <uart2_dma1_config+0x22c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f9      	bne.n	8001ed2 <uart2_dma1_config+0x42>

	// select stream 6, channel 4 for USART2_TX
	DMA1_Stream6->CR &= ~DMA_SxCR_CHSEL;
 8001ede:	4b77      	ldr	r3, [pc, #476]	@ (80020bc <uart2_dma1_config+0x22c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a76      	ldr	r2, [pc, #472]	@ (80020bc <uart2_dma1_config+0x22c>)
 8001ee4:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8001ee8:	6013      	str	r3, [r2, #0]
	DMA1_Stream6->CR |= DMA_SxCR_CHSEL_2;
 8001eea:	4b74      	ldr	r3, [pc, #464]	@ (80020bc <uart2_dma1_config+0x22c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a73      	ldr	r2, [pc, #460]	@ (80020bc <uart2_dma1_config+0x22c>)
 8001ef0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001ef4:	6013      	str	r3, [r2, #0]

	// disable direct mode
	DMA1_Stream6->FCR |= DMA_SxFCR_DMDIS;
 8001ef6:	4b71      	ldr	r3, [pc, #452]	@ (80020bc <uart2_dma1_config+0x22c>)
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	4a70      	ldr	r2, [pc, #448]	@ (80020bc <uart2_dma1_config+0x22c>)
 8001efc:	f043 0304 	orr.w	r3, r3, #4
 8001f00:	6153      	str	r3, [r2, #20]

	// normal mode, low priority, 1 byte data size (memory and peripheral)
	DMA1_Stream6->CR &= ~(DMA_SxCR_DBM | DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE);
 8001f02:	4b6e      	ldr	r3, [pc, #440]	@ (80020bc <uart2_dma1_config+0x22c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a6d      	ldr	r2, [pc, #436]	@ (80020bc <uart2_dma1_config+0x22c>)
 8001f08:	f423 23ef 	bic.w	r3, r3, #489472	@ 0x77800
 8001f0c:	6013      	str	r3, [r2, #0]

	// memory increment mode
	DMA1_Stream6->CR |= DMA_SxCR_MINC;
 8001f0e:	4b6b      	ldr	r3, [pc, #428]	@ (80020bc <uart2_dma1_config+0x22c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a6a      	ldr	r2, [pc, #424]	@ (80020bc <uart2_dma1_config+0x22c>)
 8001f14:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f18:	6013      	str	r3, [r2, #0]

	// fixed peripheral pointer
	DMA1_Stream6->CR &= ~DMA_SxCR_PINC;
 8001f1a:	4b68      	ldr	r3, [pc, #416]	@ (80020bc <uart2_dma1_config+0x22c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a67      	ldr	r2, [pc, #412]	@ (80020bc <uart2_dma1_config+0x22c>)
 8001f20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001f24:	6013      	str	r3, [r2, #0]

	// disable circular mode
	DMA1_Stream6->CR &= ~DMA_SxCR_CIRC;
 8001f26:	4b65      	ldr	r3, [pc, #404]	@ (80020bc <uart2_dma1_config+0x22c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a64      	ldr	r2, [pc, #400]	@ (80020bc <uart2_dma1_config+0x22c>)
 8001f2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f30:	6013      	str	r3, [r2, #0]

	// memory to peripheral mode
	DMA1_Stream6->CR &= ~DMA_SxCR_DIR_1;
 8001f32:	4b62      	ldr	r3, [pc, #392]	@ (80020bc <uart2_dma1_config+0x22c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a61      	ldr	r2, [pc, #388]	@ (80020bc <uart2_dma1_config+0x22c>)
 8001f38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f3c:	6013      	str	r3, [r2, #0]
	DMA1_Stream6->CR |= DMA_SxCR_DIR_0;
 8001f3e:	4b5f      	ldr	r3, [pc, #380]	@ (80020bc <uart2_dma1_config+0x22c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a5e      	ldr	r2, [pc, #376]	@ (80020bc <uart2_dma1_config+0x22c>)
 8001f44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f48:	6013      	str	r3, [r2, #0]

	// peripheral address is USART2_DR
	DMA1_Stream6->PAR = (uint32_t)&(USART2->DR);
 8001f4a:	4b5c      	ldr	r3, [pc, #368]	@ (80020bc <uart2_dma1_config+0x22c>)
 8001f4c:	4a5c      	ldr	r2, [pc, #368]	@ (80020c0 <uart2_dma1_config+0x230>)
 8001f4e:	609a      	str	r2, [r3, #8]

	/* Setup UART2 for transmission using DMA1 */
	// alternate function mode on TX (PA2) and RX (PA3)
	GPIOA->MODER |= GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1;
 8001f50:	4b5c      	ldr	r3, [pc, #368]	@ (80020c4 <uart2_dma1_config+0x234>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a5b      	ldr	r2, [pc, #364]	@ (80020c4 <uart2_dma1_config+0x234>)
 8001f56:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001f5a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_0 | GPIO_MODER_MODER3_0);
 8001f5c:	4b59      	ldr	r3, [pc, #356]	@ (80020c4 <uart2_dma1_config+0x234>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a58      	ldr	r2, [pc, #352]	@ (80020c4 <uart2_dma1_config+0x234>)
 8001f62:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8001f66:	6013      	str	r3, [r2, #0]

	// select alternate function mode 7 for each
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL2 | GPIO_AFRL_AFRL3);
 8001f68:	4b56      	ldr	r3, [pc, #344]	@ (80020c4 <uart2_dma1_config+0x234>)
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	4a55      	ldr	r2, [pc, #340]	@ (80020c4 <uart2_dma1_config+0x234>)
 8001f6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f72:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL2_0 | GPIO_AFRL_AFRL3_0 |
 8001f74:	4b53      	ldr	r3, [pc, #332]	@ (80020c4 <uart2_dma1_config+0x234>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	4a52      	ldr	r2, [pc, #328]	@ (80020c4 <uart2_dma1_config+0x234>)
 8001f7a:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8001f7e:	6213      	str	r3, [r2, #32]
					GPIO_AFRL_AFRL2_1 | GPIO_AFRL_AFRL3_1 |
					GPIO_AFRL_AFRL2_2 | GPIO_AFRL_AFRL3_2;

	USART2->CR1 |= USART_CR1_UE;			// UART2 enable
 8001f80:	4b51      	ldr	r3, [pc, #324]	@ (80020c8 <uart2_dma1_config+0x238>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	4a50      	ldr	r2, [pc, #320]	@ (80020c8 <uart2_dma1_config+0x238>)
 8001f86:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f8a:	60d3      	str	r3, [r2, #12]

	if (ndata == USART_DATA_8)
 8001f8c:	7afb      	ldrb	r3, [r7, #11]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d106      	bne.n	8001fa0 <uart2_dma1_config+0x110>
	{
		USART2->CR1 &= ~USART_CR1_M;		// 1 start, 8 data, n stop
 8001f92:	4b4d      	ldr	r3, [pc, #308]	@ (80020c8 <uart2_dma1_config+0x238>)
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	4a4c      	ldr	r2, [pc, #304]	@ (80020c8 <uart2_dma1_config+0x238>)
 8001f98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001f9c:	60d3      	str	r3, [r2, #12]
 8001f9e:	e00b      	b.n	8001fb8 <uart2_dma1_config+0x128>
	}
	else if (ndata == USART_DATA_9)
 8001fa0:	7afb      	ldrb	r3, [r7, #11]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d106      	bne.n	8001fb4 <uart2_dma1_config+0x124>
	{
		USART2->CR1 |= USART_CR1_M;			// 1 start, 9 data, n stop
 8001fa6:	4b48      	ldr	r3, [pc, #288]	@ (80020c8 <uart2_dma1_config+0x238>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	4a47      	ldr	r2, [pc, #284]	@ (80020c8 <uart2_dma1_config+0x238>)
 8001fac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fb0:	60d3      	str	r3, [r2, #12]
 8001fb2:	e001      	b.n	8001fb8 <uart2_dma1_config+0x128>
	}
	else
	{
		return USART_INVALID_NDATA;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e07b      	b.n	80020b0 <uart2_dma1_config+0x220>
	}

	if (nstop == USART_STOP_1)
 8001fb8:	7abb      	ldrb	r3, [r7, #10]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d106      	bne.n	8001fcc <uart2_dma1_config+0x13c>
	{
		USART2->CR2 &= ~USART_CR2_STOP;		// 1 stop bit
 8001fbe:	4b42      	ldr	r3, [pc, #264]	@ (80020c8 <uart2_dma1_config+0x238>)
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	4a41      	ldr	r2, [pc, #260]	@ (80020c8 <uart2_dma1_config+0x238>)
 8001fc4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001fc8:	6113      	str	r3, [r2, #16]
 8001fca:	e021      	b.n	8002010 <uart2_dma1_config+0x180>
	}
	else if (nstop == USART_STOP_HALF)
 8001fcc:	7abb      	ldrb	r3, [r7, #10]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d10c      	bne.n	8001fec <uart2_dma1_config+0x15c>
	{
		USART2->CR2 &= ~USART_CR2_STOP;		// half stop bit
 8001fd2:	4b3d      	ldr	r3, [pc, #244]	@ (80020c8 <uart2_dma1_config+0x238>)
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	4a3c      	ldr	r2, [pc, #240]	@ (80020c8 <uart2_dma1_config+0x238>)
 8001fd8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001fdc:	6113      	str	r3, [r2, #16]
		USART2->CR2 |= USART_CR2_STOP_0;
 8001fde:	4b3a      	ldr	r3, [pc, #232]	@ (80020c8 <uart2_dma1_config+0x238>)
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	4a39      	ldr	r2, [pc, #228]	@ (80020c8 <uart2_dma1_config+0x238>)
 8001fe4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fe8:	6113      	str	r3, [r2, #16]
 8001fea:	e011      	b.n	8002010 <uart2_dma1_config+0x180>
	}
	else if (nstop == USART_STOP_2)
 8001fec:	7abb      	ldrb	r3, [r7, #10]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d10c      	bne.n	800200c <uart2_dma1_config+0x17c>
	{
		USART2->CR2 &= ~USART_CR2_STOP;		// 2 stop bits
 8001ff2:	4b35      	ldr	r3, [pc, #212]	@ (80020c8 <uart2_dma1_config+0x238>)
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	4a34      	ldr	r2, [pc, #208]	@ (80020c8 <uart2_dma1_config+0x238>)
 8001ff8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ffc:	6113      	str	r3, [r2, #16]
		USART2->CR2 |= USART_CR2_STOP_1;
 8001ffe:	4b32      	ldr	r3, [pc, #200]	@ (80020c8 <uart2_dma1_config+0x238>)
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	4a31      	ldr	r2, [pc, #196]	@ (80020c8 <uart2_dma1_config+0x238>)
 8002004:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002008:	6113      	str	r3, [r2, #16]
 800200a:	e001      	b.n	8002010 <uart2_dma1_config+0x180>
	}
	else
	{
		return USART_INVALID_NSTOP;
 800200c:	2301      	movs	r3, #1
 800200e:	e04f      	b.n	80020b0 <uart2_dma1_config+0x220>
	}

	// pg. 519 STM32F401RE reference
	float usart_div = f_cpu / (2 * 16.0 * baud);		// APB1 bus is 1/2 clock speed of f_cpu
 8002010:	4b2e      	ldr	r3, [pc, #184]	@ (80020cc <uart2_dma1_config+0x23c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe fa21 	bl	800045c <__aeabi_ui2d>
 800201a:	4604      	mov	r4, r0
 800201c:	460d      	mov	r5, r1
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f7fe fa1c 	bl	800045c <__aeabi_ui2d>
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	4b29      	ldr	r3, [pc, #164]	@ (80020d0 <uart2_dma1_config+0x240>)
 800202a:	f7fe fa91 	bl	8000550 <__aeabi_dmul>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4620      	mov	r0, r4
 8002034:	4629      	mov	r1, r5
 8002036:	f7fe fbb5 	bl	80007a4 <__aeabi_ddiv>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4610      	mov	r0, r2
 8002040:	4619      	mov	r1, r3
 8002042:	f7fe fd1f 	bl	8000a84 <__aeabi_d2f>
 8002046:	4603      	mov	r3, r0
 8002048:	617b      	str	r3, [r7, #20]
	uint16_t mantissa = (uint16_t) usart_div;
 800204a:	edd7 7a05 	vldr	s15, [r7, #20]
 800204e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002052:	ee17 3a90 	vmov	r3, s15
 8002056:	827b      	strh	r3, [r7, #18]
	uint8_t fraction = (uint8_t) ((usart_div - mantissa) * 16);
 8002058:	8a7b      	ldrh	r3, [r7, #18]
 800205a:	ee07 3a90 	vmov	s15, r3
 800205e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002062:	ed97 7a05 	vldr	s14, [r7, #20]
 8002066:	ee77 7a67 	vsub.f32	s15, s14, s15
 800206a:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 800206e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002076:	edc7 7a01 	vstr	s15, [r7, #4]
 800207a:	793b      	ldrb	r3, [r7, #4]
 800207c:	747b      	strb	r3, [r7, #17]
	USART2->BRR = mantissa << 4 | fraction;
 800207e:	8a7b      	ldrh	r3, [r7, #18]
 8002080:	011a      	lsls	r2, r3, #4
 8002082:	7c7b      	ldrb	r3, [r7, #17]
 8002084:	431a      	orrs	r2, r3
 8002086:	4b10      	ldr	r3, [pc, #64]	@ (80020c8 <uart2_dma1_config+0x238>)
 8002088:	609a      	str	r2, [r3, #8]

	USART2->CR3 |= USART_CR3_DMAT;		// enable DMA transmitter
 800208a:	4b0f      	ldr	r3, [pc, #60]	@ (80020c8 <uart2_dma1_config+0x238>)
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	4a0e      	ldr	r2, [pc, #56]	@ (80020c8 <uart2_dma1_config+0x238>)
 8002090:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002094:	6153      	str	r3, [r2, #20]

	USART2->CR1 |= USART_CR1_TE;		// transmitter enable
 8002096:	4b0c      	ldr	r3, [pc, #48]	@ (80020c8 <uart2_dma1_config+0x238>)
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	4a0b      	ldr	r2, [pc, #44]	@ (80020c8 <uart2_dma1_config+0x238>)
 800209c:	f043 0308 	orr.w	r3, r3, #8
 80020a0:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RE;		// receiver enable
 80020a2:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <uart2_dma1_config+0x238>)
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	4a08      	ldr	r2, [pc, #32]	@ (80020c8 <uart2_dma1_config+0x238>)
 80020a8:	f043 0304 	orr.w	r3, r3, #4
 80020ac:	60d3      	str	r3, [r2, #12]

	return USART_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bdb0      	pop	{r4, r5, r7, pc}
 80020b8:	40023800 	.word	0x40023800
 80020bc:	400260a0 	.word	0x400260a0
 80020c0:	40004404 	.word	0x40004404
 80020c4:	40020000 	.word	0x40020000
 80020c8:	40004400 	.word	0x40004400
 80020cc:	20000400 	.word	0x20000400
 80020d0:	40400000 	.word	0x40400000

080020d4 <uart2_dma1_write>:

	return USART_OK;
}

void uart2_dma1_write(uint16_t n, uint8_t * data)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	6039      	str	r1, [r7, #0]
 80020de:	80fb      	strh	r3, [r7, #6]
	while (!(USART2->SR & USART_SR_TXE));	// wait for transmit data register empty
 80020e0:	bf00      	nop
 80020e2:	4b18      	ldr	r3, [pc, #96]	@ (8002144 <uart2_dma1_write+0x70>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f9      	beq.n	80020e2 <uart2_dma1_write+0xe>
	USART2->SR &= ~USART_SR_TC;				// clear flag
 80020ee:	4b15      	ldr	r3, [pc, #84]	@ (8002144 <uart2_dma1_write+0x70>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a14      	ldr	r2, [pc, #80]	@ (8002144 <uart2_dma1_write+0x70>)
 80020f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80020f8:	6013      	str	r3, [r2, #0]

	DMA1_Stream6->CR &= ~DMA_SxCR_EN;		// disable DMA stream
 80020fa:	4b13      	ldr	r3, [pc, #76]	@ (8002148 <uart2_dma1_write+0x74>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a12      	ldr	r2, [pc, #72]	@ (8002148 <uart2_dma1_write+0x74>)
 8002100:	f023 0301 	bic.w	r3, r3, #1
 8002104:	6013      	str	r3, [r2, #0]
	while (DMA1_Stream6->CR & DMA_SxCR_EN);
 8002106:	bf00      	nop
 8002108:	4b0f      	ldr	r3, [pc, #60]	@ (8002148 <uart2_dma1_write+0x74>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1f9      	bne.n	8002108 <uart2_dma1_write+0x34>

	// clear flags
	DMA1->HIFCR |= DMA_HIFCR_CTCIF6 | DMA_HIFCR_CHTIF6 | DMA_HIFCR_CTEIF6 | DMA_HIFCR_CDMEIF6 | DMA_HIFCR_CFEIF6;
 8002114:	4b0d      	ldr	r3, [pc, #52]	@ (800214c <uart2_dma1_write+0x78>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	4a0c      	ldr	r2, [pc, #48]	@ (800214c <uart2_dma1_write+0x78>)
 800211a:	f443 1374 	orr.w	r3, r3, #3997696	@ 0x3d0000
 800211e:	60d3      	str	r3, [r2, #12]

	DMA1_Stream6->NDTR = n;					// set # of data items to transfer
 8002120:	4a09      	ldr	r2, [pc, #36]	@ (8002148 <uart2_dma1_write+0x74>)
 8002122:	88fb      	ldrh	r3, [r7, #6]
 8002124:	6053      	str	r3, [r2, #4]
	DMA1_Stream6->M0AR = (uint32_t) data;	// pointer to data
 8002126:	4a08      	ldr	r2, [pc, #32]	@ (8002148 <uart2_dma1_write+0x74>)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	60d3      	str	r3, [r2, #12]
	DMA1_Stream6->CR |= DMA_SxCR_EN;		// enable DMA stream
 800212c:	4b06      	ldr	r3, [pc, #24]	@ (8002148 <uart2_dma1_write+0x74>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a05      	ldr	r2, [pc, #20]	@ (8002148 <uart2_dma1_write+0x74>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	6013      	str	r3, [r2, #0]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	40004400 	.word	0x40004400
 8002148:	400260a0 	.word	0x400260a0
 800214c:	40026000 	.word	0x40026000

08002150 <memset>:
 8002150:	4402      	add	r2, r0
 8002152:	4603      	mov	r3, r0
 8002154:	4293      	cmp	r3, r2
 8002156:	d100      	bne.n	800215a <memset+0xa>
 8002158:	4770      	bx	lr
 800215a:	f803 1b01 	strb.w	r1, [r3], #1
 800215e:	e7f9      	b.n	8002154 <memset+0x4>

08002160 <__errno>:
 8002160:	4b01      	ldr	r3, [pc, #4]	@ (8002168 <__errno+0x8>)
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20000004 	.word	0x20000004

0800216c <__libc_init_array>:
 800216c:	b570      	push	{r4, r5, r6, lr}
 800216e:	4d0d      	ldr	r5, [pc, #52]	@ (80021a4 <__libc_init_array+0x38>)
 8002170:	4c0d      	ldr	r4, [pc, #52]	@ (80021a8 <__libc_init_array+0x3c>)
 8002172:	1b64      	subs	r4, r4, r5
 8002174:	10a4      	asrs	r4, r4, #2
 8002176:	2600      	movs	r6, #0
 8002178:	42a6      	cmp	r6, r4
 800217a:	d109      	bne.n	8002190 <__libc_init_array+0x24>
 800217c:	4d0b      	ldr	r5, [pc, #44]	@ (80021ac <__libc_init_array+0x40>)
 800217e:	4c0c      	ldr	r4, [pc, #48]	@ (80021b0 <__libc_init_array+0x44>)
 8002180:	f000 fbfe 	bl	8002980 <_init>
 8002184:	1b64      	subs	r4, r4, r5
 8002186:	10a4      	asrs	r4, r4, #2
 8002188:	2600      	movs	r6, #0
 800218a:	42a6      	cmp	r6, r4
 800218c:	d105      	bne.n	800219a <__libc_init_array+0x2e>
 800218e:	bd70      	pop	{r4, r5, r6, pc}
 8002190:	f855 3b04 	ldr.w	r3, [r5], #4
 8002194:	4798      	blx	r3
 8002196:	3601      	adds	r6, #1
 8002198:	e7ee      	b.n	8002178 <__libc_init_array+0xc>
 800219a:	f855 3b04 	ldr.w	r3, [r5], #4
 800219e:	4798      	blx	r3
 80021a0:	3601      	adds	r6, #1
 80021a2:	e7f2      	b.n	800218a <__libc_init_array+0x1e>
 80021a4:	08002a0c 	.word	0x08002a0c
 80021a8:	08002a0c 	.word	0x08002a0c
 80021ac:	08002a0c 	.word	0x08002a0c
 80021b0:	08002a10 	.word	0x08002a10

080021b4 <powf>:
 80021b4:	b508      	push	{r3, lr}
 80021b6:	ed2d 8b04 	vpush	{d8-d9}
 80021ba:	eeb0 8a60 	vmov.f32	s16, s1
 80021be:	eeb0 9a40 	vmov.f32	s18, s0
 80021c2:	f000 f87b 	bl	80022bc <__ieee754_powf>
 80021c6:	eeb4 8a48 	vcmp.f32	s16, s16
 80021ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ce:	eef0 8a40 	vmov.f32	s17, s0
 80021d2:	d63e      	bvs.n	8002252 <powf+0x9e>
 80021d4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80021d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021dc:	d112      	bne.n	8002204 <powf+0x50>
 80021de:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80021e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e6:	d039      	beq.n	800225c <powf+0xa8>
 80021e8:	eeb0 0a48 	vmov.f32	s0, s16
 80021ec:	f000 f858 	bl	80022a0 <finitef>
 80021f0:	b378      	cbz	r0, 8002252 <powf+0x9e>
 80021f2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80021f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fa:	d52a      	bpl.n	8002252 <powf+0x9e>
 80021fc:	f7ff ffb0 	bl	8002160 <__errno>
 8002200:	2322      	movs	r3, #34	@ 0x22
 8002202:	e014      	b.n	800222e <powf+0x7a>
 8002204:	f000 f84c 	bl	80022a0 <finitef>
 8002208:	b998      	cbnz	r0, 8002232 <powf+0x7e>
 800220a:	eeb0 0a49 	vmov.f32	s0, s18
 800220e:	f000 f847 	bl	80022a0 <finitef>
 8002212:	b170      	cbz	r0, 8002232 <powf+0x7e>
 8002214:	eeb0 0a48 	vmov.f32	s0, s16
 8002218:	f000 f842 	bl	80022a0 <finitef>
 800221c:	b148      	cbz	r0, 8002232 <powf+0x7e>
 800221e:	eef4 8a68 	vcmp.f32	s17, s17
 8002222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002226:	d7e9      	bvc.n	80021fc <powf+0x48>
 8002228:	f7ff ff9a 	bl	8002160 <__errno>
 800222c:	2321      	movs	r3, #33	@ 0x21
 800222e:	6003      	str	r3, [r0, #0]
 8002230:	e00f      	b.n	8002252 <powf+0x9e>
 8002232:	eef5 8a40 	vcmp.f32	s17, #0.0
 8002236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223a:	d10a      	bne.n	8002252 <powf+0x9e>
 800223c:	eeb0 0a49 	vmov.f32	s0, s18
 8002240:	f000 f82e 	bl	80022a0 <finitef>
 8002244:	b128      	cbz	r0, 8002252 <powf+0x9e>
 8002246:	eeb0 0a48 	vmov.f32	s0, s16
 800224a:	f000 f829 	bl	80022a0 <finitef>
 800224e:	2800      	cmp	r0, #0
 8002250:	d1d4      	bne.n	80021fc <powf+0x48>
 8002252:	eeb0 0a68 	vmov.f32	s0, s17
 8002256:	ecbd 8b04 	vpop	{d8-d9}
 800225a:	bd08      	pop	{r3, pc}
 800225c:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8002260:	e7f7      	b.n	8002252 <powf+0x9e>
	...

08002264 <sqrtf>:
 8002264:	b508      	push	{r3, lr}
 8002266:	ed2d 8b02 	vpush	{d8}
 800226a:	eeb0 8a40 	vmov.f32	s16, s0
 800226e:	f000 f821 	bl	80022b4 <__ieee754_sqrtf>
 8002272:	eeb4 8a48 	vcmp.f32	s16, s16
 8002276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227a:	d60c      	bvs.n	8002296 <sqrtf+0x32>
 800227c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800229c <sqrtf+0x38>
 8002280:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8002284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002288:	d505      	bpl.n	8002296 <sqrtf+0x32>
 800228a:	f7ff ff69 	bl	8002160 <__errno>
 800228e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8002292:	2321      	movs	r3, #33	@ 0x21
 8002294:	6003      	str	r3, [r0, #0]
 8002296:	ecbd 8b02 	vpop	{d8}
 800229a:	bd08      	pop	{r3, pc}
 800229c:	00000000 	.word	0x00000000

080022a0 <finitef>:
 80022a0:	ee10 3a10 	vmov	r3, s0
 80022a4:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80022a8:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80022ac:	bfac      	ite	ge
 80022ae:	2000      	movge	r0, #0
 80022b0:	2001      	movlt	r0, #1
 80022b2:	4770      	bx	lr

080022b4 <__ieee754_sqrtf>:
 80022b4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80022b8:	4770      	bx	lr
	...

080022bc <__ieee754_powf>:
 80022bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022c0:	ee10 4a90 	vmov	r4, s1
 80022c4:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 80022c8:	ed2d 8b02 	vpush	{d8}
 80022cc:	ee10 6a10 	vmov	r6, s0
 80022d0:	eeb0 8a40 	vmov.f32	s16, s0
 80022d4:	eef0 8a60 	vmov.f32	s17, s1
 80022d8:	d10c      	bne.n	80022f4 <__ieee754_powf+0x38>
 80022da:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 80022de:	0076      	lsls	r6, r6, #1
 80022e0:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80022e4:	f240 8274 	bls.w	80027d0 <__ieee754_powf+0x514>
 80022e8:	ee38 0a28 	vadd.f32	s0, s16, s17
 80022ec:	ecbd 8b02 	vpop	{d8}
 80022f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022f4:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80022f8:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80022fc:	d802      	bhi.n	8002304 <__ieee754_powf+0x48>
 80022fe:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8002302:	d908      	bls.n	8002316 <__ieee754_powf+0x5a>
 8002304:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8002308:	d1ee      	bne.n	80022e8 <__ieee754_powf+0x2c>
 800230a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800230e:	0064      	lsls	r4, r4, #1
 8002310:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8002314:	e7e6      	b.n	80022e4 <__ieee754_powf+0x28>
 8002316:	2e00      	cmp	r6, #0
 8002318:	da1f      	bge.n	800235a <__ieee754_powf+0x9e>
 800231a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800231e:	f080 8260 	bcs.w	80027e2 <__ieee754_powf+0x526>
 8002322:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8002326:	d32f      	bcc.n	8002388 <__ieee754_powf+0xcc>
 8002328:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800232c:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8002330:	fa49 f503 	asr.w	r5, r9, r3
 8002334:	fa05 f303 	lsl.w	r3, r5, r3
 8002338:	454b      	cmp	r3, r9
 800233a:	d123      	bne.n	8002384 <__ieee754_powf+0xc8>
 800233c:	f005 0501 	and.w	r5, r5, #1
 8002340:	f1c5 0502 	rsb	r5, r5, #2
 8002344:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8002348:	d11f      	bne.n	800238a <__ieee754_powf+0xce>
 800234a:	2c00      	cmp	r4, #0
 800234c:	f280 8246 	bge.w	80027dc <__ieee754_powf+0x520>
 8002350:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8002354:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8002358:	e7c8      	b.n	80022ec <__ieee754_powf+0x30>
 800235a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800235e:	d111      	bne.n	8002384 <__ieee754_powf+0xc8>
 8002360:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8002364:	f000 8234 	beq.w	80027d0 <__ieee754_powf+0x514>
 8002368:	d906      	bls.n	8002378 <__ieee754_powf+0xbc>
 800236a:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8002680 <__ieee754_powf+0x3c4>
 800236e:	2c00      	cmp	r4, #0
 8002370:	bfa8      	it	ge
 8002372:	eeb0 0a68 	vmovge.f32	s0, s17
 8002376:	e7b9      	b.n	80022ec <__ieee754_powf+0x30>
 8002378:	2c00      	cmp	r4, #0
 800237a:	f280 822c 	bge.w	80027d6 <__ieee754_powf+0x51a>
 800237e:	eeb1 0a68 	vneg.f32	s0, s17
 8002382:	e7b3      	b.n	80022ec <__ieee754_powf+0x30>
 8002384:	2500      	movs	r5, #0
 8002386:	e7dd      	b.n	8002344 <__ieee754_powf+0x88>
 8002388:	2500      	movs	r5, #0
 800238a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800238e:	d102      	bne.n	8002396 <__ieee754_powf+0xda>
 8002390:	ee28 0a08 	vmul.f32	s0, s16, s16
 8002394:	e7aa      	b.n	80022ec <__ieee754_powf+0x30>
 8002396:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800239a:	f040 8227 	bne.w	80027ec <__ieee754_powf+0x530>
 800239e:	2e00      	cmp	r6, #0
 80023a0:	f2c0 8224 	blt.w	80027ec <__ieee754_powf+0x530>
 80023a4:	eeb0 0a48 	vmov.f32	s0, s16
 80023a8:	ecbd 8b02 	vpop	{d8}
 80023ac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023b0:	f7ff bf80 	b.w	80022b4 <__ieee754_sqrtf>
 80023b4:	2d01      	cmp	r5, #1
 80023b6:	d199      	bne.n	80022ec <__ieee754_powf+0x30>
 80023b8:	eeb1 0a40 	vneg.f32	s0, s0
 80023bc:	e796      	b.n	80022ec <__ieee754_powf+0x30>
 80023be:	0ff0      	lsrs	r0, r6, #31
 80023c0:	3801      	subs	r0, #1
 80023c2:	ea55 0300 	orrs.w	r3, r5, r0
 80023c6:	d104      	bne.n	80023d2 <__ieee754_powf+0x116>
 80023c8:	ee38 8a48 	vsub.f32	s16, s16, s16
 80023cc:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80023d0:	e78c      	b.n	80022ec <__ieee754_powf+0x30>
 80023d2:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 80023d6:	d96d      	bls.n	80024b4 <__ieee754_powf+0x1f8>
 80023d8:	4baa      	ldr	r3, [pc, #680]	@ (8002684 <__ieee754_powf+0x3c8>)
 80023da:	4598      	cmp	r8, r3
 80023dc:	d808      	bhi.n	80023f0 <__ieee754_powf+0x134>
 80023de:	2c00      	cmp	r4, #0
 80023e0:	da0b      	bge.n	80023fa <__ieee754_powf+0x13e>
 80023e2:	2000      	movs	r0, #0
 80023e4:	ecbd 8b02 	vpop	{d8}
 80023e8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023ec:	f000 bac2 	b.w	8002974 <__math_oflowf>
 80023f0:	4ba5      	ldr	r3, [pc, #660]	@ (8002688 <__ieee754_powf+0x3cc>)
 80023f2:	4598      	cmp	r8, r3
 80023f4:	d908      	bls.n	8002408 <__ieee754_powf+0x14c>
 80023f6:	2c00      	cmp	r4, #0
 80023f8:	dcf3      	bgt.n	80023e2 <__ieee754_powf+0x126>
 80023fa:	2000      	movs	r0, #0
 80023fc:	ecbd 8b02 	vpop	{d8}
 8002400:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002404:	f000 bab0 	b.w	8002968 <__math_uflowf>
 8002408:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800240c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002410:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800268c <__ieee754_powf+0x3d0>
 8002414:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8002418:	eee0 6a67 	vfms.f32	s13, s0, s15
 800241c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8002420:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8002424:	ee20 7a00 	vmul.f32	s14, s0, s0
 8002428:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8002690 <__ieee754_powf+0x3d4>
 800242c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002430:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8002694 <__ieee754_powf+0x3d8>
 8002434:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8002438:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8002698 <__ieee754_powf+0x3dc>
 800243c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002440:	eeb0 7a67 	vmov.f32	s14, s15
 8002444:	eea0 7a26 	vfma.f32	s14, s0, s13
 8002448:	ee17 3a10 	vmov	r3, s14
 800244c:	f36f 030b 	bfc	r3, #0, #12
 8002450:	ee07 3a10 	vmov	s14, r3
 8002454:	eeb0 6a47 	vmov.f32	s12, s14
 8002458:	eea0 6a66 	vfms.f32	s12, s0, s13
 800245c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002460:	3d01      	subs	r5, #1
 8002462:	4305      	orrs	r5, r0
 8002464:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002468:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800246c:	f36f 040b 	bfc	r4, #0, #12
 8002470:	bf18      	it	ne
 8002472:	eeb0 8a66 	vmovne.f32	s16, s13
 8002476:	ee06 4a90 	vmov	s13, r4
 800247a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800247e:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8002482:	ee67 7a26 	vmul.f32	s15, s14, s13
 8002486:	eee6 0a07 	vfma.f32	s1, s12, s14
 800248a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800248e:	ee17 1a10 	vmov	r1, s14
 8002492:	2900      	cmp	r1, #0
 8002494:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8002498:	f340 80dd 	ble.w	8002656 <__ieee754_powf+0x39a>
 800249c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80024a0:	f240 80ca 	bls.w	8002638 <__ieee754_powf+0x37c>
 80024a4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80024a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ac:	bf4c      	ite	mi
 80024ae:	2001      	movmi	r0, #1
 80024b0:	2000      	movpl	r0, #0
 80024b2:	e797      	b.n	80023e4 <__ieee754_powf+0x128>
 80024b4:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80024b8:	bf01      	itttt	eq
 80024ba:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800269c <__ieee754_powf+0x3e0>
 80024be:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80024c2:	f06f 0317 	mvneq.w	r3, #23
 80024c6:	ee17 7a90 	vmoveq	r7, s15
 80024ca:	ea4f 52e7 	mov.w	r2, r7, asr #23
 80024ce:	bf18      	it	ne
 80024d0:	2300      	movne	r3, #0
 80024d2:	3a7f      	subs	r2, #127	@ 0x7f
 80024d4:	441a      	add	r2, r3
 80024d6:	4b72      	ldr	r3, [pc, #456]	@ (80026a0 <__ieee754_powf+0x3e4>)
 80024d8:	f3c7 0716 	ubfx	r7, r7, #0, #23
 80024dc:	429f      	cmp	r7, r3
 80024de:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 80024e2:	dd06      	ble.n	80024f2 <__ieee754_powf+0x236>
 80024e4:	4b6f      	ldr	r3, [pc, #444]	@ (80026a4 <__ieee754_powf+0x3e8>)
 80024e6:	429f      	cmp	r7, r3
 80024e8:	f340 80a4 	ble.w	8002634 <__ieee754_powf+0x378>
 80024ec:	3201      	adds	r2, #1
 80024ee:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 80024f2:	2600      	movs	r6, #0
 80024f4:	4b6c      	ldr	r3, [pc, #432]	@ (80026a8 <__ieee754_powf+0x3ec>)
 80024f6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80024fa:	ee07 1a10 	vmov	s14, r1
 80024fe:	edd3 5a00 	vldr	s11, [r3]
 8002502:	4b6a      	ldr	r3, [pc, #424]	@ (80026ac <__ieee754_powf+0x3f0>)
 8002504:	ee75 7a87 	vadd.f32	s15, s11, s14
 8002508:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800250c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8002510:	1049      	asrs	r1, r1, #1
 8002512:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8002516:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800251a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800251e:	ee37 6a65 	vsub.f32	s12, s14, s11
 8002522:	ee07 1a90 	vmov	s15, r1
 8002526:	ee26 5a24 	vmul.f32	s10, s12, s9
 800252a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800252e:	ee15 7a10 	vmov	r7, s10
 8002532:	401f      	ands	r7, r3
 8002534:	ee06 7a90 	vmov	s13, r7
 8002538:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800253c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8002540:	ee65 7a05 	vmul.f32	s15, s10, s10
 8002544:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8002548:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80026b0 <__ieee754_powf+0x3f4>
 800254c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80026b4 <__ieee754_powf+0x3f8>
 8002550:	eee7 5a87 	vfma.f32	s11, s15, s14
 8002554:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80026b8 <__ieee754_powf+0x3fc>
 8002558:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800255c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800268c <__ieee754_powf+0x3d0>
 8002560:	eee7 5a27 	vfma.f32	s11, s14, s15
 8002564:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80026bc <__ieee754_powf+0x400>
 8002568:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800256c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 80026c0 <__ieee754_powf+0x404>
 8002570:	ee26 6a24 	vmul.f32	s12, s12, s9
 8002574:	eee7 5a27 	vfma.f32	s11, s14, s15
 8002578:	ee35 7a26 	vadd.f32	s14, s10, s13
 800257c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8002580:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002584:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8002588:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800258c:	eef0 5a67 	vmov.f32	s11, s15
 8002590:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8002594:	ee75 5a87 	vadd.f32	s11, s11, s14
 8002598:	ee15 1a90 	vmov	r1, s11
 800259c:	4019      	ands	r1, r3
 800259e:	ee05 1a90 	vmov	s11, r1
 80025a2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80025a6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80025aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ae:	ee67 7a85 	vmul.f32	s15, s15, s10
 80025b2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80025b6:	eeb0 6a67 	vmov.f32	s12, s15
 80025ba:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80025be:	ee16 1a10 	vmov	r1, s12
 80025c2:	4019      	ands	r1, r3
 80025c4:	ee06 1a10 	vmov	s12, r1
 80025c8:	eeb0 7a46 	vmov.f32	s14, s12
 80025cc:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80025d0:	493c      	ldr	r1, [pc, #240]	@ (80026c4 <__ieee754_powf+0x408>)
 80025d2:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 80025d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80025da:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80026c8 <__ieee754_powf+0x40c>
 80025de:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 80026cc <__ieee754_powf+0x410>
 80025e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025e6:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80026d0 <__ieee754_powf+0x414>
 80025ea:	eee6 7a07 	vfma.f32	s15, s12, s14
 80025ee:	ed91 7a00 	vldr	s14, [r1]
 80025f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025f6:	ee07 2a10 	vmov	s14, r2
 80025fa:	4a36      	ldr	r2, [pc, #216]	@ (80026d4 <__ieee754_powf+0x418>)
 80025fc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002600:	eeb0 7a67 	vmov.f32	s14, s15
 8002604:	eea6 7a25 	vfma.f32	s14, s12, s11
 8002608:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800260c:	ed92 5a00 	vldr	s10, [r2]
 8002610:	ee37 7a05 	vadd.f32	s14, s14, s10
 8002614:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002618:	ee17 2a10 	vmov	r2, s14
 800261c:	401a      	ands	r2, r3
 800261e:	ee07 2a10 	vmov	s14, r2
 8002622:	ee77 6a66 	vsub.f32	s13, s14, s13
 8002626:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800262a:	eee6 6a65 	vfms.f32	s13, s12, s11
 800262e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002632:	e715      	b.n	8002460 <__ieee754_powf+0x1a4>
 8002634:	2601      	movs	r6, #1
 8002636:	e75d      	b.n	80024f4 <__ieee754_powf+0x238>
 8002638:	d152      	bne.n	80026e0 <__ieee754_powf+0x424>
 800263a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80026d8 <__ieee754_powf+0x41c>
 800263e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002642:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8002646:	eef4 6ac7 	vcmpe.f32	s13, s14
 800264a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264e:	f73f af29 	bgt.w	80024a4 <__ieee754_powf+0x1e8>
 8002652:	2386      	movs	r3, #134	@ 0x86
 8002654:	e048      	b.n	80026e8 <__ieee754_powf+0x42c>
 8002656:	4a21      	ldr	r2, [pc, #132]	@ (80026dc <__ieee754_powf+0x420>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d907      	bls.n	800266c <__ieee754_powf+0x3b0>
 800265c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8002660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002664:	bf4c      	ite	mi
 8002666:	2001      	movmi	r0, #1
 8002668:	2000      	movpl	r0, #0
 800266a:	e6c7      	b.n	80023fc <__ieee754_powf+0x140>
 800266c:	d138      	bne.n	80026e0 <__ieee754_powf+0x424>
 800266e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002672:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8002676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267a:	dbea      	blt.n	8002652 <__ieee754_powf+0x396>
 800267c:	e7ee      	b.n	800265c <__ieee754_powf+0x3a0>
 800267e:	bf00      	nop
 8002680:	00000000 	.word	0x00000000
 8002684:	3f7ffff3 	.word	0x3f7ffff3
 8002688:	3f800007 	.word	0x3f800007
 800268c:	3eaaaaab 	.word	0x3eaaaaab
 8002690:	3fb8aa00 	.word	0x3fb8aa00
 8002694:	3fb8aa3b 	.word	0x3fb8aa3b
 8002698:	36eca570 	.word	0x36eca570
 800269c:	4b800000 	.word	0x4b800000
 80026a0:	001cc471 	.word	0x001cc471
 80026a4:	005db3d6 	.word	0x005db3d6
 80026a8:	08002a04 	.word	0x08002a04
 80026ac:	fffff000 	.word	0xfffff000
 80026b0:	3e6c3255 	.word	0x3e6c3255
 80026b4:	3e53f142 	.word	0x3e53f142
 80026b8:	3e8ba305 	.word	0x3e8ba305
 80026bc:	3edb6db7 	.word	0x3edb6db7
 80026c0:	3f19999a 	.word	0x3f19999a
 80026c4:	080029f4 	.word	0x080029f4
 80026c8:	3f76384f 	.word	0x3f76384f
 80026cc:	3f763800 	.word	0x3f763800
 80026d0:	369dc3a0 	.word	0x369dc3a0
 80026d4:	080029fc 	.word	0x080029fc
 80026d8:	3338aa3c 	.word	0x3338aa3c
 80026dc:	43160000 	.word	0x43160000
 80026e0:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80026e4:	d96f      	bls.n	80027c6 <__ieee754_powf+0x50a>
 80026e6:	15db      	asrs	r3, r3, #23
 80026e8:	3b7e      	subs	r3, #126	@ 0x7e
 80026ea:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80026ee:	4118      	asrs	r0, r3
 80026f0:	4408      	add	r0, r1
 80026f2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80026f6:	4a4e      	ldr	r2, [pc, #312]	@ (8002830 <__ieee754_powf+0x574>)
 80026f8:	3b7f      	subs	r3, #127	@ 0x7f
 80026fa:	411a      	asrs	r2, r3
 80026fc:	4002      	ands	r2, r0
 80026fe:	ee07 2a10 	vmov	s14, r2
 8002702:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8002706:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800270a:	f1c3 0317 	rsb	r3, r3, #23
 800270e:	4118      	asrs	r0, r3
 8002710:	2900      	cmp	r1, #0
 8002712:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002716:	bfb8      	it	lt
 8002718:	4240      	neglt	r0, r0
 800271a:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800271e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8002834 <__ieee754_powf+0x578>
 8002722:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8002838 <__ieee754_powf+0x57c>
 8002726:	ee16 3a90 	vmov	r3, s13
 800272a:	f36f 030b 	bfc	r3, #0, #12
 800272e:	ee06 3a90 	vmov	s13, r3
 8002732:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002736:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800273a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800273e:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800283c <__ieee754_powf+0x580>
 8002742:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002746:	eee0 7a87 	vfma.f32	s15, s1, s14
 800274a:	eeb0 7a67 	vmov.f32	s14, s15
 800274e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8002752:	eef0 5a47 	vmov.f32	s11, s14
 8002756:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800275a:	ee67 6a07 	vmul.f32	s13, s14, s14
 800275e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8002762:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8002840 <__ieee754_powf+0x584>
 8002766:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8002844 <__ieee754_powf+0x588>
 800276a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800276e:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8002848 <__ieee754_powf+0x58c>
 8002772:	eee6 5a26 	vfma.f32	s11, s12, s13
 8002776:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800284c <__ieee754_powf+0x590>
 800277a:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800277e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002850 <__ieee754_powf+0x594>
 8002782:	eee6 5a26 	vfma.f32	s11, s12, s13
 8002786:	eeb0 6a47 	vmov.f32	s12, s14
 800278a:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800278e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002792:	ee67 5a06 	vmul.f32	s11, s14, s12
 8002796:	ee36 6a66 	vsub.f32	s12, s12, s13
 800279a:	eee7 7a27 	vfma.f32	s15, s14, s15
 800279e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80027a2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80027a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80027ae:	ee10 3a10 	vmov	r3, s0
 80027b2:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80027b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80027ba:	da06      	bge.n	80027ca <__ieee754_powf+0x50e>
 80027bc:	f000 f854 	bl	8002868 <scalbnf>
 80027c0:	ee20 0a08 	vmul.f32	s0, s0, s16
 80027c4:	e592      	b.n	80022ec <__ieee754_powf+0x30>
 80027c6:	2000      	movs	r0, #0
 80027c8:	e7a7      	b.n	800271a <__ieee754_powf+0x45e>
 80027ca:	ee00 3a10 	vmov	s0, r3
 80027ce:	e7f7      	b.n	80027c0 <__ieee754_powf+0x504>
 80027d0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80027d4:	e58a      	b.n	80022ec <__ieee754_powf+0x30>
 80027d6:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8002854 <__ieee754_powf+0x598>
 80027da:	e587      	b.n	80022ec <__ieee754_powf+0x30>
 80027dc:	eeb0 0a48 	vmov.f32	s0, s16
 80027e0:	e584      	b.n	80022ec <__ieee754_powf+0x30>
 80027e2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80027e6:	f43f adbb 	beq.w	8002360 <__ieee754_powf+0xa4>
 80027ea:	2502      	movs	r5, #2
 80027ec:	eeb0 0a48 	vmov.f32	s0, s16
 80027f0:	f000 f832 	bl	8002858 <fabsf>
 80027f4:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80027f8:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80027fc:	4647      	mov	r7, r8
 80027fe:	d003      	beq.n	8002808 <__ieee754_powf+0x54c>
 8002800:	f1b8 0f00 	cmp.w	r8, #0
 8002804:	f47f addb 	bne.w	80023be <__ieee754_powf+0x102>
 8002808:	2c00      	cmp	r4, #0
 800280a:	bfbc      	itt	lt
 800280c:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8002810:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8002814:	2e00      	cmp	r6, #0
 8002816:	f6bf ad69 	bge.w	80022ec <__ieee754_powf+0x30>
 800281a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800281e:	ea58 0805 	orrs.w	r8, r8, r5
 8002822:	f47f adc7 	bne.w	80023b4 <__ieee754_powf+0xf8>
 8002826:	ee70 7a40 	vsub.f32	s15, s0, s0
 800282a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800282e:	e55d      	b.n	80022ec <__ieee754_powf+0x30>
 8002830:	ff800000 	.word	0xff800000
 8002834:	3f317218 	.word	0x3f317218
 8002838:	3f317200 	.word	0x3f317200
 800283c:	35bfbe8c 	.word	0x35bfbe8c
 8002840:	b5ddea0e 	.word	0xb5ddea0e
 8002844:	3331bb4c 	.word	0x3331bb4c
 8002848:	388ab355 	.word	0x388ab355
 800284c:	bb360b61 	.word	0xbb360b61
 8002850:	3e2aaaab 	.word	0x3e2aaaab
 8002854:	00000000 	.word	0x00000000

08002858 <fabsf>:
 8002858:	ee10 3a10 	vmov	r3, s0
 800285c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002860:	ee00 3a10 	vmov	s0, r3
 8002864:	4770      	bx	lr
	...

08002868 <scalbnf>:
 8002868:	ee10 3a10 	vmov	r3, s0
 800286c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8002870:	d02b      	beq.n	80028ca <scalbnf+0x62>
 8002872:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8002876:	d302      	bcc.n	800287e <scalbnf+0x16>
 8002878:	ee30 0a00 	vadd.f32	s0, s0, s0
 800287c:	4770      	bx	lr
 800287e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8002882:	d123      	bne.n	80028cc <scalbnf+0x64>
 8002884:	4b24      	ldr	r3, [pc, #144]	@ (8002918 <scalbnf+0xb0>)
 8002886:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800291c <scalbnf+0xb4>
 800288a:	4298      	cmp	r0, r3
 800288c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002890:	db17      	blt.n	80028c2 <scalbnf+0x5a>
 8002892:	ee10 3a10 	vmov	r3, s0
 8002896:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800289a:	3a19      	subs	r2, #25
 800289c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80028a0:	4288      	cmp	r0, r1
 80028a2:	dd15      	ble.n	80028d0 <scalbnf+0x68>
 80028a4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8002920 <scalbnf+0xb8>
 80028a8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8002924 <scalbnf+0xbc>
 80028ac:	ee10 3a10 	vmov	r3, s0
 80028b0:	eeb0 7a67 	vmov.f32	s14, s15
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	bfb8      	it	lt
 80028b8:	eef0 7a66 	vmovlt.f32	s15, s13
 80028bc:	ee27 0a87 	vmul.f32	s0, s15, s14
 80028c0:	4770      	bx	lr
 80028c2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8002928 <scalbnf+0xc0>
 80028c6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80028ca:	4770      	bx	lr
 80028cc:	0dd2      	lsrs	r2, r2, #23
 80028ce:	e7e5      	b.n	800289c <scalbnf+0x34>
 80028d0:	4410      	add	r0, r2
 80028d2:	28fe      	cmp	r0, #254	@ 0xfe
 80028d4:	dce6      	bgt.n	80028a4 <scalbnf+0x3c>
 80028d6:	2800      	cmp	r0, #0
 80028d8:	dd06      	ble.n	80028e8 <scalbnf+0x80>
 80028da:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80028de:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80028e2:	ee00 3a10 	vmov	s0, r3
 80028e6:	4770      	bx	lr
 80028e8:	f110 0f16 	cmn.w	r0, #22
 80028ec:	da09      	bge.n	8002902 <scalbnf+0x9a>
 80028ee:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8002928 <scalbnf+0xc0>
 80028f2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800292c <scalbnf+0xc4>
 80028f6:	ee10 3a10 	vmov	r3, s0
 80028fa:	eeb0 7a67 	vmov.f32	s14, s15
 80028fe:	2b00      	cmp	r3, #0
 8002900:	e7d9      	b.n	80028b6 <scalbnf+0x4e>
 8002902:	3019      	adds	r0, #25
 8002904:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8002908:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800290c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8002930 <scalbnf+0xc8>
 8002910:	ee07 3a90 	vmov	s15, r3
 8002914:	e7d7      	b.n	80028c6 <scalbnf+0x5e>
 8002916:	bf00      	nop
 8002918:	ffff3cb0 	.word	0xffff3cb0
 800291c:	4c000000 	.word	0x4c000000
 8002920:	7149f2ca 	.word	0x7149f2ca
 8002924:	f149f2ca 	.word	0xf149f2ca
 8002928:	0da24260 	.word	0x0da24260
 800292c:	8da24260 	.word	0x8da24260
 8002930:	33000000 	.word	0x33000000

08002934 <with_errnof>:
 8002934:	b510      	push	{r4, lr}
 8002936:	ed2d 8b02 	vpush	{d8}
 800293a:	eeb0 8a40 	vmov.f32	s16, s0
 800293e:	4604      	mov	r4, r0
 8002940:	f7ff fc0e 	bl	8002160 <__errno>
 8002944:	eeb0 0a48 	vmov.f32	s0, s16
 8002948:	ecbd 8b02 	vpop	{d8}
 800294c:	6004      	str	r4, [r0, #0]
 800294e:	bd10      	pop	{r4, pc}

08002950 <xflowf>:
 8002950:	b130      	cbz	r0, 8002960 <xflowf+0x10>
 8002952:	eef1 7a40 	vneg.f32	s15, s0
 8002956:	ee27 0a80 	vmul.f32	s0, s15, s0
 800295a:	2022      	movs	r0, #34	@ 0x22
 800295c:	f7ff bfea 	b.w	8002934 <with_errnof>
 8002960:	eef0 7a40 	vmov.f32	s15, s0
 8002964:	e7f7      	b.n	8002956 <xflowf+0x6>
	...

08002968 <__math_uflowf>:
 8002968:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8002970 <__math_uflowf+0x8>
 800296c:	f7ff bff0 	b.w	8002950 <xflowf>
 8002970:	10000000 	.word	0x10000000

08002974 <__math_oflowf>:
 8002974:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800297c <__math_oflowf+0x8>
 8002978:	f7ff bfea 	b.w	8002950 <xflowf>
 800297c:	70000000 	.word	0x70000000

08002980 <_init>:
 8002980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002982:	bf00      	nop
 8002984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002986:	bc08      	pop	{r3}
 8002988:	469e      	mov	lr, r3
 800298a:	4770      	bx	lr

0800298c <_fini>:
 800298c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800298e:	bf00      	nop
 8002990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002992:	bc08      	pop	{r3}
 8002994:	469e      	mov	lr, r3
 8002996:	4770      	bx	lr
