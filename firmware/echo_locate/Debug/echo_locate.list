
echo_locate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002944  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002adc  08002adc  00003adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b50  08002b50  00004054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002b50  08002b50  00004054  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002b50  08002b50  00004054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b50  08002b50  00003b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b54  08002b54  00003b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08002b58  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  20000054  08002bac  00004054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  08002bac  0000453c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002c82  00000000  00000000  00004084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b78  00000000  00000000  00006d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000288  00000000  00000000  00007880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001e7  00000000  00000000  00007b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d04  00000000  00000000  00007cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000439f  00000000  00000000  0002c9f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000839d5  00000000  00000000  00030d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4767  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d40  00000000  00000000  000b47ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000b54ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000054 	.word	0x20000054
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002ac4 	.word	0x08002ac4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000058 	.word	0x20000058
 80001d4:	08002ac4 	.word	0x08002ac4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	0000      	movs	r0, r0
	...

08000b28 <main>:
void compute_event_pos(float * x, float * y, float mic0_x, float mic0_y,
					   float mic1_x, float mic1_y, float mic2_x, float mic2_y,
					   float mic1_delay, float mic2_delay);

int main(void)
{
 8000b28:	b5b0      	push	{r4, r5, r7, lr}
 8000b2a:	f5ad 7d30 	sub.w	sp, sp, #704	@ 0x2c0
 8000b2e:	af02      	add	r7, sp, #8

	sysclock_config();
 8000b30:	f000 fa88 	bl	8001044 <sysclock_config>

	q15_t mic0_state[NUM_FILTER_TAPS + SAMPLE_SIZE - 1];
	q15_t mic1_state[NUM_FILTER_TAPS + SAMPLE_SIZE - 1];
	q15_t mic2_state[NUM_FILTER_TAPS + SAMPLE_SIZE - 1];

	arm_fir_decimate_init_q15(&hfir0, NUM_FILTER_TAPS, DECIMATION_M, ftaps_q15, mic0_state, SAMPLE_SIZE);
 8000b34:	2330      	movs	r3, #48	@ 0x30
 8000b36:	9301      	str	r3, [sp, #4]
 8000b38:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	4bd6      	ldr	r3, [pc, #856]	@ (8000e98 <main+0x370>)
 8000b40:	2204      	movs	r2, #4
 8000b42:	212e      	movs	r1, #46	@ 0x2e
 8000b44:	48d5      	ldr	r0, [pc, #852]	@ (8000e9c <main+0x374>)
 8000b46:	f001 f9ee 	bl	8001f26 <arm_fir_decimate_init_q15>
	arm_fir_decimate_init_q15(&hfir1, NUM_FILTER_TAPS, DECIMATION_M, ftaps_q15, mic1_state, SAMPLE_SIZE);
 8000b4a:	2330      	movs	r3, #48	@ 0x30
 8000b4c:	9301      	str	r3, [sp, #4]
 8000b4e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	4bd0      	ldr	r3, [pc, #832]	@ (8000e98 <main+0x370>)
 8000b56:	2204      	movs	r2, #4
 8000b58:	212e      	movs	r1, #46	@ 0x2e
 8000b5a:	48d1      	ldr	r0, [pc, #836]	@ (8000ea0 <main+0x378>)
 8000b5c:	f001 f9e3 	bl	8001f26 <arm_fir_decimate_init_q15>
	arm_fir_decimate_init_q15(&hfir2, NUM_FILTER_TAPS, DECIMATION_M, ftaps_q15, mic2_state, SAMPLE_SIZE);
 8000b60:	2330      	movs	r3, #48	@ 0x30
 8000b62:	9301      	str	r3, [sp, #4]
 8000b64:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	4bcb      	ldr	r3, [pc, #812]	@ (8000e98 <main+0x370>)
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	212e      	movs	r1, #46	@ 0x2e
 8000b70:	48cc      	ldr	r0, [pc, #816]	@ (8000ea4 <main+0x37c>)
 8000b72:	f001 f9d8 	bl	8001f26 <arm_fir_decimate_init_q15>
	// sampled, filtered, and decimated microphone streams
	q15_t mic0_filtered[DECIMATION_SIZE];
	q15_t mic1_filtered[DECIMATION_SIZE];
	q15_t mic2_filtered[DECIMATION_SIZE];

	uart2_set_fcpu(84000000);
 8000b76:	48cc      	ldr	r0, [pc, #816]	@ (8000ea8 <main+0x380>)
 8000b78:	f001 fa1c 	bl	8001fb4 <uart2_set_fcpu>
	uart2_dma1_config(115200, USART_DATA_8, USART_STOP_1);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8000b84:	f001 fa26 	bl	8001fd4 <uart2_dma1_config>

	tim5_time_config();
 8000b88:	f000 fc64 	bl	8001454 <tim5_time_config>

	tim2_trig_config();
 8000b8c:	f000 fc22 	bl	80013d4 <tim2_trig_config>
	adc1_dma_config();
 8000b90:	f000 fae6 	bl	8001160 <adc1_dma_config>
//	GPIOA->MODER |= GPIO_MODER_MODER10_0;
//
//	GPIOA->MODER &= ~GPIO_MODER_MODER8;
//	GPIOA->MODER |= GPIO_MODER_MODER8_0;

	float mic0_timestamp = 0, mic1_timestamp = 0, mic2_timestamp = 0;
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8000b9c:	f04f 0300 	mov.w	r3, #0
 8000ba0:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 8000ba4:	f04f 0300 	mov.w	r3, #0
 8000ba8:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
	float prev_timestamp = 0;
 8000bac:	f04f 0300 	mov.w	r3, #0
 8000bb0:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8

	uint8_t detection_cnt = 0;						// # of microphones that have detected an event
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7

	uint32_t prev_ticks = 0, ticks = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0

	while (1)
	{

//		GPIOA->ODR |= GPIO_ODR_OD10;
		while (!!(DMA2_Stream0->CR & DMA_SxCR_CT) == dma_tgt);		// wait for stream to complete
 8000bc6:	bf00      	nop
 8000bc8:	4bb8      	ldr	r3, [pc, #736]	@ (8000eac <main+0x384>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	bf14      	ite	ne
 8000bd4:	2301      	movne	r3, #1
 8000bd6:	2300      	moveq	r3, #0
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4bb4      	ldr	r3, [pc, #720]	@ (8000eb0 <main+0x388>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d0f1      	beq.n	8000bc8 <main+0xa0>
		prev_ticks = ticks;
 8000be4:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8000be8:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
		ticks = TIM5->CNT;
 8000bec:	4bb1      	ldr	r3, [pc, #708]	@ (8000eb4 <main+0x38c>)
 8000bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bf0:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
//		GPIOA->ODR &= ~GPIO_ODR_OD10;
		dma_tgt = !dma_tgt;											// switch DMA targets
 8000bf4:	4bae      	ldr	r3, [pc, #696]	@ (8000eb0 <main+0x388>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	bf0c      	ite	eq
 8000bfc:	2301      	moveq	r3, #1
 8000bfe:	2300      	movne	r3, #0
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	461a      	mov	r2, r3
 8000c04:	4baa      	ldr	r3, [pc, #680]	@ (8000eb0 <main+0x388>)
 8000c06:	701a      	strb	r2, [r3, #0]
		DMA2->LIFCR |= DMA_LIFCR_CTCIF0 | DMA_LIFCR_CHTIF0;			// clear transfer complete and half complete flag
 8000c08:	4bab      	ldr	r3, [pc, #684]	@ (8000eb8 <main+0x390>)
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	4aaa      	ldr	r2, [pc, #680]	@ (8000eb8 <main+0x390>)
 8000c0e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000c12:	6093      	str	r3, [r2, #8]

		stream_splice();
 8000c14:	f000 fc4a 	bl	80014ac <stream_splice>

//		GPIOA->ODR |= GPIO_ODR_OD8;

		// Cross correlation instead of filtering?
		arm_fir_decimate_fast_q15(&hfir0, mic0_samp, mic0_filtered, SAMPLE_SIZE);
 8000c18:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8000c1c:	2330      	movs	r3, #48	@ 0x30
 8000c1e:	49a7      	ldr	r1, [pc, #668]	@ (8000ebc <main+0x394>)
 8000c20:	489e      	ldr	r0, [pc, #632]	@ (8000e9c <main+0x374>)
 8000c22:	f000 ffcc 	bl	8001bbe <arm_fir_decimate_fast_q15>
		arm_fir_decimate_fast_q15(&hfir1, mic1_samp, mic1_filtered, SAMPLE_SIZE);
 8000c26:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000c2a:	2330      	movs	r3, #48	@ 0x30
 8000c2c:	49a4      	ldr	r1, [pc, #656]	@ (8000ec0 <main+0x398>)
 8000c2e:	489c      	ldr	r0, [pc, #624]	@ (8000ea0 <main+0x378>)
 8000c30:	f000 ffc5 	bl	8001bbe <arm_fir_decimate_fast_q15>
		arm_fir_decimate_fast_q15(&hfir2, mic2_samp, mic2_filtered, SAMPLE_SIZE);
 8000c34:	f107 0214 	add.w	r2, r7, #20
 8000c38:	2330      	movs	r3, #48	@ 0x30
 8000c3a:	49a2      	ldr	r1, [pc, #648]	@ (8000ec4 <main+0x39c>)
 8000c3c:	4899      	ldr	r0, [pc, #612]	@ (8000ea4 <main+0x37c>)
 8000c3e:	f000 ffbe 	bl	8001bbe <arm_fir_decimate_fast_q15>

		uint16_t mic0_max_ind, mic1_max_ind, mic2_max_ind;			// hold indices of max values in filtered sample (0-DECIMATION_SIZE)
		find_filter_peaks(mic0_filtered, mic1_filtered, mic2_filtered, &mic0_max_ind, &mic1_max_ind, &mic2_max_ind);
 8000c42:	f107 0412 	add.w	r4, r7, #18
 8000c46:	f107 0214 	add.w	r2, r7, #20
 8000c4a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000c4e:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8000c52:	f107 030e 	add.w	r3, r7, #14
 8000c56:	9301      	str	r3, [sp, #4]
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	9300      	str	r3, [sp, #0]
 8000c5e:	4623      	mov	r3, r4
 8000c60:	f000 fca8 	bl	80015b4 <find_filter_peaks>

		// reference time is based on # of samples
		float ref_time = prev_ticks * TIME_PERIOD;
 8000c64:	f8d7 029c 	ldr.w	r0, [r7, #668]	@ 0x29c
 8000c68:	f7ff fbf8 	bl	800045c <__aeabi_ui2d>
 8000c6c:	a384      	add	r3, pc, #528	@ (adr r3, 8000e80 <main+0x358>)
 8000c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c72:	f7ff fd97 	bl	80007a4 <__aeabi_ddiv>
 8000c76:	4602      	mov	r2, r0
 8000c78:	460b      	mov	r3, r1
 8000c7a:	4610      	mov	r0, r2
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f7ff ff01 	bl	8000a84 <__aeabi_d2f>
 8000c82:	4603      	mov	r3, r0
 8000c84:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298

		// if a new event has been detected, update time stamps and event count
		if ((abs(mic0_filtered[mic0_max_ind]) > ENERGY_THRESH) && (ref_time - mic0_timestamp > EVENT_DB_TIME))
 8000c88:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8000c8c:	f2a3 23a6 	subw	r3, r3, #678	@ 0x2a6
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8000c98:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8000c9c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	bfb8      	it	lt
 8000ca4:	425b      	neglt	r3, r3
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000cac:	d94f      	bls.n	8000d4e <main+0x226>
 8000cae:	ed97 7aa6 	vldr	s14, [r7, #664]	@ 0x298
 8000cb2:	edd7 7aad 	vldr	s15, [r7, #692]	@ 0x2b4
 8000cb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cba:	ee17 0a90 	vmov	r0, s15
 8000cbe:	f7ff fbef 	bl	80004a0 <__aeabi_f2d>
 8000cc2:	a371      	add	r3, pc, #452	@ (adr r3, 8000e88 <main+0x360>)
 8000cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cc8:	f7ff fed2 	bl	8000a70 <__aeabi_dcmpgt>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d03d      	beq.n	8000d4e <main+0x226>
		{
			mic0_timestamp = prev_ticks * TIME_PERIOD + mic0_max_ind * SAMPLE_PERIOD * DECIMATION_M;
 8000cd2:	f8d7 029c 	ldr.w	r0, [r7, #668]	@ 0x29c
 8000cd6:	f7ff fbc1 	bl	800045c <__aeabi_ui2d>
 8000cda:	a369      	add	r3, pc, #420	@ (adr r3, 8000e80 <main+0x358>)
 8000cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce0:	f7ff fd60 	bl	80007a4 <__aeabi_ddiv>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	4614      	mov	r4, r2
 8000cea:	461d      	mov	r5, r3
 8000cec:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8000cf0:	f2a3 23a6 	subw	r3, r3, #678	@ 0x2a6
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fbc0 	bl	800047c <__aeabi_i2d>
 8000cfc:	a364      	add	r3, pc, #400	@ (adr r3, 8000e90 <main+0x368>)
 8000cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d02:	f7ff fd4f 	bl	80007a4 <__aeabi_ddiv>
 8000d06:	4602      	mov	r2, r0
 8000d08:	460b      	mov	r3, r1
 8000d0a:	4610      	mov	r0, r2
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f04f 0200 	mov.w	r2, #0
 8000d12:	4b6d      	ldr	r3, [pc, #436]	@ (8000ec8 <main+0x3a0>)
 8000d14:	f7ff fc1c 	bl	8000550 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4620      	mov	r0, r4
 8000d1e:	4629      	mov	r1, r5
 8000d20:	f7ff fa60 	bl	80001e4 <__adddf3>
 8000d24:	4602      	mov	r2, r0
 8000d26:	460b      	mov	r3, r1
 8000d28:	4610      	mov	r0, r2
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	f7ff feaa 	bl	8000a84 <__aeabi_d2f>
 8000d30:	4603      	mov	r3, r0
 8000d32:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
			mic_detected_event[0] = 1;
 8000d36:	4b65      	ldr	r3, [pc, #404]	@ (8000ecc <main+0x3a4>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	701a      	strb	r2, [r3, #0]
			detection_cnt++;
 8000d3c:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8000d40:	3301      	adds	r3, #1
 8000d42:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
			prev_timestamp = mic0_timestamp;
 8000d46:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8000d4a:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
		}

		if ((abs(mic1_filtered[mic1_max_ind]) > ENERGY_THRESH) && (ref_time - mic1_timestamp > EVENT_DB_TIME))
 8000d4e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8000d52:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8000d56:	881b      	ldrh	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8000d5e:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8000d62:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	bfb8      	it	lt
 8000d6a:	425b      	neglt	r3, r3
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000d72:	d94f      	bls.n	8000e14 <main+0x2ec>
 8000d74:	ed97 7aa6 	vldr	s14, [r7, #664]	@ 0x298
 8000d78:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8000d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d80:	ee17 0a90 	vmov	r0, s15
 8000d84:	f7ff fb8c 	bl	80004a0 <__aeabi_f2d>
 8000d88:	a33f      	add	r3, pc, #252	@ (adr r3, 8000e88 <main+0x360>)
 8000d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d8e:	f7ff fe6f 	bl	8000a70 <__aeabi_dcmpgt>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d03d      	beq.n	8000e14 <main+0x2ec>
		{
			// account for sample delay later
			mic1_timestamp = prev_ticks * TIME_PERIOD + mic1_max_ind * SAMPLE_PERIOD * DECIMATION_M;
 8000d98:	f8d7 029c 	ldr.w	r0, [r7, #668]	@ 0x29c
 8000d9c:	f7ff fb5e 	bl	800045c <__aeabi_ui2d>
 8000da0:	a337      	add	r3, pc, #220	@ (adr r3, 8000e80 <main+0x358>)
 8000da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da6:	f7ff fcfd 	bl	80007a4 <__aeabi_ddiv>
 8000daa:	4602      	mov	r2, r0
 8000dac:	460b      	mov	r3, r1
 8000dae:	4614      	mov	r4, r2
 8000db0:	461d      	mov	r5, r3
 8000db2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8000db6:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fb5d 	bl	800047c <__aeabi_i2d>
 8000dc2:	a333      	add	r3, pc, #204	@ (adr r3, 8000e90 <main+0x368>)
 8000dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc8:	f7ff fcec 	bl	80007a4 <__aeabi_ddiv>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f04f 0200 	mov.w	r2, #0
 8000dd8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ec8 <main+0x3a0>)
 8000dda:	f7ff fbb9 	bl	8000550 <__aeabi_dmul>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	4620      	mov	r0, r4
 8000de4:	4629      	mov	r1, r5
 8000de6:	f7ff f9fd 	bl	80001e4 <__adddf3>
 8000dea:	4602      	mov	r2, r0
 8000dec:	460b      	mov	r3, r1
 8000dee:	4610      	mov	r0, r2
 8000df0:	4619      	mov	r1, r3
 8000df2:	f7ff fe47 	bl	8000a84 <__aeabi_d2f>
 8000df6:	4603      	mov	r3, r0
 8000df8:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
			mic_detected_event[1] = 1;
 8000dfc:	4b33      	ldr	r3, [pc, #204]	@ (8000ecc <main+0x3a4>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	705a      	strb	r2, [r3, #1]
			detection_cnt++;
 8000e02:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8000e06:	3301      	adds	r3, #1
 8000e08:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
			prev_timestamp = mic1_timestamp;
 8000e0c:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8000e10:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
		}

		if ((abs(mic2_filtered[mic2_max_ind]) > ENERGY_THRESH) && (ref_time - mic2_timestamp > EVENT_DB_TIME))
 8000e14:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8000e18:	f2a3 23aa 	subw	r3, r3, #682	@ 0x2aa
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8000e24:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8000e28:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	bfb8      	it	lt
 8000e30:	425b      	neglt	r3, r3
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e38:	d97b      	bls.n	8000f32 <main+0x40a>
 8000e3a:	ed97 7aa6 	vldr	s14, [r7, #664]	@ 0x298
 8000e3e:	edd7 7aab 	vldr	s15, [r7, #684]	@ 0x2ac
 8000e42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e46:	ee17 0a90 	vmov	r0, s15
 8000e4a:	f7ff fb29 	bl	80004a0 <__aeabi_f2d>
 8000e4e:	a30e      	add	r3, pc, #56	@ (adr r3, 8000e88 <main+0x360>)
 8000e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e54:	f7ff fe0c 	bl	8000a70 <__aeabi_dcmpgt>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d069      	beq.n	8000f32 <main+0x40a>
		{
			// account for sample delay later
			mic2_timestamp = prev_ticks * TIME_PERIOD + mic2_max_ind * SAMPLE_PERIOD * DECIMATION_M;
 8000e5e:	f8d7 029c 	ldr.w	r0, [r7, #668]	@ 0x29c
 8000e62:	f7ff fafb 	bl	800045c <__aeabi_ui2d>
 8000e66:	a306      	add	r3, pc, #24	@ (adr r3, 8000e80 <main+0x358>)
 8000e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6c:	f7ff fc9a 	bl	80007a4 <__aeabi_ddiv>
 8000e70:	4602      	mov	r2, r0
 8000e72:	460b      	mov	r3, r1
 8000e74:	4614      	mov	r4, r2
 8000e76:	461d      	mov	r5, r3
 8000e78:	e02a      	b.n	8000ed0 <main+0x3a8>
 8000e7a:	bf00      	nop
 8000e7c:	f3af 8000 	nop.w
 8000e80:	00000000 	.word	0x00000000
 8000e84:	40f86a00 	.word	0x40f86a00
 8000e88:	9999999a 	.word	0x9999999a
 8000e8c:	3fb99999 	.word	0x3fb99999
 8000e90:	00000000 	.word	0x00000000
 8000e94:	40e38800 	.word	0x40e38800
 8000e98:	08002adc 	.word	0x08002adc
 8000e9c:	20000070 	.word	0x20000070
 8000ea0:	2000007c 	.word	0x2000007c
 8000ea4:	20000088 	.word	0x20000088
 8000ea8:	0501bd00 	.word	0x0501bd00
 8000eac:	40026410 	.word	0x40026410
 8000eb0:	200003f4 	.word	0x200003f4
 8000eb4:	40000c00 	.word	0x40000c00
 8000eb8:	40026400 	.word	0x40026400
 8000ebc:	200002d4 	.word	0x200002d4
 8000ec0:	20000334 	.word	0x20000334
 8000ec4:	20000394 	.word	0x20000394
 8000ec8:	40100000 	.word	0x40100000
 8000ecc:	200003f8 	.word	0x200003f8
 8000ed0:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8000ed4:	f2a3 23aa 	subw	r3, r3, #682	@ 0x2aa
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff face 	bl	800047c <__aeabi_i2d>
 8000ee0:	a356      	add	r3, pc, #344	@ (adr r3, 800103c <main+0x514>)
 8000ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee6:	f7ff fc5d 	bl	80007a4 <__aeabi_ddiv>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	4610      	mov	r0, r2
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f04f 0200 	mov.w	r2, #0
 8000ef6:	4b4c      	ldr	r3, [pc, #304]	@ (8001028 <main+0x500>)
 8000ef8:	f7ff fb2a 	bl	8000550 <__aeabi_dmul>
 8000efc:	4602      	mov	r2, r0
 8000efe:	460b      	mov	r3, r1
 8000f00:	4620      	mov	r0, r4
 8000f02:	4629      	mov	r1, r5
 8000f04:	f7ff f96e 	bl	80001e4 <__adddf3>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f7ff fdb8 	bl	8000a84 <__aeabi_d2f>
 8000f14:	4603      	mov	r3, r0
 8000f16:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
			mic_detected_event[2] = 1;
 8000f1a:	4b44      	ldr	r3, [pc, #272]	@ (800102c <main+0x504>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	709a      	strb	r2, [r3, #2]
			detection_cnt++;
 8000f20:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8000f24:	3301      	adds	r3, #1
 8000f26:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
			prev_timestamp = mic2_timestamp;
 8000f2a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8000f2e:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
		mic_detected_event[0] = 1;
		mic_detected_event[1] = 1;
		mic_detected_event[2] = 1;
		*/

		if (detection_cnt >= 3)
 8000f32:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d954      	bls.n	8000fe4 <main+0x4bc>
		{
			if (detection_cnt == 3 && mic_detected_event[0] && mic_detected_event[1] && mic_detected_event[2])
 8000f3a:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	d143      	bne.n	8000fca <main+0x4a2>
 8000f42:	4b3a      	ldr	r3, [pc, #232]	@ (800102c <main+0x504>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d03f      	beq.n	8000fca <main+0x4a2>
 8000f4a:	4b38      	ldr	r3, [pc, #224]	@ (800102c <main+0x504>)
 8000f4c:	785b      	ldrb	r3, [r3, #1]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d03b      	beq.n	8000fca <main+0x4a2>
 8000f52:	4b36      	ldr	r3, [pc, #216]	@ (800102c <main+0x504>)
 8000f54:	789b      	ldrb	r3, [r3, #2]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d037      	beq.n	8000fca <main+0x4a2>
			{
				// GOOD state
				// mic0 is the reference
				float mic1_delay = mic1_timestamp - mic0_timestamp;
 8000f5a:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 8000f5e:	edd7 7aad 	vldr	s15, [r7, #692]	@ 0x2b4
 8000f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f66:	edc7 7aa5 	vstr	s15, [r7, #660]	@ 0x294
				float mic2_delay = mic2_timestamp - mic0_timestamp;
 8000f6a:	ed97 7aab 	vldr	s14, [r7, #684]	@ 0x2ac
 8000f6e:	edd7 7aad 	vldr	s15, [r7, #692]	@ 0x2b4
 8000f72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f76:	edc7 7aa4 	vstr	s15, [r7, #656]	@ 0x290
					float coords_f[2];			// (x, y)
					uint8_t serial[8];
				} coords;

				// initial guess
				coords.coords_f[0] = 0.23;
 8000f7a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8000f7e:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000f82:	4a2b      	ldr	r2, [pc, #172]	@ (8001030 <main+0x508>)
 8000f84:	601a      	str	r2, [r3, #0]
				coords.coords_f[1] = 0.38;
 8000f86:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8000f8a:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000f8e:	4a29      	ldr	r2, [pc, #164]	@ (8001034 <main+0x50c>)
 8000f90:	605a      	str	r2, [r3, #4]

				compute_event_pos(&coords.coords_f[0], &coords.coords_f[1], MIC0_XPOS, MIC0_YPOS, MIC1_XPOS, MIC1_YPOS, MIC2_XPOS, MIC2_YPOS, mic1_delay, mic2_delay);
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	1d1a      	adds	r2, r3, #4
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	edd7 3aa4 	vldr	s7, [r7, #656]	@ 0x290
 8000f9c:	ed97 3aa5 	vldr	s6, [r7, #660]	@ 0x294
 8000fa0:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 8000fa4:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 8000fa8:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8000fac:	ed9f 1a22 	vldr	s2, [pc, #136]	@ 8001038 <main+0x510>
 8000fb0:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8001038 <main+0x510>
 8000fb4:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8001038 <main+0x510>
 8000fb8:	4611      	mov	r1, r2
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 fb6c 	bl	8001698 <compute_event_pos>
				uart2_dma1_write(8, coords.serial);
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	2008      	movs	r0, #8
 8000fc6:	f001 f927 	bl	8002218 <uart2_dma1_write>
			{
				// ERROR state
			}

			// reset event detection
			detection_cnt = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
			mic_detected_event[0] = 0;
 8000fd0:	4b16      	ldr	r3, [pc, #88]	@ (800102c <main+0x504>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
			mic_detected_event[1] = 0;
 8000fd6:	4b15      	ldr	r3, [pc, #84]	@ (800102c <main+0x504>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	705a      	strb	r2, [r3, #1]
			mic_detected_event[2] = 0;
 8000fdc:	4b13      	ldr	r3, [pc, #76]	@ (800102c <main+0x504>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	709a      	strb	r2, [r3, #2]
 8000fe2:	e5f0      	b.n	8000bc6 <main+0x9e>
		}
		else if (detection_cnt != 0 && ref_time - prev_timestamp > TIMEOUT_S)
 8000fe4:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f43f adec 	beq.w	8000bc6 <main+0x9e>
 8000fee:	ed97 7aa6 	vldr	s14, [r7, #664]	@ 0x298
 8000ff2:	edd7 7aaa 	vldr	s15, [r7, #680]	@ 0x2a8
 8000ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ffa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ffe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001006:	dd0b      	ble.n	8001020 <main+0x4f8>
		{
			detection_cnt = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
			mic_detected_event[0] = 0;
 800100e:	4b07      	ldr	r3, [pc, #28]	@ (800102c <main+0x504>)
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
			mic_detected_event[1] = 0;
 8001014:	4b05      	ldr	r3, [pc, #20]	@ (800102c <main+0x504>)
 8001016:	2200      	movs	r2, #0
 8001018:	705a      	strb	r2, [r3, #1]
			mic_detected_event[2] = 0;
 800101a:	4b04      	ldr	r3, [pc, #16]	@ (800102c <main+0x504>)
 800101c:	2200      	movs	r2, #0
 800101e:	709a      	strb	r2, [r3, #2]
	{
 8001020:	e5d1      	b.n	8000bc6 <main+0x9e>
 8001022:	bf00      	nop
 8001024:	f3af 8000 	nop.w
 8001028:	40100000 	.word	0x40100000
 800102c:	200003f8 	.word	0x200003f8
 8001030:	3e6b851f 	.word	0x3e6b851f
 8001034:	3ec28f5c 	.word	0x3ec28f5c
	...
 8001040:	40e38800 	.word	0x40e38800

08001044 <sysclock_config>:
//		GPIOA->ODR &= ~GPIO_ODR_OD8;
	}
}

void sysclock_config(void)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
	// 16 MHz HSI oscillator is default on reset, but select anyways
	RCC->CR |= RCC_CR_HSION;
 800104a:	4b42      	ldr	r3, [pc, #264]	@ (8001154 <sysclock_config+0x110>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a41      	ldr	r2, [pc, #260]	@ (8001154 <sysclock_config+0x110>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6013      	str	r3, [r2, #0]
	// wait for HSI to be ready
	while (!((RCC->CR) & RCC_CR_HSIRDY));
 8001056:	bf00      	nop
 8001058:	4b3e      	ldr	r3, [pc, #248]	@ (8001154 <sysclock_config+0x110>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0f9      	beq.n	8001058 <sysclock_config+0x14>

	// enable power interface clock for APB1
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001064:	4b3b      	ldr	r3, [pc, #236]	@ (8001154 <sysclock_config+0x110>)
 8001066:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800106a:	641a      	str	r2, [r3, #64]	@ 0x40

	// configure VCO to scale 2 per CubeMX
	PWR->CR |= PWR_CR_VOS_1;
 800106c:	4b3a      	ldr	r3, [pc, #232]	@ (8001158 <sysclock_config+0x114>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a39      	ldr	r2, [pc, #228]	@ (8001158 <sysclock_config+0x114>)
 8001072:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001076:	6013      	str	r3, [r2, #0]
	PWR->CR &= ~PWR_CR_VOS_0;
 8001078:	4b37      	ldr	r3, [pc, #220]	@ (8001158 <sysclock_config+0x114>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a36      	ldr	r2, [pc, #216]	@ (8001158 <sysclock_config+0x114>)
 800107e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001082:	6013      	str	r3, [r2, #0]

	// configure FLASH
	// instruction cache, prefetch enable, and data cache enabled
	uint32_t flash;
	flash = FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN;
 8001084:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001088:	60fb      	str	r3, [r7, #12]
	flash |= 2;		// 2 wait states for flash
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	60fb      	str	r3, [r7, #12]
	FLASH->ACR = flash;
 8001092:	4a32      	ldr	r2, [pc, #200]	@ (800115c <sysclock_config+0x118>)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6013      	str	r3, [r2, #0]

	// configure bus prescalers
	uint32_t cfgr = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_PPRE2_2;		// APB2 prescaler of 1 (84MHz)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80010a2:	60bb      	str	r3, [r7, #8]
	cfgr |= RCC_CFGR_PPRE1_2;		// APB1 prescaler of 2 (42MHZ)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010aa:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_HPRE;			// AHB prescaler of 1 (84MHz)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80010b2:	60bb      	str	r3, [r7, #8]
	RCC->CFGR = cfgr;
 80010b4:	4a27      	ldr	r2, [pc, #156]	@ (8001154 <sysclock_config+0x110>)
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	6093      	str	r3, [r2, #8]

	// configure main PLL
	uint32_t pll_cfg = RCC->PLLCFGR;
 80010ba:	4b26      	ldr	r3, [pc, #152]	@ (8001154 <sysclock_config+0x110>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	607b      	str	r3, [r7, #4]
	pll_cfg &= ~RCC_PLLCFGR_PLLQ;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80010c6:	607b      	str	r3, [r7, #4]
	pll_cfg |= RCC_PLLCFGR_PLLQ_2; // configure Q prescaler for USB, SDIO, RNG clocks (/4)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80010ce:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLP;	// main PLL division factor of 2
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80010d6:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLN;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80010de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80010e2:	607b      	str	r3, [r7, #4]
	pll_cfg |= 168UL << 6;	// pll multiplication factor for VCO (x168)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f443 5328 	orr.w	r3, r3, #10752	@ 0x2a00
 80010ea:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLM;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010f2:	607b      	str	r3, [r7, #4]
	pll_cfg |= 16UL << 0;	// pll division factor for main PLL and audio PLL (/16)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f043 0310 	orr.w	r3, r3, #16
 80010fa:	607b      	str	r3, [r7, #4]

	RCC->PLLCFGR = pll_cfg;
 80010fc:	4a15      	ldr	r2, [pc, #84]	@ (8001154 <sysclock_config+0x110>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6053      	str	r3, [r2, #4]

	// enable PLL and wait for ready
	RCC->CR |= RCC_CR_PLLON;
 8001102:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <sysclock_config+0x110>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a13      	ldr	r2, [pc, #76]	@ (8001154 <sysclock_config+0x110>)
 8001108:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800110c:	6013      	str	r3, [r2, #0]
	while (!((RCC->CR) & RCC_CR_PLLRDY));
 800110e:	bf00      	nop
 8001110:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <sysclock_config+0x110>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0f9      	beq.n	8001110 <sysclock_config+0xcc>

	// select clock source
	cfgr = RCC->CFGR;
 800111c:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <sysclock_config+0x110>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	60bb      	str	r3, [r7, #8]
	cfgr |= RCC_CFGR_SW_1;		// select PLL as system clock
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_SW_0;
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	f023 0301 	bic.w	r3, r3, #1
 8001130:	60bb      	str	r3, [r7, #8]
	RCC->CFGR = cfgr;
 8001132:	4a08      	ldr	r2, [pc, #32]	@ (8001154 <sysclock_config+0x110>)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	6093      	str	r3, [r2, #8]

	// wait for PLL clock source to become active
	while (!((RCC->CFGR) & RCC_CFGR_SWS_1));
 8001138:	bf00      	nop
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <sysclock_config+0x110>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f003 0308 	and.w	r3, r3, #8
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f9      	beq.n	800113a <sysclock_config+0xf6>
}
 8001146:	bf00      	nop
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	40023800 	.word	0x40023800
 8001158:	40007000 	.word	0x40007000
 800115c:	40023c00 	.word	0x40023c00

08001160 <adc1_dma_config>:

void adc1_dma_config(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;				// enable ADC1 clock
 8001164:	4b93      	ldr	r3, [pc, #588]	@ (80013b4 <adc1_dma_config+0x254>)
 8001166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001168:	4a92      	ldr	r2, [pc, #584]	@ (80013b4 <adc1_dma_config+0x254>)
 800116a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800116e:	6453      	str	r3, [r2, #68]	@ 0x44
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;			// enable GPIOA clock
 8001170:	4b90      	ldr	r3, [pc, #576]	@ (80013b4 <adc1_dma_config+0x254>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001174:	4a8f      	ldr	r2, [pc, #572]	@ (80013b4 <adc1_dma_config+0x254>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	6313      	str	r3, [r2, #48]	@ 0x30

	// PA0 as analog input
	GPIOA->MODER |= GPIO_MODER_MODER0_0 | GPIO_MODER_MODER0_1;
 800117c:	4b8e      	ldr	r3, [pc, #568]	@ (80013b8 <adc1_dma_config+0x258>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a8d      	ldr	r2, [pc, #564]	@ (80013b8 <adc1_dma_config+0x258>)
 8001182:	f043 0303 	orr.w	r3, r3, #3
 8001186:	6013      	str	r3, [r2, #0]
	// PA1 as analog input
	GPIOA->MODER |= GPIO_MODER_MODER1_0 | GPIO_MODER_MODER1_1;
 8001188:	4b8b      	ldr	r3, [pc, #556]	@ (80013b8 <adc1_dma_config+0x258>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a8a      	ldr	r2, [pc, #552]	@ (80013b8 <adc1_dma_config+0x258>)
 800118e:	f043 030c 	orr.w	r3, r3, #12
 8001192:	6013      	str	r3, [r2, #0]
	// PA4 as analog input
	GPIOA->MODER |= GPIO_MODER_MODER4_0 | GPIO_MODER_MODER4_1;
 8001194:	4b88      	ldr	r3, [pc, #544]	@ (80013b8 <adc1_dma_config+0x258>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a87      	ldr	r2, [pc, #540]	@ (80013b8 <adc1_dma_config+0x258>)
 800119a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800119e:	6013      	str	r3, [r2, #0]

	ADC1->CR2 &= ~ADC_CR2_ADON;						// turn off ADC to configure
 80011a0:	4b86      	ldr	r3, [pc, #536]	@ (80013bc <adc1_dma_config+0x25c>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	4a85      	ldr	r2, [pc, #532]	@ (80013bc <adc1_dma_config+0x25c>)
 80011a6:	f023 0301 	bic.w	r3, r3, #1
 80011aa:	6093      	str	r3, [r2, #8]

	// APB2 clock (84 MHz) / 4 = 21 MHz
	// MAX ADC clock freq is 36 MHz (pg 106 datasheet)
	ADC->CCR &= ~ADC_CCR_ADCPRE;
 80011ac:	4b84      	ldr	r3, [pc, #528]	@ (80013c0 <adc1_dma_config+0x260>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	4a83      	ldr	r2, [pc, #524]	@ (80013c0 <adc1_dma_config+0x260>)
 80011b2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80011b6:	6053      	str	r3, [r2, #4]
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 80011b8:	4b81      	ldr	r3, [pc, #516]	@ (80013c0 <adc1_dma_config+0x260>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	4a80      	ldr	r2, [pc, #512]	@ (80013c0 <adc1_dma_config+0x260>)
 80011be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011c2:	6053      	str	r3, [r2, #4]

	// trigger detection on rising edge
	ADC1->CR2 |= ADC_CR2_EXTEN_0;
 80011c4:	4b7d      	ldr	r3, [pc, #500]	@ (80013bc <adc1_dma_config+0x25c>)
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	4a7c      	ldr	r2, [pc, #496]	@ (80013bc <adc1_dma_config+0x25c>)
 80011ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ce:	6093      	str	r3, [r2, #8]
	ADC1->CR2 &= ~ADC_CR2_EXTEN_1;
 80011d0:	4b7a      	ldr	r3, [pc, #488]	@ (80013bc <adc1_dma_config+0x25c>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	4a79      	ldr	r2, [pc, #484]	@ (80013bc <adc1_dma_config+0x25c>)
 80011d6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80011da:	6093      	str	r3, [r2, #8]

	// TIM2 TRGO event
	ADC1->CR2 |= ADC_CR2_EXTSEL_1 | ADC_CR2_EXTSEL_2;
 80011dc:	4b77      	ldr	r3, [pc, #476]	@ (80013bc <adc1_dma_config+0x25c>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	4a76      	ldr	r2, [pc, #472]	@ (80013bc <adc1_dma_config+0x25c>)
 80011e2:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 80011e6:	6093      	str	r3, [r2, #8]
	ADC1->CR2 &= ~(ADC_CR2_EXTSEL_0 | ADC_CR2_EXTSEL_3);
 80011e8:	4b74      	ldr	r3, [pc, #464]	@ (80013bc <adc1_dma_config+0x25c>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	4a73      	ldr	r2, [pc, #460]	@ (80013bc <adc1_dma_config+0x25c>)
 80011ee:	f023 6310 	bic.w	r3, r3, #150994944	@ 0x9000000
 80011f2:	6093      	str	r3, [r2, #8]

	// Scan mode to convert all 3 channels
	ADC1->CR1 |= ADC_CR1_SCAN;
 80011f4:	4b71      	ldr	r3, [pc, #452]	@ (80013bc <adc1_dma_config+0x25c>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	4a70      	ldr	r2, [pc, #448]	@ (80013bc <adc1_dma_config+0x25c>)
 80011fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011fe:	6053      	str	r3, [r2, #4]

	// EOC bit set at end of each sequence of regular conversions
	ADC1->CR2 &= ~ADC_CR2_EOCS;
 8001200:	4b6e      	ldr	r3, [pc, #440]	@ (80013bc <adc1_dma_config+0x25c>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	4a6d      	ldr	r2, [pc, #436]	@ (80013bc <adc1_dma_config+0x25c>)
 8001206:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800120a:	6093      	str	r3, [r2, #8]

	// 3 cycles before sample
	ADC1->SMPR2 &= ~(ADC_SMPR2_SMP0 | ADC_SMPR2_SMP1 | ADC_SMPR2_SMP2);
 800120c:	4b6b      	ldr	r3, [pc, #428]	@ (80013bc <adc1_dma_config+0x25c>)
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	4a6a      	ldr	r2, [pc, #424]	@ (80013bc <adc1_dma_config+0x25c>)
 8001212:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8001216:	f023 0301 	bic.w	r3, r3, #1
 800121a:	6113      	str	r3, [r2, #16]

	// 3 conversions per sequence
	ADC1->SQR1 &= ~ADC_SQR1_L;
 800121c:	4b67      	ldr	r3, [pc, #412]	@ (80013bc <adc1_dma_config+0x25c>)
 800121e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001220:	4a66      	ldr	r2, [pc, #408]	@ (80013bc <adc1_dma_config+0x25c>)
 8001222:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001226:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC1->SQR1 |= ADC_SQR1_L_1;
 8001228:	4b64      	ldr	r3, [pc, #400]	@ (80013bc <adc1_dma_config+0x25c>)
 800122a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800122c:	4a63      	ldr	r2, [pc, #396]	@ (80013bc <adc1_dma_config+0x25c>)
 800122e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001232:	62d3      	str	r3, [r2, #44]	@ 0x2c

	// channel 0 (PA0 --> ADC1_IN0) is first conversion
	ADC1->SQR3 &= ~ADC_SQR3_SQ1;
 8001234:	4b61      	ldr	r3, [pc, #388]	@ (80013bc <adc1_dma_config+0x25c>)
 8001236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001238:	4a60      	ldr	r2, [pc, #384]	@ (80013bc <adc1_dma_config+0x25c>)
 800123a:	f023 031f 	bic.w	r3, r3, #31
 800123e:	6353      	str	r3, [r2, #52]	@ 0x34

	// channel 1 (PA1 --> ADC1_IN1) is second conversion
	ADC1->SQR3 &= ~ADC_SQR3_SQ2;
 8001240:	4b5e      	ldr	r3, [pc, #376]	@ (80013bc <adc1_dma_config+0x25c>)
 8001242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001244:	4a5d      	ldr	r2, [pc, #372]	@ (80013bc <adc1_dma_config+0x25c>)
 8001246:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 800124a:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC1->SQR3 |= ADC_SQR3_SQ2_0;
 800124c:	4b5b      	ldr	r3, [pc, #364]	@ (80013bc <adc1_dma_config+0x25c>)
 800124e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001250:	4a5a      	ldr	r2, [pc, #360]	@ (80013bc <adc1_dma_config+0x25c>)
 8001252:	f043 0320 	orr.w	r3, r3, #32
 8001256:	6353      	str	r3, [r2, #52]	@ 0x34

	// channel 4 (PA4 --> ADC1_IN4) is third conversion
	ADC1->SQR3 &= ~ADC_SQR3_SQ3;
 8001258:	4b58      	ldr	r3, [pc, #352]	@ (80013bc <adc1_dma_config+0x25c>)
 800125a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800125c:	4a57      	ldr	r2, [pc, #348]	@ (80013bc <adc1_dma_config+0x25c>)
 800125e:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8001262:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC1->SQR3 |= ADC_SQR3_SQ3_2;
 8001264:	4b55      	ldr	r3, [pc, #340]	@ (80013bc <adc1_dma_config+0x25c>)
 8001266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001268:	4a54      	ldr	r2, [pc, #336]	@ (80013bc <adc1_dma_config+0x25c>)
 800126a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800126e:	6353      	str	r3, [r2, #52]	@ 0x34


	/* DMA2 Channel 0, Stream 0 --> ADC1 */
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;		// enable DMA2 clock
 8001270:	4b50      	ldr	r3, [pc, #320]	@ (80013b4 <adc1_dma_config+0x254>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001274:	4a4f      	ldr	r2, [pc, #316]	@ (80013b4 <adc1_dma_config+0x254>)
 8001276:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800127a:	6313      	str	r3, [r2, #48]	@ 0x30

	DMA2_Stream0->CR &= ~DMA_SxCR_EN;		// disable stream
 800127c:	4b51      	ldr	r3, [pc, #324]	@ (80013c4 <adc1_dma_config+0x264>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a50      	ldr	r2, [pc, #320]	@ (80013c4 <adc1_dma_config+0x264>)
 8001282:	f023 0301 	bic.w	r3, r3, #1
 8001286:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream0->CR & DMA_SxCR_EN);	// wait for stream to disable
 8001288:	bf00      	nop
 800128a:	4b4e      	ldr	r3, [pc, #312]	@ (80013c4 <adc1_dma_config+0x264>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1f9      	bne.n	800128a <adc1_dma_config+0x12a>

	DMA2_Stream0->PAR = (uint32_t)&(ADC1->DR);// peripheral address
 8001296:	4b4b      	ldr	r3, [pc, #300]	@ (80013c4 <adc1_dma_config+0x264>)
 8001298:	4a4b      	ldr	r2, [pc, #300]	@ (80013c8 <adc1_dma_config+0x268>)
 800129a:	609a      	str	r2, [r3, #8]
	DMA2_Stream0->M0AR = (uint32_t)stream0;	// destination memory address (CT = 0)
 800129c:	4b49      	ldr	r3, [pc, #292]	@ (80013c4 <adc1_dma_config+0x264>)
 800129e:	4a4b      	ldr	r2, [pc, #300]	@ (80013cc <adc1_dma_config+0x26c>)
 80012a0:	60da      	str	r2, [r3, #12]
	DMA2_Stream0->M1AR = (uint32_t)stream1;	// destination memory address (CT = 1)
 80012a2:	4b48      	ldr	r3, [pc, #288]	@ (80013c4 <adc1_dma_config+0x264>)
 80012a4:	4a4a      	ldr	r2, [pc, #296]	@ (80013d0 <adc1_dma_config+0x270>)
 80012a6:	611a      	str	r2, [r3, #16]
	DMA2_Stream0->NDTR = BLOCK_SIZE;		// number of units to be transmitted
 80012a8:	4b46      	ldr	r3, [pc, #280]	@ (80013c4 <adc1_dma_config+0x264>)
 80012aa:	2290      	movs	r2, #144	@ 0x90
 80012ac:	605a      	str	r2, [r3, #4]

	DMA2_Stream0->CR &= ~DMA_SxCR_CHSEL;	// channel 0 selected
 80012ae:	4b45      	ldr	r3, [pc, #276]	@ (80013c4 <adc1_dma_config+0x264>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a44      	ldr	r2, [pc, #272]	@ (80013c4 <adc1_dma_config+0x264>)
 80012b4:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 80012b8:	6013      	str	r3, [r2, #0]

	DMA2_Stream0->CR &= ~DMA_SxCR_PFCTRL;	// DMA is the flow controller
 80012ba:	4b42      	ldr	r3, [pc, #264]	@ (80013c4 <adc1_dma_config+0x264>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a41      	ldr	r2, [pc, #260]	@ (80013c4 <adc1_dma_config+0x264>)
 80012c0:	f023 0320 	bic.w	r3, r3, #32
 80012c4:	6013      	str	r3, [r2, #0]

	// priority level: medium
	DMA2_Stream0->CR |= DMA_SxCR_PL_0;
 80012c6:	4b3f      	ldr	r3, [pc, #252]	@ (80013c4 <adc1_dma_config+0x264>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a3e      	ldr	r2, [pc, #248]	@ (80013c4 <adc1_dma_config+0x264>)
 80012cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012d0:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~DMA_SxCR_PL_1;
 80012d2:	4b3c      	ldr	r3, [pc, #240]	@ (80013c4 <adc1_dma_config+0x264>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a3b      	ldr	r2, [pc, #236]	@ (80013c4 <adc1_dma_config+0x264>)
 80012d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80012dc:	6013      	str	r3, [r2, #0]

	// disable direct mode
	// FIFO threshold of 1/2 before transfer
	DMA2_Stream0->FCR |= DMA_SxFCR_DMDIS;
 80012de:	4b39      	ldr	r3, [pc, #228]	@ (80013c4 <adc1_dma_config+0x264>)
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	4a38      	ldr	r2, [pc, #224]	@ (80013c4 <adc1_dma_config+0x264>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	6153      	str	r3, [r2, #20]
	DMA2_Stream0->FCR |= DMA_SxFCR_FTH_0;
 80012ea:	4b36      	ldr	r3, [pc, #216]	@ (80013c4 <adc1_dma_config+0x264>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	4a35      	ldr	r2, [pc, #212]	@ (80013c4 <adc1_dma_config+0x264>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6153      	str	r3, [r2, #20]
	DMA2_Stream0->FCR &= ~DMA_SxFCR_FTH_1;
 80012f6:	4b33      	ldr	r3, [pc, #204]	@ (80013c4 <adc1_dma_config+0x264>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	4a32      	ldr	r2, [pc, #200]	@ (80013c4 <adc1_dma_config+0x264>)
 80012fc:	f023 0302 	bic.w	r3, r3, #2
 8001300:	6153      	str	r3, [r2, #20]

	// memory data size: half word (16 bits)
	DMA2_Stream0->CR |= DMA_SxCR_MSIZE_0;
 8001302:	4b30      	ldr	r3, [pc, #192]	@ (80013c4 <adc1_dma_config+0x264>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a2f      	ldr	r2, [pc, #188]	@ (80013c4 <adc1_dma_config+0x264>)
 8001308:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800130c:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~DMA_SxCR_MSIZE_1;
 800130e:	4b2d      	ldr	r3, [pc, #180]	@ (80013c4 <adc1_dma_config+0x264>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a2c      	ldr	r2, [pc, #176]	@ (80013c4 <adc1_dma_config+0x264>)
 8001314:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001318:	6013      	str	r3, [r2, #0]

	// peripheral data size: half word (16 bits)
	DMA2_Stream0->CR |= DMA_SxCR_PSIZE_0;
 800131a:	4b2a      	ldr	r3, [pc, #168]	@ (80013c4 <adc1_dma_config+0x264>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a29      	ldr	r2, [pc, #164]	@ (80013c4 <adc1_dma_config+0x264>)
 8001320:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001324:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~DMA_SxCR_PSIZE_1;
 8001326:	4b27      	ldr	r3, [pc, #156]	@ (80013c4 <adc1_dma_config+0x264>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a26      	ldr	r2, [pc, #152]	@ (80013c4 <adc1_dma_config+0x264>)
 800132c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001330:	6013      	str	r3, [r2, #0]

	// increment memory address after every transfer
	DMA2_Stream0->CR |= DMA_SxCR_MINC;
 8001332:	4b24      	ldr	r3, [pc, #144]	@ (80013c4 <adc1_dma_config+0x264>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a23      	ldr	r2, [pc, #140]	@ (80013c4 <adc1_dma_config+0x264>)
 8001338:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800133c:	6013      	str	r3, [r2, #0]

	// disable peripheral address increment
	DMA2_Stream0->CR &= ~DMA_SxCR_PINC;
 800133e:	4b21      	ldr	r3, [pc, #132]	@ (80013c4 <adc1_dma_config+0x264>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a20      	ldr	r2, [pc, #128]	@ (80013c4 <adc1_dma_config+0x264>)
 8001344:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001348:	6013      	str	r3, [r2, #0]

	// peripheral to memory data direction
	DMA2_Stream0->CR &= ~DMA_SxCR_DIR;
 800134a:	4b1e      	ldr	r3, [pc, #120]	@ (80013c4 <adc1_dma_config+0x264>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a1d      	ldr	r2, [pc, #116]	@ (80013c4 <adc1_dma_config+0x264>)
 8001350:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001354:	6013      	str	r3, [r2, #0]

	// circular mode --> reload NDTR after every transfer complete
	DMA2_Stream0->CR |= DMA_SxCR_CIRC;
 8001356:	4b1b      	ldr	r3, [pc, #108]	@ (80013c4 <adc1_dma_config+0x264>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a1a      	ldr	r2, [pc, #104]	@ (80013c4 <adc1_dma_config+0x264>)
 800135c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001360:	6013      	str	r3, [r2, #0]

	// double buffer mode; current target is memory 0 (DMA_SxM0AR)
	DMA2_Stream0->CR |= DMA_SxCR_DBM;
 8001362:	4b18      	ldr	r3, [pc, #96]	@ (80013c4 <adc1_dma_config+0x264>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a17      	ldr	r2, [pc, #92]	@ (80013c4 <adc1_dma_config+0x264>)
 8001368:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800136c:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~DMA_SxCR_CT;
 800136e:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <adc1_dma_config+0x264>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a14      	ldr	r2, [pc, #80]	@ (80013c4 <adc1_dma_config+0x264>)
 8001374:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001378:	6013      	str	r3, [r2, #0]


	DMA2_Stream0->CR |= DMA_SxCR_EN;		// enable DMA stream
 800137a:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <adc1_dma_config+0x264>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a11      	ldr	r2, [pc, #68]	@ (80013c4 <adc1_dma_config+0x264>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6013      	str	r3, [r2, #0]

	ADC1->CR2 |= ADC_CR2_DMA;				// enable DMA
 8001386:	4b0d      	ldr	r3, [pc, #52]	@ (80013bc <adc1_dma_config+0x25c>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	4a0c      	ldr	r2, [pc, #48]	@ (80013bc <adc1_dma_config+0x25c>)
 800138c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001390:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_DDS;				// DMA requests issued as long as DMA=1
 8001392:	4b0a      	ldr	r3, [pc, #40]	@ (80013bc <adc1_dma_config+0x25c>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	4a09      	ldr	r2, [pc, #36]	@ (80013bc <adc1_dma_config+0x25c>)
 8001398:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800139c:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_ADON;				// turn on ADC
 800139e:	4b07      	ldr	r3, [pc, #28]	@ (80013bc <adc1_dma_config+0x25c>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	4a06      	ldr	r2, [pc, #24]	@ (80013bc <adc1_dma_config+0x25c>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6093      	str	r3, [r2, #8]
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40020000 	.word	0x40020000
 80013bc:	40012000 	.word	0x40012000
 80013c0:	40012300 	.word	0x40012300
 80013c4:	40026410 	.word	0x40026410
 80013c8:	4001204c 	.word	0x4001204c
 80013cc:	20000094 	.word	0x20000094
 80013d0:	200001b4 	.word	0x200001b4

080013d4 <tim2_trig_config>:

void tim2_trig_config(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;				// enable TIM2 clock
 80013d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001450 <tim2_trig_config+0x7c>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001450 <tim2_trig_config+0x7c>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	6413      	str	r3, [r2, #64]	@ 0x40

	TIM2->CR1 &= ~TIM_CR1_DIR;			// upcounting
 80013e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013ee:	f023 0310 	bic.w	r3, r3, #16
 80013f2:	6013      	str	r3, [r2, #0]
	TIM2->PSC = 0;						// /1 prescaler
 80013f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013f8:	2200      	movs	r2, #0
 80013fa:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 2099;					// 40kHz frequency
 80013fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001400:	f640 0233 	movw	r2, #2099	@ 0x833
 8001404:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM2->CR2 |= TIM_CR2_MMS_1;
 8001406:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001410:	f043 0320 	orr.w	r3, r3, #32
 8001414:	6053      	str	r3, [r2, #4]
	TIM2->CR2 &= ~(TIM_CR2_MMS_0 | TIM_CR2_MMS_2);		// update event as TRGO
 8001416:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001420:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8001424:	6053      	str	r3, [r2, #4]

	TIM2->EGR |= TIM_EGR_UG;			// generate update event
 8001426:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6153      	str	r3, [r2, #20]

	TIM2->CR1 |= TIM_CR1_CEN;			// enable counter
 8001436:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6013      	str	r3, [r2, #0]
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	40023800 	.word	0x40023800

08001454 <tim5_time_config>:

void tim5_time_config(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;				// enable TIM2 clock
 8001458:	4b12      	ldr	r3, [pc, #72]	@ (80014a4 <tim5_time_config+0x50>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145c:	4a11      	ldr	r2, [pc, #68]	@ (80014a4 <tim5_time_config+0x50>)
 800145e:	f043 0308 	orr.w	r3, r3, #8
 8001462:	6413      	str	r3, [r2, #64]	@ 0x40

	TIM5->CR1 &= ~TIM_CR1_DIR;			// upcounting
 8001464:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <tim5_time_config+0x54>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0f      	ldr	r2, [pc, #60]	@ (80014a8 <tim5_time_config+0x54>)
 800146a:	f023 0310 	bic.w	r3, r3, #16
 800146e:	6013      	str	r3, [r2, #0]
	TIM5->PSC = 839;					// 100kHz frequency
 8001470:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <tim5_time_config+0x54>)
 8001472:	f240 3247 	movw	r2, #839	@ 0x347
 8001476:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM5->ARR = 0xffffffff;
 8001478:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <tim5_time_config+0x54>)
 800147a:	f04f 32ff 	mov.w	r2, #4294967295
 800147e:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM5->EGR |= TIM_EGR_UG;			// generate update event
 8001480:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <tim5_time_config+0x54>)
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	4a08      	ldr	r2, [pc, #32]	@ (80014a8 <tim5_time_config+0x54>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	6153      	str	r3, [r2, #20]

	TIM5->CR1 |= TIM_CR1_CEN;			// enable counter
 800148c:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <tim5_time_config+0x54>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a05      	ldr	r2, [pc, #20]	@ (80014a8 <tim5_time_config+0x54>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6013      	str	r3, [r2, #0]
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40000c00 	.word	0x40000c00

080014ac <stream_splice>:

void stream_splice(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < BLOCK_SIZE; i += 3)
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	e065      	b.n	8001584 <stream_splice+0xd8>
	{
		uint32_t ind = i / 3;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a37      	ldr	r2, [pc, #220]	@ (8001598 <stream_splice+0xec>)
 80014bc:	fba2 2303 	umull	r2, r3, r2, r3
 80014c0:	085b      	lsrs	r3, r3, #1
 80014c2:	603b      	str	r3, [r7, #0]

		// DMA is targeting M1AR ---> read from M0AR memory
		// TO DO: check ranges of mic0
		if (dma_tgt)
 80014c4:	4b35      	ldr	r3, [pc, #212]	@ (800159c <stream_splice+0xf0>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d02c      	beq.n	8001526 <stream_splice+0x7a>
		{
			mic0_samp[ind] = ((int16_t)stream0[i] - 2048) << 4;
 80014cc:	4a34      	ldr	r2, [pc, #208]	@ (80015a0 <stream_splice+0xf4>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014d4:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80014d8:	b29b      	uxth	r3, r3
 80014da:	b21b      	sxth	r3, r3
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	b219      	sxth	r1, r3
 80014e0:	4a30      	ldr	r2, [pc, #192]	@ (80015a4 <stream_splice+0xf8>)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			mic1_samp[ind] = ((int16_t)stream0[i+1] - 2048) << 4;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3301      	adds	r3, #1
 80014ec:	4a2c      	ldr	r2, [pc, #176]	@ (80015a0 <stream_splice+0xf4>)
 80014ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f2:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	011b      	lsls	r3, r3, #4
 80014fc:	b219      	sxth	r1, r3
 80014fe:	4a2a      	ldr	r2, [pc, #168]	@ (80015a8 <stream_splice+0xfc>)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			mic2_samp[ind] = ((int16_t)stream0[i+2] - 2048) << 4;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3302      	adds	r3, #2
 800150a:	4a25      	ldr	r2, [pc, #148]	@ (80015a0 <stream_splice+0xf4>)
 800150c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001510:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001514:	b29b      	uxth	r3, r3
 8001516:	b21b      	sxth	r3, r3
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	b219      	sxth	r1, r3
 800151c:	4a23      	ldr	r2, [pc, #140]	@ (80015ac <stream_splice+0x100>)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001524:	e02b      	b.n	800157e <stream_splice+0xd2>
		}
		else
		{
			mic0_samp[ind] = ((int16_t)stream1[i] - 2048) << 4;
 8001526:	4a22      	ldr	r2, [pc, #136]	@ (80015b0 <stream_splice+0x104>)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800152e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001532:	b29b      	uxth	r3, r3
 8001534:	b21b      	sxth	r3, r3
 8001536:	011b      	lsls	r3, r3, #4
 8001538:	b219      	sxth	r1, r3
 800153a:	4a1a      	ldr	r2, [pc, #104]	@ (80015a4 <stream_splice+0xf8>)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			mic1_samp[ind] = ((int16_t)stream1[i+1] - 2048) << 4;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3301      	adds	r3, #1
 8001546:	4a1a      	ldr	r2, [pc, #104]	@ (80015b0 <stream_splice+0x104>)
 8001548:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800154c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001550:	b29b      	uxth	r3, r3
 8001552:	b21b      	sxth	r3, r3
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	b219      	sxth	r1, r3
 8001558:	4a13      	ldr	r2, [pc, #76]	@ (80015a8 <stream_splice+0xfc>)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			mic2_samp[ind] = ((int16_t)stream1[i+2] - 2048) << 4;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3302      	adds	r3, #2
 8001564:	4a12      	ldr	r2, [pc, #72]	@ (80015b0 <stream_splice+0x104>)
 8001566:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800156a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800156e:	b29b      	uxth	r3, r3
 8001570:	b21b      	sxth	r3, r3
 8001572:	011b      	lsls	r3, r3, #4
 8001574:	b219      	sxth	r1, r3
 8001576:	4a0d      	ldr	r2, [pc, #52]	@ (80015ac <stream_splice+0x100>)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint32_t i = 0; i < BLOCK_SIZE; i += 3)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3303      	adds	r3, #3
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b8f      	cmp	r3, #143	@ 0x8f
 8001588:	d996      	bls.n	80014b8 <stream_splice+0xc>
		}
	}
}
 800158a:	bf00      	nop
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	aaaaaaab 	.word	0xaaaaaaab
 800159c:	200003f4 	.word	0x200003f4
 80015a0:	20000094 	.word	0x20000094
 80015a4:	200002d4 	.word	0x200002d4
 80015a8:	20000334 	.word	0x20000334
 80015ac:	20000394 	.word	0x20000394
 80015b0:	200001b4 	.word	0x200001b4

080015b4 <find_filter_peaks>:

void find_filter_peaks(q15_t * mic0_filtered, q15_t * mic1_filtered, q15_t * mic2_filtered,
						uint16_t * mic0_ind, uint16_t * mic1_ind, uint16_t * mic2_ind)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b087      	sub	sp, #28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
 80015c0:	603b      	str	r3, [r7, #0]
	*mic0_ind = 0;
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	2200      	movs	r2, #0
 80015c6:	801a      	strh	r2, [r3, #0]
	*mic1_ind = 0;
 80015c8:	6a3b      	ldr	r3, [r7, #32]
 80015ca:	2200      	movs	r2, #0
 80015cc:	801a      	strh	r2, [r3, #0]
	*mic2_ind = 0;
 80015ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d0:	2200      	movs	r2, #0
 80015d2:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 1; i < DECIMATION_SIZE; i++)
 80015d4:	2301      	movs	r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	e053      	b.n	8001682 <find_filter_peaks+0xce>
	{
		if (abs(mic0_filtered[i]) > abs(mic0_filtered[*mic0_ind]))
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	4413      	add	r3, r2
 80015e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	bfb8      	it	lt
 80015ea:	425b      	neglt	r3, r3
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	68f9      	ldr	r1, [r7, #12]
 80015f6:	440b      	add	r3, r1
 80015f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bfb8      	it	lt
 8001600:	425b      	neglt	r3, r3
 8001602:	b29b      	uxth	r3, r3
 8001604:	429a      	cmp	r2, r3
 8001606:	d903      	bls.n	8001610 <find_filter_peaks+0x5c>
		{
			*mic0_ind = i;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	b29a      	uxth	r2, r3
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	801a      	strh	r2, [r3, #0]
		}
		if (abs(mic1_filtered[i]) > abs(mic1_filtered[*mic1_ind]))
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	4413      	add	r3, r2
 8001618:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161c:	2b00      	cmp	r3, #0
 800161e:	bfb8      	it	lt
 8001620:	425b      	neglt	r3, r3
 8001622:	b29a      	uxth	r2, r3
 8001624:	6a3b      	ldr	r3, [r7, #32]
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	68b9      	ldr	r1, [r7, #8]
 800162c:	440b      	add	r3, r1
 800162e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001632:	2b00      	cmp	r3, #0
 8001634:	bfb8      	it	lt
 8001636:	425b      	neglt	r3, r3
 8001638:	b29b      	uxth	r3, r3
 800163a:	429a      	cmp	r2, r3
 800163c:	d903      	bls.n	8001646 <find_filter_peaks+0x92>
		{
			*mic1_ind = i;
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	b29a      	uxth	r2, r3
 8001642:	6a3b      	ldr	r3, [r7, #32]
 8001644:	801a      	strh	r2, [r3, #0]
		}
		if (abs(mic2_filtered[i]) > abs(mic2_filtered[*mic2_ind]))
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001652:	2b00      	cmp	r3, #0
 8001654:	bfb8      	it	lt
 8001656:	425b      	neglt	r3, r3
 8001658:	b29a      	uxth	r2, r3
 800165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	440b      	add	r3, r1
 8001664:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001668:	2b00      	cmp	r3, #0
 800166a:	bfb8      	it	lt
 800166c:	425b      	neglt	r3, r3
 800166e:	b29b      	uxth	r3, r3
 8001670:	429a      	cmp	r2, r3
 8001672:	d903      	bls.n	800167c <find_filter_peaks+0xc8>
		{
			*mic2_ind = i;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	b29a      	uxth	r2, r3
 8001678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167a:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 1; i < DECIMATION_SIZE; i++)
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	3301      	adds	r3, #1
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	2b0b      	cmp	r3, #11
 8001686:	d9a8      	bls.n	80015da <find_filter_peaks+0x26>
		}
	}
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	371c      	adds	r7, #28
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <compute_event_pos>:

void compute_event_pos(float * x, float * y, float mic0_x, float mic0_y,
					   float mic1_x, float mic1_y, float mic2_x, float mic2_y,
					   float mic1_delay, float mic2_delay)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	ed2d 8b02 	vpush	{d8}
 800169e:	b0a0      	sub	sp, #128	@ 0x80
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6278      	str	r0, [r7, #36]	@ 0x24
 80016a4:	6239      	str	r1, [r7, #32]
 80016a6:	ed87 0a07 	vstr	s0, [r7, #28]
 80016aa:	edc7 0a06 	vstr	s1, [r7, #24]
 80016ae:	ed87 1a05 	vstr	s2, [r7, #20]
 80016b2:	edc7 1a04 	vstr	s3, [r7, #16]
 80016b6:	ed87 2a03 	vstr	s4, [r7, #12]
 80016ba:	edc7 2a02 	vstr	s5, [r7, #8]
 80016be:	ed87 3a01 	vstr	s6, [r7, #4]
 80016c2:	edc7 3a00 	vstr	s7, [r7]

	for (uint8_t i = 0; i < 10; i++)
 80016c6:	2300      	movs	r3, #0
 80016c8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80016cc:	e1f8      	b.n	8001ac0 <compute_event_pos+0x428>
	{
		// distances from mic1 and mic2 to mic0
		float d10 = SPEED_OF_SOUND * mic1_delay;
 80016ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80016d2:	ed9f 7acb 	vldr	s14, [pc, #812]	@ 8001a00 <compute_event_pos+0x368>
 80016d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016da:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
		float d20 = SPEED_OF_SOUND * mic2_delay;
 80016de:	edd7 7a00 	vldr	s15, [r7]
 80016e2:	ed9f 7ac7 	vldr	s14, [pc, #796]	@ 8001a00 <compute_event_pos+0x368>
 80016e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ea:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

		// compute radii of guesses
		float r0 = sqrtf(powf(*x - mic0_x, 2) + powf(*y - mic0_y, 2));
 80016ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f0:	ed93 7a00 	vldr	s14, [r3]
 80016f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80016f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016fc:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8001700:	eeb0 0a67 	vmov.f32	s0, s15
 8001704:	f000 fdf8 	bl	80022f8 <powf>
 8001708:	eeb0 8a40 	vmov.f32	s16, s0
 800170c:	6a3b      	ldr	r3, [r7, #32]
 800170e:	ed93 7a00 	vldr	s14, [r3]
 8001712:	edd7 7a06 	vldr	s15, [r7, #24]
 8001716:	ee77 7a67 	vsub.f32	s15, s14, s15
 800171a:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800171e:	eeb0 0a67 	vmov.f32	s0, s15
 8001722:	f000 fde9 	bl	80022f8 <powf>
 8001726:	eef0 7a40 	vmov.f32	s15, s0
 800172a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800172e:	eeb0 0a67 	vmov.f32	s0, s15
 8001732:	f000 fe39 	bl	80023a8 <sqrtf>
 8001736:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
		float r1 = sqrtf(powf(*x - mic1_x, 2) + powf(*y - mic1_y, 2));
 800173a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173c:	ed93 7a00 	vldr	s14, [r3]
 8001740:	edd7 7a05 	vldr	s15, [r7, #20]
 8001744:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001748:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800174c:	eeb0 0a67 	vmov.f32	s0, s15
 8001750:	f000 fdd2 	bl	80022f8 <powf>
 8001754:	eeb0 8a40 	vmov.f32	s16, s0
 8001758:	6a3b      	ldr	r3, [r7, #32]
 800175a:	ed93 7a00 	vldr	s14, [r3]
 800175e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001762:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001766:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800176a:	eeb0 0a67 	vmov.f32	s0, s15
 800176e:	f000 fdc3 	bl	80022f8 <powf>
 8001772:	eef0 7a40 	vmov.f32	s15, s0
 8001776:	ee78 7a27 	vadd.f32	s15, s16, s15
 800177a:	eeb0 0a67 	vmov.f32	s0, s15
 800177e:	f000 fe13 	bl	80023a8 <sqrtf>
 8001782:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
		float r2 = sqrtf(powf(*x - mic2_x, 2) + powf(*y - mic2_y, 2));
 8001786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001788:	ed93 7a00 	vldr	s14, [r3]
 800178c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001790:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001794:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8001798:	eeb0 0a67 	vmov.f32	s0, s15
 800179c:	f000 fdac 	bl	80022f8 <powf>
 80017a0:	eeb0 8a40 	vmov.f32	s16, s0
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	ed93 7a00 	vldr	s14, [r3]
 80017aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80017ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017b2:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80017b6:	eeb0 0a67 	vmov.f32	s0, s15
 80017ba:	f000 fd9d 	bl	80022f8 <powf>
 80017be:	eef0 7a40 	vmov.f32	s15, s0
 80017c2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80017c6:	eeb0 0a67 	vmov.f32	s0, s15
 80017ca:	f000 fded 	bl	80023a8 <sqrtf>
 80017ce:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68

		if (r0 == 0 || r1 == 0 || r2 == 0) break;
 80017d2:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80017d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017de:	f000 8178 	beq.w	8001ad2 <compute_event_pos+0x43a>
 80017e2:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80017e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ee:	f000 8170 	beq.w	8001ad2 <compute_event_pos+0x43a>
 80017f2:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80017f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fe:	f000 8168 	beq.w	8001ad2 <compute_event_pos+0x43a>

		// compute residuals (error)
		// [f]
		float res1 = r1 - r0 - d10;
 8001802:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001806:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800180a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800180e:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001816:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
		float res2 = r2 - r0 - d20;
 800181a:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 800181e:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001822:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001826:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800182a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800182e:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

		// create Jacobian
		float j11 = (*x - mic1_x) / r1 - (*x - mic0_x) / r0;
 8001832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001834:	ed93 7a00 	vldr	s14, [r3]
 8001838:	edd7 7a05 	vldr	s15, [r7, #20]
 800183c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001840:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001844:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184a:	edd3 6a00 	vldr	s13, [r3]
 800184e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001852:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8001856:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 800185a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800185e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001862:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		float j12 = (*y - mic1_y) / r1 - (*y - mic0_y) / r0;
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	ed93 7a00 	vldr	s14, [r3]
 800186c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001870:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001874:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001878:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800187c:	6a3b      	ldr	r3, [r7, #32]
 800187e:	edd3 6a00 	vldr	s13, [r3]
 8001882:	edd7 7a06 	vldr	s15, [r7, #24]
 8001886:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800188a:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 800188e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001892:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001896:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		float j21 = (*x - mic2_x) / r2 - (*x - mic0_x) / r0;
 800189a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189c:	ed93 7a00 	vldr	s14, [r3]
 80018a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80018a4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80018a8:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80018ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b2:	edd3 6a00 	vldr	s13, [r3]
 80018b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80018ba:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80018be:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 80018c2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80018c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ca:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		float j22 = (*y - mic2_y) / r2 - (*y - mic0_y) / r0;
 80018ce:	6a3b      	ldr	r3, [r7, #32]
 80018d0:	ed93 7a00 	vldr	s14, [r3]
 80018d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80018d8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80018dc:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80018e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018e4:	6a3b      	ldr	r3, [r7, #32]
 80018e6:	edd3 6a00 	vldr	s13, [r3]
 80018ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80018ee:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80018f2:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 80018f6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80018fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018fe:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

		// ([J]^T)[J]
		float prod11 = j11 * j11 + j21 * j21;
 8001902:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001906:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800190a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800190e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001916:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		float prod12 = j11 * j12 + j21 * j22;
 800191a:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800191e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001922:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001926:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 800192a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800192e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001936:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
		float prod21 = j12 * j11 + j22 * j21;
 800193a:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800193e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001942:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001946:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 800194a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800194e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001952:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001956:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		float prod22 = j12 * j12 + j22 * j22;
 800195a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800195e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001962:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001966:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800196a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800196e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

		// ([J]^T)[f]
		float g1 = j11 * res1 + j21 * res2;
 8001972:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001976:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800197a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800197e:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8001982:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001986:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800198a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800198e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		float g2 = j12 * res1 + j22 * res2;
 8001992:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001996:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800199a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800199e:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80019a2:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80019a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ae:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// solve system
		// ([J]^T)[J]delta = -([J]^T)[f]
		// delta = inv(([J]^T)[J]) * (-([J]^T)[f])
		float det = prod11 * prod22 - prod12 * prod21;
 80019b2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80019b6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80019ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019be:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80019c2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80019c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ce:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		if (fabsf(det) < 1e-6) break;
 80019d2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80019d6:	eef0 7ae7 	vabs.f32	s15, s15
 80019da:	ee17 0a90 	vmov	r0, s15
 80019de:	f7fe fd5f 	bl	80004a0 <__aeabi_f2d>
 80019e2:	a305      	add	r3, pc, #20	@ (adr r3, 80019f8 <compute_event_pos+0x360>)
 80019e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e8:	f7ff f824 	bl	8000a34 <__aeabi_dcmplt>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d16c      	bne.n	8001acc <compute_event_pos+0x434>
 80019f2:	e007      	b.n	8001a04 <compute_event_pos+0x36c>
 80019f4:	f3af 8000 	nop.w
 80019f8:	a0b5ed8d 	.word	0xa0b5ed8d
 80019fc:	3eb0c6f7 	.word	0x3eb0c6f7
 8001a00:	43ab8000 	.word	0x43ab8000

		float dx = (-prod22 * g1 + prod12 * g2) / det;
 8001a04:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001a08:	eeb1 7a67 	vneg.f32	s14, s15
 8001a0c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001a10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a14:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8001a18:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001a1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a20:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001a24:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001a28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a2c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		float dy = (prod21 * g1 - prod11 * g2) / det;
 8001a30:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001a34:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001a38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a3c:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8001a40:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001a44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a48:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a4c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001a50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a54:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		*x += dx;
 8001a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5a:	ed93 7a00 	vldr	s14, [r3]
 8001a5e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001a62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a68:	edc3 7a00 	vstr	s15, [r3]
		*y += dy;
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	ed93 7a00 	vldr	s14, [r3]
 8001a72:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	edc3 7a00 	vstr	s15, [r3]

		if (sqrtf(dx * dx + dy * dy) < 1e-5) break;
 8001a80:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001a84:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001a88:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a8c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a94:	eeb0 0a67 	vmov.f32	s0, s15
 8001a98:	f000 fc86 	bl	80023a8 <sqrtf>
 8001a9c:	ee10 3a10 	vmov	r3, s0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fcfd 	bl	80004a0 <__aeabi_f2d>
 8001aa6:	a30e      	add	r3, pc, #56	@ (adr r3, 8001ae0 <compute_event_pos+0x448>)
 8001aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aac:	f7fe ffc2 	bl	8000a34 <__aeabi_dcmplt>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10c      	bne.n	8001ad0 <compute_event_pos+0x438>
	for (uint8_t i = 0; i < 10; i++)
 8001ab6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001aba:	3301      	adds	r3, #1
 8001abc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001ac0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001ac4:	2b09      	cmp	r3, #9
 8001ac6:	f67f ae02 	bls.w	80016ce <compute_event_pos+0x36>
	}

}
 8001aca:	e002      	b.n	8001ad2 <compute_event_pos+0x43a>
		if (fabsf(det) < 1e-6) break;
 8001acc:	bf00      	nop
 8001ace:	e000      	b.n	8001ad2 <compute_event_pos+0x43a>
		if (sqrtf(dx * dx + dy * dy) < 1e-5) break;
 8001ad0:	bf00      	nop
}
 8001ad2:	bf00      	nop
 8001ad4:	3780      	adds	r7, #128	@ 0x80
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	ecbd 8b02 	vpop	{d8}
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	88e368f1 	.word	0x88e368f1
 8001ae4:	3ee4f8b5 	.word	0x3ee4f8b5

08001ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <NMI_Handler+0x4>

08001af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <HardFault_Handler+0x4>

08001af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <MemManage_Handler+0x4>

08001b00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <BusFault_Handler+0x4>

08001b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <UsageFault_Handler+0x4>

08001b10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b3e:	f000 fa25 	bl	8001f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b4c:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <SystemInit+0x20>)
 8001b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b52:	4a05      	ldr	r2, [pc, #20]	@ (8001b68 <SystemInit+0x20>)
 8001b54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ba4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b70:	f7ff ffea 	bl	8001b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b74:	480c      	ldr	r0, [pc, #48]	@ (8001ba8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b76:	490d      	ldr	r1, [pc, #52]	@ (8001bac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b78:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b7c:	e002      	b.n	8001b84 <LoopCopyDataInit>

08001b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b82:	3304      	adds	r3, #4

08001b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b88:	d3f9      	bcc.n	8001b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b8c:	4c0a      	ldr	r4, [pc, #40]	@ (8001bb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b90:	e001      	b.n	8001b96 <LoopFillZerobss>

08001b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b94:	3204      	adds	r2, #4

08001b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b98:	d3fb      	bcc.n	8001b92 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001b9a:	f000 fb89 	bl	80022b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b9e:	f7fe ffc3 	bl	8000b28 <main>
  bx  lr    
 8001ba2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ba4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bac:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001bb0:	08002b58 	.word	0x08002b58
  ldr r2, =_sbss
 8001bb4:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001bb8:	2000053c 	.word	0x2000053c

08001bbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bbc:	e7fe      	b.n	8001bbc <ADC_IRQHandler>

08001bbe <arm_fir_decimate_fast_q15>:
ARM_DSP_ATTRIBUTE void arm_fir_decimate_fast_q15(
  const arm_fir_decimate_instance_q15 * S,
  const q15_t * pSrc,
        q15_t * pDst,
        uint32_t blockSize)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b0b5      	sub	sp, #212	@ 0xd4
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
 8001bca:	603b      	str	r3, [r7, #0]
        q15_t *pState = S->pState;                     /* State pointer */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  const q15_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        q31_t x0, x1, c0;                              /* Temporary variables to hold state and coefficient values */
        q31_t sum0;                                    /* Accumulators */
        q31_t acc0, acc1;
        q15_t *px0, *px1;
        uint32_t blkCntN3;
        uint32_t numTaps = S->numTaps;                 /* Number of taps */
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	885b      	ldrh	r3, [r3, #2]
 8001bde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        uint32_t i, blkCnt, tapCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        q31_t c1;                                      /* Temporary variables to hold state and coefficient values */
#endif

  /* S->pState buffer contains previous frame (numTaps - 1) samples */
  /* pStateCur points to the location where the new input data should be written */
  pStateCur = S->pState + (numTaps - 1U);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001bfa:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4413      	add	r3, r2
 8001c04:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Total number of output samples to be computed */
  blkCnt = outBlockSize / 2;
 8001c06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c0a:	085b      	lsrs	r3, r3, #1
 8001c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  blkCntN3 = outBlockSize - (2 * blkCnt);
 8001c10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  while (blkCnt > 0U)
 8001c20:	e0a0      	b.n	8001d64 <arm_fir_decimate_fast_q15+0x1a6>
  {
    /* Copy 2 * decimation factor number of new input samples into the state buffer */
    i = S->M * 2;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

    do
    {
      *pStateCur++ = *pSrc++;
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	1c93      	adds	r3, r2, #2
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c34:	1c99      	adds	r1, r3, #2
 8001c36:	6279      	str	r1, [r7, #36]	@ 0x24
 8001c38:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c3c:	801a      	strh	r2, [r3, #0]

    } while (--i);
 8001c3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c42:	3b01      	subs	r3, #1
 8001c44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001c48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1ed      	bne.n	8001c2c <arm_fir_decimate_fast_q15+0x6e>

    /* Set accumulator to zero */
    acc0 = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    acc1 = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

    /* Initialize state pointer for all the samples */
    px0 = pState;
 8001c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c5e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    px1 = pState + S->M;
 8001c62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

    /* Initialize coeff pointer */
    pb = pCoeffs;
 8001c70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    tapCnt = numTaps % 0x4U;

#else

    /* Initialize tapCnt with number of taps */
    tapCnt = numTaps;
 8001c78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001c7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (tapCnt > 0U)
 8001c80:	e041      	b.n	8001d06 <arm_fir_decimate_fast_q15+0x148>
    {
      /* Read coefficients */
      c0 = *pb++;
 8001c82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001c86:	1c9a      	adds	r2, r3, #2
 8001c88:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

      /* Fetch state variables for acc0, acc1 */
      x0 = *px0++;
 8001c94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c98:	1c9a      	adds	r2, r3, #2
 8001c9a:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8001c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      x1 = *px1++;
 8001ca6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001caa:	1c9a      	adds	r2, r3, #2
 8001cac:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb4:	677b      	str	r3, [r7, #116]	@ 0x74

      /* Perform the multiply-accumulate */
      acc0 = __SMLAD(x0, c0, acc0);
 8001cb6:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8001cba:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001cbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001cc2:	6639      	str	r1, [r7, #96]	@ 0x60
 8001cc4:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001cc6:	65bb      	str	r3, [r7, #88]	@ 0x58

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001cc8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001cca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001ccc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001cce:	fb23 1302 	smlad	r3, r3, r2, r1
 8001cd2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8001cd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cd6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
      acc1 = __SMLAD(x1, c0, acc1);
 8001cda:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8001cdc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001ce0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001ce4:	6739      	str	r1, [r7, #112]	@ 0x70
 8001ce6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001ce8:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001cea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001cec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001cee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001cf0:	fb23 1302 	smlad	r3, r3, r2, r1
 8001cf4:	667b      	str	r3, [r7, #100]	@ 0x64
  return(result);
 8001cf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001cf8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

      /* Decrement loop counter */
      tapCnt--;
 8001cfc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d00:	3b01      	subs	r3, #1
 8001d02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    while (tapCnt > 0U)
 8001d06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1b9      	bne.n	8001c82 <arm_fir_decimate_fast_q15+0xc4>
    }

    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + S->M * 2;
 8001d0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Store filter output, smlad returns the values in 2.14 format */
    /* so downsacle by 15 to get output in 1.15 */
    *pDst++ = (q15_t) (__SSAT((acc0 >> 15), 16));
 8001d1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d1e:	13db      	asrs	r3, r3, #15
 8001d20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001d24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d28:	f303 030f 	ssat	r3, #16, r3
 8001d2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001d30:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	1c9a      	adds	r2, r3, #2
 8001d38:	607a      	str	r2, [r7, #4]
 8001d3a:	b20a      	sxth	r2, r1
 8001d3c:	801a      	strh	r2, [r3, #0]
    *pDst++ = (q15_t) (__SSAT((acc1 >> 15), 16));
 8001d3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d42:	13db      	asrs	r3, r3, #15
 8001d44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001d46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d48:	f303 030f 	ssat	r3, #16, r3
 8001d4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001d4e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	1c9a      	adds	r2, r3, #2
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	b20a      	sxth	r2, r1
 8001d58:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    blkCnt--;
 8001d5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  while (blkCnt > 0U)
 8001d64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f47f af5a 	bne.w	8001c22 <arm_fir_decimate_fast_q15+0x64>
  }

  while (blkCntN3 > 0U)
 8001d6e:	e06e      	b.n	8001e4e <arm_fir_decimate_fast_q15+0x290>
  {
    /* Copy decimation factor number of new input samples into the state buffer */
    i = S->M;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

    do
    {
      *pStateCur++ = *pSrc++;
 8001d78:	68ba      	ldr	r2, [r7, #8]
 8001d7a:	1c93      	adds	r3, r2, #2
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d80:	1c99      	adds	r1, r3, #2
 8001d82:	6279      	str	r1, [r7, #36]	@ 0x24
 8001d84:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001d88:	801a      	strh	r2, [r3, #0]

    } while (--i);
 8001d8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001d94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1ed      	bne.n	8001d78 <arm_fir_decimate_fast_q15+0x1ba>

    /* Set accumulator to zero */
    sum0 = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    /* Initialize state pointer */
    px = pState;
 8001da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001da4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

    /* Initialize coeff pointer */
    pb = pCoeffs;
 8001da8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001dac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    tapCnt = numTaps % 0x4U;

#else

    /* Initialize tapCnt with number of taps */
    tapCnt = numTaps;
 8001db0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001db4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (tapCnt > 0U)
 8001db8:	e028      	b.n	8001e0c <arm_fir_decimate_fast_q15+0x24e>
    {
      /* Read coefficients */
      c0 = *pb++;
 8001dba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001dbe:	1c9a      	adds	r2, r3, #2
 8001dc0:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001dc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

      /* Fetch 1 state variable */
      x0 = *px++;
 8001dcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001dd0:	1c9a      	adds	r2, r3, #2
 8001dd2:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001dd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      /* Perform the multiply-accumulate */
      sum0 = __SMLAD(x0, c0, sum0);
 8001dde:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8001de2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001de6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001dea:	6539      	str	r1, [r7, #80]	@ 0x50
 8001dec:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001dee:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001df0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001df2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001df4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001df6:	fb23 1302 	smlad	r3, r3, r2, r1
 8001dfa:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8001dfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dfe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      /* Decrement loop counter */
      tapCnt--;
 8001e02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e06:	3b01      	subs	r3, #1
 8001e08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    while (tapCnt > 0U)
 8001e0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1d2      	bne.n	8001dba <arm_fir_decimate_fast_q15+0x1fc>
    }

    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + S->M;
 8001e14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4413      	add	r3, r2
 8001e1e:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Store filter output, smlad returns the values in 2.14 format */
    /* so downsacle by 15 to get output in 1.15 */
    *pDst++ = (q15_t) (__SSAT((sum0 >> 15), 16));
 8001e20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001e24:	13db      	asrs	r3, r3, #15
 8001e26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001e2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001e2e:	f303 030f 	ssat	r3, #16, r3
 8001e32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001e36:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	1c9a      	adds	r2, r3, #2
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	b20a      	sxth	r2, r1
 8001e42:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    blkCntN3--;
 8001e44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  while (blkCntN3 > 0U)
 8001e4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d18c      	bne.n	8001d70 <arm_fir_decimate_fast_q15+0x1b2>
  /* Processing is complete.
     Now copy the last numTaps - 1 samples to the satrt of the state buffer.
     This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCur = S->pState;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	627b      	str	r3, [r7, #36]	@ 0x24

  i = (numTaps - 1U) >> 2U;
 8001e5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e60:	3b01      	subs	r3, #1
 8001e62:	089b      	lsrs	r3, r3, #2
 8001e64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  /* copy data */
  while (i > 0U)
 8001e68:	e038      	b.n	8001edc <arm_fir_decimate_fast_q15+0x31e>
  {
    write_q15x2_ia (&pStateCur, read_q15x2_ia (&pState));
 8001e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e72:	3b04      	subs	r3, #4
 8001e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  q15_t const * pQ15)
{
  q31_t val;

#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (&val, pQ15, 4);
 8001e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	623b      	str	r3, [r7, #32]
#else
  val = (pQ15[1] << 16) | (pQ15[0] & 0x0FFFF) ;
#endif

  return (val);
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001e82:	637a      	str	r2, [r7, #52]	@ 0x34
 8001e84:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE void write_q15x2_ia (
  q15_t ** pQ15,
  q31_t    value)
{
  q31_t val = value;
 8001e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e88:	61fb      	str	r3, [r7, #28]
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ15, &val, 4);
 8001e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	69fa      	ldr	r2, [r7, #28]
 8001e90:	601a      	str	r2, [r3, #0]
#else
  (*pQ15)[0] = (q15_t)(val & 0x0FFFF);
  (*pQ15)[1] = (q15_t)((val >> 16) & 0x0FFFF);
#endif

 *pQ15 += 2;
 8001e92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	1d1a      	adds	r2, r3, #4
 8001e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e9a:	601a      	str	r2, [r3, #0]
}
 8001e9c:	bf00      	nop
    write_q15x2_ia (&pStateCur, read_q15x2_ia (&pState));
 8001e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ea6:	3b04      	subs	r3, #4
 8001ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
  memcpy (&val, pQ15, 4);
 8001eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	61bb      	str	r3, [r7, #24]
  return (val);
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001eb6:	643a      	str	r2, [r7, #64]	@ 0x40
 8001eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  q31_t val = value;
 8001eba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ebc:	617b      	str	r3, [r7, #20]
  memcpy (*pQ15, &val, 4);
 8001ebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8001ec6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	1d1a      	adds	r2, r3, #4
 8001ecc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ece:	601a      	str	r2, [r3, #0]
}
 8001ed0:	bf00      	nop

    /* Decrement loop counter */
    i--;
 8001ed2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  while (i > 0U)
 8001edc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1c2      	bne.n	8001e6a <arm_fir_decimate_fast_q15+0x2ac>
  }

  i = (numTaps - 1U) % 0x04U;
 8001ee4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  /* Copy data */
  while (i > 0U)
 8001ef2:	e00d      	b.n	8001f10 <arm_fir_decimate_fast_q15+0x352>
  {
    *pStateCur++ = *pState++;
 8001ef4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ef6:	1c93      	adds	r3, r2, #2
 8001ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efc:	1c99      	adds	r1, r3, #2
 8001efe:	6279      	str	r1, [r7, #36]	@ 0x24
 8001f00:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001f04:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    i--;
 8001f06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  while (i > 0U)
 8001f10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1ed      	bne.n	8001ef4 <arm_fir_decimate_fast_q15+0x336>
  }

}
 8001f18:	bf00      	nop
 8001f1a:	bf00      	nop
 8001f1c:	37d4      	adds	r7, #212	@ 0xd4
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <arm_fir_decimate_init_q15>:
        uint16_t numTaps,
        uint8_t M,
  const q15_t * pCoeffs,
        q15_t * pState,
        uint32_t blockSize)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b086      	sub	sp, #24
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	60f8      	str	r0, [r7, #12]
 8001f2e:	607b      	str	r3, [r7, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	817b      	strh	r3, [r7, #10]
 8001f34:	4613      	mov	r3, r2
 8001f36:	727b      	strb	r3, [r7, #9]
  arm_status status;

  /* The size of the input block must be a multiple of the decimation factor */
  if ((blockSize % M) != 0U)
 8001f38:	7a7a      	ldrb	r2, [r7, #9]
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001f40:	fb01 f202 	mul.w	r2, r1, r2
 8001f44:	1a9b      	subs	r3, r3, r2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d002      	beq.n	8001f50 <arm_fir_decimate_init_q15+0x2a>
  {
    /* Set status as ARM_MATH_LENGTH_ERROR */
    status = ARM_MATH_LENGTH_ERROR;
 8001f4a:	23fe      	movs	r3, #254	@ 0xfe
 8001f4c:	75fb      	strb	r3, [r7, #23]
 8001f4e:	e017      	b.n	8001f80 <arm_fir_decimate_init_q15+0x5a>
  }
  else
  {
    /* Assign filter taps */
    S->numTaps = numTaps;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	897a      	ldrh	r2, [r7, #10]
 8001f54:	805a      	strh	r2, [r3, #2]

    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	605a      	str	r2, [r3, #4]

    /* Clear the state buffer. The size is always (blockSize + numTaps - 1) */
    memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(q15_t));
 8001f5c:	897a      	ldrh	r2, [r7, #10]
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	4413      	add	r3, r2
 8001f62:	3b01      	subs	r3, #1
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	461a      	mov	r2, r3
 8001f68:	2100      	movs	r1, #0
 8001f6a:	6a38      	ldr	r0, [r7, #32]
 8001f6c:	f000 f992 	bl	8002294 <memset>

    /* Assign state pointer */
    S->pState = pState;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6a3a      	ldr	r2, [r7, #32]
 8001f74:	609a      	str	r2, [r3, #8]

    /* Assign Decimation Factor */
    S->M = M;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	7a7a      	ldrb	r2, [r7, #9]
 8001f7a:	701a      	strb	r2, [r3, #0]

    status = ARM_MATH_SUCCESS;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 8001f80:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f90:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <HAL_IncTick+0x20>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	461a      	mov	r2, r3
 8001f96:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <HAL_IncTick+0x24>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	4a04      	ldr	r2, [pc, #16]	@ (8001fb0 <HAL_IncTick+0x24>)
 8001f9e:	6013      	str	r3, [r2, #0]
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	20000000 	.word	0x20000000
 8001fb0:	200003fc 	.word	0x200003fc

08001fb4 <uart2_set_fcpu>:

unsigned long f_cpu;

/** Functions ----------------------------------------------------------------*/
void uart2_set_fcpu(unsigned long freq)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	f_cpu = freq;
 8001fbc:	4a04      	ldr	r2, [pc, #16]	@ (8001fd0 <uart2_set_fcpu+0x1c>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6013      	str	r3, [r2, #0]
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	20000400 	.word	0x20000400

08001fd4 <uart2_dma1_config>:

	return USART_OK;
}

uart_err_type_t uart2_dma1_config(uint32_t baud, uart_data_type_t ndata, uart_stop_type_t nstop)
{
 8001fd4:	b5b0      	push	{r4, r5, r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	72fb      	strb	r3, [r7, #11]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	72bb      	strb	r3, [r7, #10]
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;	// enable UART2 clock
 8001fe4:	4b85      	ldr	r3, [pc, #532]	@ (80021fc <uart2_dma1_config+0x228>)
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe8:	4a84      	ldr	r2, [pc, #528]	@ (80021fc <uart2_dma1_config+0x228>)
 8001fea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fee:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;	// enable GPIOA clock
 8001ff0:	4b82      	ldr	r3, [pc, #520]	@ (80021fc <uart2_dma1_config+0x228>)
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff4:	4a81      	ldr	r2, [pc, #516]	@ (80021fc <uart2_dma1_config+0x228>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN;		// enable DMA1 clock
 8001ffc:	4b7f      	ldr	r3, [pc, #508]	@ (80021fc <uart2_dma1_config+0x228>)
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002000:	4a7e      	ldr	r2, [pc, #504]	@ (80021fc <uart2_dma1_config+0x228>)
 8002002:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002006:	6313      	str	r3, [r2, #48]	@ 0x30

	/* Setup DMA1 for transmission */
	// disable DMA1 to configure
	DMA1_Stream6->CR &= ~DMA_SxCR_EN;
 8002008:	4b7d      	ldr	r3, [pc, #500]	@ (8002200 <uart2_dma1_config+0x22c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a7c      	ldr	r2, [pc, #496]	@ (8002200 <uart2_dma1_config+0x22c>)
 800200e:	f023 0301 	bic.w	r3, r3, #1
 8002012:	6013      	str	r3, [r2, #0]
	while (DMA1_Stream6->CR & DMA_SxCR_EN);
 8002014:	bf00      	nop
 8002016:	4b7a      	ldr	r3, [pc, #488]	@ (8002200 <uart2_dma1_config+0x22c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f9      	bne.n	8002016 <uart2_dma1_config+0x42>

	// select stream 6, channel 4 for USART2_TX
	DMA1_Stream6->CR &= ~DMA_SxCR_CHSEL;
 8002022:	4b77      	ldr	r3, [pc, #476]	@ (8002200 <uart2_dma1_config+0x22c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a76      	ldr	r2, [pc, #472]	@ (8002200 <uart2_dma1_config+0x22c>)
 8002028:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 800202c:	6013      	str	r3, [r2, #0]
	DMA1_Stream6->CR |= DMA_SxCR_CHSEL_2;
 800202e:	4b74      	ldr	r3, [pc, #464]	@ (8002200 <uart2_dma1_config+0x22c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a73      	ldr	r2, [pc, #460]	@ (8002200 <uart2_dma1_config+0x22c>)
 8002034:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002038:	6013      	str	r3, [r2, #0]

	// disable direct mode
	DMA1_Stream6->FCR |= DMA_SxFCR_DMDIS;
 800203a:	4b71      	ldr	r3, [pc, #452]	@ (8002200 <uart2_dma1_config+0x22c>)
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	4a70      	ldr	r2, [pc, #448]	@ (8002200 <uart2_dma1_config+0x22c>)
 8002040:	f043 0304 	orr.w	r3, r3, #4
 8002044:	6153      	str	r3, [r2, #20]

	// normal mode, low priority, 1 byte data size (memory and peripheral)
	DMA1_Stream6->CR &= ~(DMA_SxCR_DBM | DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE);
 8002046:	4b6e      	ldr	r3, [pc, #440]	@ (8002200 <uart2_dma1_config+0x22c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a6d      	ldr	r2, [pc, #436]	@ (8002200 <uart2_dma1_config+0x22c>)
 800204c:	f423 23ef 	bic.w	r3, r3, #489472	@ 0x77800
 8002050:	6013      	str	r3, [r2, #0]

	// memory increment mode
	DMA1_Stream6->CR |= DMA_SxCR_MINC;
 8002052:	4b6b      	ldr	r3, [pc, #428]	@ (8002200 <uart2_dma1_config+0x22c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a6a      	ldr	r2, [pc, #424]	@ (8002200 <uart2_dma1_config+0x22c>)
 8002058:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800205c:	6013      	str	r3, [r2, #0]

	// fixed peripheral pointer
	DMA1_Stream6->CR &= ~DMA_SxCR_PINC;
 800205e:	4b68      	ldr	r3, [pc, #416]	@ (8002200 <uart2_dma1_config+0x22c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a67      	ldr	r2, [pc, #412]	@ (8002200 <uart2_dma1_config+0x22c>)
 8002064:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002068:	6013      	str	r3, [r2, #0]

	// disable circular mode
	DMA1_Stream6->CR &= ~DMA_SxCR_CIRC;
 800206a:	4b65      	ldr	r3, [pc, #404]	@ (8002200 <uart2_dma1_config+0x22c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a64      	ldr	r2, [pc, #400]	@ (8002200 <uart2_dma1_config+0x22c>)
 8002070:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002074:	6013      	str	r3, [r2, #0]

	// memory to peripheral mode
	DMA1_Stream6->CR &= ~DMA_SxCR_DIR_1;
 8002076:	4b62      	ldr	r3, [pc, #392]	@ (8002200 <uart2_dma1_config+0x22c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a61      	ldr	r2, [pc, #388]	@ (8002200 <uart2_dma1_config+0x22c>)
 800207c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002080:	6013      	str	r3, [r2, #0]
	DMA1_Stream6->CR |= DMA_SxCR_DIR_0;
 8002082:	4b5f      	ldr	r3, [pc, #380]	@ (8002200 <uart2_dma1_config+0x22c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a5e      	ldr	r2, [pc, #376]	@ (8002200 <uart2_dma1_config+0x22c>)
 8002088:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800208c:	6013      	str	r3, [r2, #0]

	// peripheral address is USART2_DR
	DMA1_Stream6->PAR = (uint32_t)&(USART2->DR);
 800208e:	4b5c      	ldr	r3, [pc, #368]	@ (8002200 <uart2_dma1_config+0x22c>)
 8002090:	4a5c      	ldr	r2, [pc, #368]	@ (8002204 <uart2_dma1_config+0x230>)
 8002092:	609a      	str	r2, [r3, #8]

	/* Setup UART2 for transmission using DMA1 */
	// alternate function mode on TX (PA2) and RX (PA3)
	GPIOA->MODER |= GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1;
 8002094:	4b5c      	ldr	r3, [pc, #368]	@ (8002208 <uart2_dma1_config+0x234>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a5b      	ldr	r2, [pc, #364]	@ (8002208 <uart2_dma1_config+0x234>)
 800209a:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800209e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_0 | GPIO_MODER_MODER3_0);
 80020a0:	4b59      	ldr	r3, [pc, #356]	@ (8002208 <uart2_dma1_config+0x234>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a58      	ldr	r2, [pc, #352]	@ (8002208 <uart2_dma1_config+0x234>)
 80020a6:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 80020aa:	6013      	str	r3, [r2, #0]

	// select alternate function mode 7 for each
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL2 | GPIO_AFRL_AFRL3);
 80020ac:	4b56      	ldr	r3, [pc, #344]	@ (8002208 <uart2_dma1_config+0x234>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	4a55      	ldr	r2, [pc, #340]	@ (8002208 <uart2_dma1_config+0x234>)
 80020b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80020b6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL2_0 | GPIO_AFRL_AFRL3_0 |
 80020b8:	4b53      	ldr	r3, [pc, #332]	@ (8002208 <uart2_dma1_config+0x234>)
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	4a52      	ldr	r2, [pc, #328]	@ (8002208 <uart2_dma1_config+0x234>)
 80020be:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80020c2:	6213      	str	r3, [r2, #32]
					GPIO_AFRL_AFRL2_1 | GPIO_AFRL_AFRL3_1 |
					GPIO_AFRL_AFRL2_2 | GPIO_AFRL_AFRL3_2;

	USART2->CR1 |= USART_CR1_UE;			// UART2 enable
 80020c4:	4b51      	ldr	r3, [pc, #324]	@ (800220c <uart2_dma1_config+0x238>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	4a50      	ldr	r2, [pc, #320]	@ (800220c <uart2_dma1_config+0x238>)
 80020ca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020ce:	60d3      	str	r3, [r2, #12]

	if (ndata == USART_DATA_8)
 80020d0:	7afb      	ldrb	r3, [r7, #11]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d106      	bne.n	80020e4 <uart2_dma1_config+0x110>
	{
		USART2->CR1 &= ~USART_CR1_M;		// 1 start, 8 data, n stop
 80020d6:	4b4d      	ldr	r3, [pc, #308]	@ (800220c <uart2_dma1_config+0x238>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	4a4c      	ldr	r2, [pc, #304]	@ (800220c <uart2_dma1_config+0x238>)
 80020dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80020e0:	60d3      	str	r3, [r2, #12]
 80020e2:	e00b      	b.n	80020fc <uart2_dma1_config+0x128>
	}
	else if (ndata == USART_DATA_9)
 80020e4:	7afb      	ldrb	r3, [r7, #11]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d106      	bne.n	80020f8 <uart2_dma1_config+0x124>
	{
		USART2->CR1 |= USART_CR1_M;			// 1 start, 9 data, n stop
 80020ea:	4b48      	ldr	r3, [pc, #288]	@ (800220c <uart2_dma1_config+0x238>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	4a47      	ldr	r2, [pc, #284]	@ (800220c <uart2_dma1_config+0x238>)
 80020f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020f4:	60d3      	str	r3, [r2, #12]
 80020f6:	e001      	b.n	80020fc <uart2_dma1_config+0x128>
	}
	else
	{
		return USART_INVALID_NDATA;
 80020f8:	2302      	movs	r3, #2
 80020fa:	e07b      	b.n	80021f4 <uart2_dma1_config+0x220>
	}

	if (nstop == USART_STOP_1)
 80020fc:	7abb      	ldrb	r3, [r7, #10]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d106      	bne.n	8002110 <uart2_dma1_config+0x13c>
	{
		USART2->CR2 &= ~USART_CR2_STOP;		// 1 stop bit
 8002102:	4b42      	ldr	r3, [pc, #264]	@ (800220c <uart2_dma1_config+0x238>)
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	4a41      	ldr	r2, [pc, #260]	@ (800220c <uart2_dma1_config+0x238>)
 8002108:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800210c:	6113      	str	r3, [r2, #16]
 800210e:	e021      	b.n	8002154 <uart2_dma1_config+0x180>
	}
	else if (nstop == USART_STOP_HALF)
 8002110:	7abb      	ldrb	r3, [r7, #10]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d10c      	bne.n	8002130 <uart2_dma1_config+0x15c>
	{
		USART2->CR2 &= ~USART_CR2_STOP;		// half stop bit
 8002116:	4b3d      	ldr	r3, [pc, #244]	@ (800220c <uart2_dma1_config+0x238>)
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	4a3c      	ldr	r2, [pc, #240]	@ (800220c <uart2_dma1_config+0x238>)
 800211c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002120:	6113      	str	r3, [r2, #16]
		USART2->CR2 |= USART_CR2_STOP_0;
 8002122:	4b3a      	ldr	r3, [pc, #232]	@ (800220c <uart2_dma1_config+0x238>)
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	4a39      	ldr	r2, [pc, #228]	@ (800220c <uart2_dma1_config+0x238>)
 8002128:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800212c:	6113      	str	r3, [r2, #16]
 800212e:	e011      	b.n	8002154 <uart2_dma1_config+0x180>
	}
	else if (nstop == USART_STOP_2)
 8002130:	7abb      	ldrb	r3, [r7, #10]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d10c      	bne.n	8002150 <uart2_dma1_config+0x17c>
	{
		USART2->CR2 &= ~USART_CR2_STOP;		// 2 stop bits
 8002136:	4b35      	ldr	r3, [pc, #212]	@ (800220c <uart2_dma1_config+0x238>)
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	4a34      	ldr	r2, [pc, #208]	@ (800220c <uart2_dma1_config+0x238>)
 800213c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002140:	6113      	str	r3, [r2, #16]
		USART2->CR2 |= USART_CR2_STOP_1;
 8002142:	4b32      	ldr	r3, [pc, #200]	@ (800220c <uart2_dma1_config+0x238>)
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	4a31      	ldr	r2, [pc, #196]	@ (800220c <uart2_dma1_config+0x238>)
 8002148:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800214c:	6113      	str	r3, [r2, #16]
 800214e:	e001      	b.n	8002154 <uart2_dma1_config+0x180>
	}
	else
	{
		return USART_INVALID_NSTOP;
 8002150:	2301      	movs	r3, #1
 8002152:	e04f      	b.n	80021f4 <uart2_dma1_config+0x220>
	}

	// pg. 519 STM32F401RE reference
	float usart_div = f_cpu / (2 * 16.0 * baud);		// APB1 bus is 1/2 clock speed of f_cpu
 8002154:	4b2e      	ldr	r3, [pc, #184]	@ (8002210 <uart2_dma1_config+0x23c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe f97f 	bl	800045c <__aeabi_ui2d>
 800215e:	4604      	mov	r4, r0
 8002160:	460d      	mov	r5, r1
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f7fe f97a 	bl	800045c <__aeabi_ui2d>
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	4b29      	ldr	r3, [pc, #164]	@ (8002214 <uart2_dma1_config+0x240>)
 800216e:	f7fe f9ef 	bl	8000550 <__aeabi_dmul>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4620      	mov	r0, r4
 8002178:	4629      	mov	r1, r5
 800217a:	f7fe fb13 	bl	80007a4 <__aeabi_ddiv>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	f7fe fc7d 	bl	8000a84 <__aeabi_d2f>
 800218a:	4603      	mov	r3, r0
 800218c:	617b      	str	r3, [r7, #20]
	uint16_t mantissa = (uint16_t) usart_div;
 800218e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002196:	ee17 3a90 	vmov	r3, s15
 800219a:	827b      	strh	r3, [r7, #18]
	uint8_t fraction = (uint8_t) ((usart_div - mantissa) * 16);
 800219c:	8a7b      	ldrh	r3, [r7, #18]
 800219e:	ee07 3a90 	vmov	s15, r3
 80021a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80021aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021ae:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80021b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021ba:	edc7 7a01 	vstr	s15, [r7, #4]
 80021be:	793b      	ldrb	r3, [r7, #4]
 80021c0:	747b      	strb	r3, [r7, #17]
	USART2->BRR = mantissa << 4 | fraction;
 80021c2:	8a7b      	ldrh	r3, [r7, #18]
 80021c4:	011a      	lsls	r2, r3, #4
 80021c6:	7c7b      	ldrb	r3, [r7, #17]
 80021c8:	431a      	orrs	r2, r3
 80021ca:	4b10      	ldr	r3, [pc, #64]	@ (800220c <uart2_dma1_config+0x238>)
 80021cc:	609a      	str	r2, [r3, #8]

	USART2->CR3 |= USART_CR3_DMAT;		// enable DMA transmitter
 80021ce:	4b0f      	ldr	r3, [pc, #60]	@ (800220c <uart2_dma1_config+0x238>)
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	4a0e      	ldr	r2, [pc, #56]	@ (800220c <uart2_dma1_config+0x238>)
 80021d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021d8:	6153      	str	r3, [r2, #20]

	USART2->CR1 |= USART_CR1_TE;		// transmitter enable
 80021da:	4b0c      	ldr	r3, [pc, #48]	@ (800220c <uart2_dma1_config+0x238>)
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	4a0b      	ldr	r2, [pc, #44]	@ (800220c <uart2_dma1_config+0x238>)
 80021e0:	f043 0308 	orr.w	r3, r3, #8
 80021e4:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RE;		// receiver enable
 80021e6:	4b09      	ldr	r3, [pc, #36]	@ (800220c <uart2_dma1_config+0x238>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	4a08      	ldr	r2, [pc, #32]	@ (800220c <uart2_dma1_config+0x238>)
 80021ec:	f043 0304 	orr.w	r3, r3, #4
 80021f0:	60d3      	str	r3, [r2, #12]

	return USART_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bdb0      	pop	{r4, r5, r7, pc}
 80021fc:	40023800 	.word	0x40023800
 8002200:	400260a0 	.word	0x400260a0
 8002204:	40004404 	.word	0x40004404
 8002208:	40020000 	.word	0x40020000
 800220c:	40004400 	.word	0x40004400
 8002210:	20000400 	.word	0x20000400
 8002214:	40400000 	.word	0x40400000

08002218 <uart2_dma1_write>:

	return USART_OK;
}

void uart2_dma1_write(uint16_t n, uint8_t * data)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	6039      	str	r1, [r7, #0]
 8002222:	80fb      	strh	r3, [r7, #6]
	while (!(USART2->SR & USART_SR_TXE));	// wait for transmit data register empty
 8002224:	bf00      	nop
 8002226:	4b18      	ldr	r3, [pc, #96]	@ (8002288 <uart2_dma1_write+0x70>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f9      	beq.n	8002226 <uart2_dma1_write+0xe>
	USART2->SR &= ~USART_SR_TC;				// clear flag
 8002232:	4b15      	ldr	r3, [pc, #84]	@ (8002288 <uart2_dma1_write+0x70>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a14      	ldr	r2, [pc, #80]	@ (8002288 <uart2_dma1_write+0x70>)
 8002238:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800223c:	6013      	str	r3, [r2, #0]

	DMA1_Stream6->CR &= ~DMA_SxCR_EN;		// disable DMA stream
 800223e:	4b13      	ldr	r3, [pc, #76]	@ (800228c <uart2_dma1_write+0x74>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a12      	ldr	r2, [pc, #72]	@ (800228c <uart2_dma1_write+0x74>)
 8002244:	f023 0301 	bic.w	r3, r3, #1
 8002248:	6013      	str	r3, [r2, #0]
	while (DMA1_Stream6->CR & DMA_SxCR_EN);
 800224a:	bf00      	nop
 800224c:	4b0f      	ldr	r3, [pc, #60]	@ (800228c <uart2_dma1_write+0x74>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1f9      	bne.n	800224c <uart2_dma1_write+0x34>

	// clear flags
	DMA1->HIFCR |= DMA_HIFCR_CTCIF6 | DMA_HIFCR_CHTIF6 | DMA_HIFCR_CTEIF6 | DMA_HIFCR_CDMEIF6 | DMA_HIFCR_CFEIF6;
 8002258:	4b0d      	ldr	r3, [pc, #52]	@ (8002290 <uart2_dma1_write+0x78>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	4a0c      	ldr	r2, [pc, #48]	@ (8002290 <uart2_dma1_write+0x78>)
 800225e:	f443 1374 	orr.w	r3, r3, #3997696	@ 0x3d0000
 8002262:	60d3      	str	r3, [r2, #12]

	DMA1_Stream6->NDTR = n;					// set # of data items to transfer
 8002264:	4a09      	ldr	r2, [pc, #36]	@ (800228c <uart2_dma1_write+0x74>)
 8002266:	88fb      	ldrh	r3, [r7, #6]
 8002268:	6053      	str	r3, [r2, #4]
	DMA1_Stream6->M0AR = (uint32_t) data;	// pointer to data
 800226a:	4a08      	ldr	r2, [pc, #32]	@ (800228c <uart2_dma1_write+0x74>)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	60d3      	str	r3, [r2, #12]
	DMA1_Stream6->CR |= DMA_SxCR_EN;		// enable DMA stream
 8002270:	4b06      	ldr	r3, [pc, #24]	@ (800228c <uart2_dma1_write+0x74>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a05      	ldr	r2, [pc, #20]	@ (800228c <uart2_dma1_write+0x74>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6013      	str	r3, [r2, #0]
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	40004400 	.word	0x40004400
 800228c:	400260a0 	.word	0x400260a0
 8002290:	40026000 	.word	0x40026000

08002294 <memset>:
 8002294:	4402      	add	r2, r0
 8002296:	4603      	mov	r3, r0
 8002298:	4293      	cmp	r3, r2
 800229a:	d100      	bne.n	800229e <memset+0xa>
 800229c:	4770      	bx	lr
 800229e:	f803 1b01 	strb.w	r1, [r3], #1
 80022a2:	e7f9      	b.n	8002298 <memset+0x4>

080022a4 <__errno>:
 80022a4:	4b01      	ldr	r3, [pc, #4]	@ (80022ac <__errno+0x8>)
 80022a6:	6818      	ldr	r0, [r3, #0]
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	20000004 	.word	0x20000004

080022b0 <__libc_init_array>:
 80022b0:	b570      	push	{r4, r5, r6, lr}
 80022b2:	4d0d      	ldr	r5, [pc, #52]	@ (80022e8 <__libc_init_array+0x38>)
 80022b4:	4c0d      	ldr	r4, [pc, #52]	@ (80022ec <__libc_init_array+0x3c>)
 80022b6:	1b64      	subs	r4, r4, r5
 80022b8:	10a4      	asrs	r4, r4, #2
 80022ba:	2600      	movs	r6, #0
 80022bc:	42a6      	cmp	r6, r4
 80022be:	d109      	bne.n	80022d4 <__libc_init_array+0x24>
 80022c0:	4d0b      	ldr	r5, [pc, #44]	@ (80022f0 <__libc_init_array+0x40>)
 80022c2:	4c0c      	ldr	r4, [pc, #48]	@ (80022f4 <__libc_init_array+0x44>)
 80022c4:	f000 fbfe 	bl	8002ac4 <_init>
 80022c8:	1b64      	subs	r4, r4, r5
 80022ca:	10a4      	asrs	r4, r4, #2
 80022cc:	2600      	movs	r6, #0
 80022ce:	42a6      	cmp	r6, r4
 80022d0:	d105      	bne.n	80022de <__libc_init_array+0x2e>
 80022d2:	bd70      	pop	{r4, r5, r6, pc}
 80022d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80022d8:	4798      	blx	r3
 80022da:	3601      	adds	r6, #1
 80022dc:	e7ee      	b.n	80022bc <__libc_init_array+0xc>
 80022de:	f855 3b04 	ldr.w	r3, [r5], #4
 80022e2:	4798      	blx	r3
 80022e4:	3601      	adds	r6, #1
 80022e6:	e7f2      	b.n	80022ce <__libc_init_array+0x1e>
 80022e8:	08002b50 	.word	0x08002b50
 80022ec:	08002b50 	.word	0x08002b50
 80022f0:	08002b50 	.word	0x08002b50
 80022f4:	08002b54 	.word	0x08002b54

080022f8 <powf>:
 80022f8:	b508      	push	{r3, lr}
 80022fa:	ed2d 8b04 	vpush	{d8-d9}
 80022fe:	eeb0 8a60 	vmov.f32	s16, s1
 8002302:	eeb0 9a40 	vmov.f32	s18, s0
 8002306:	f000 f87b 	bl	8002400 <__ieee754_powf>
 800230a:	eeb4 8a48 	vcmp.f32	s16, s16
 800230e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002312:	eef0 8a40 	vmov.f32	s17, s0
 8002316:	d63e      	bvs.n	8002396 <powf+0x9e>
 8002318:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800231c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002320:	d112      	bne.n	8002348 <powf+0x50>
 8002322:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8002326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232a:	d039      	beq.n	80023a0 <powf+0xa8>
 800232c:	eeb0 0a48 	vmov.f32	s0, s16
 8002330:	f000 f858 	bl	80023e4 <finitef>
 8002334:	b378      	cbz	r0, 8002396 <powf+0x9e>
 8002336:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800233a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233e:	d52a      	bpl.n	8002396 <powf+0x9e>
 8002340:	f7ff ffb0 	bl	80022a4 <__errno>
 8002344:	2322      	movs	r3, #34	@ 0x22
 8002346:	e014      	b.n	8002372 <powf+0x7a>
 8002348:	f000 f84c 	bl	80023e4 <finitef>
 800234c:	b998      	cbnz	r0, 8002376 <powf+0x7e>
 800234e:	eeb0 0a49 	vmov.f32	s0, s18
 8002352:	f000 f847 	bl	80023e4 <finitef>
 8002356:	b170      	cbz	r0, 8002376 <powf+0x7e>
 8002358:	eeb0 0a48 	vmov.f32	s0, s16
 800235c:	f000 f842 	bl	80023e4 <finitef>
 8002360:	b148      	cbz	r0, 8002376 <powf+0x7e>
 8002362:	eef4 8a68 	vcmp.f32	s17, s17
 8002366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800236a:	d7e9      	bvc.n	8002340 <powf+0x48>
 800236c:	f7ff ff9a 	bl	80022a4 <__errno>
 8002370:	2321      	movs	r3, #33	@ 0x21
 8002372:	6003      	str	r3, [r0, #0]
 8002374:	e00f      	b.n	8002396 <powf+0x9e>
 8002376:	eef5 8a40 	vcmp.f32	s17, #0.0
 800237a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237e:	d10a      	bne.n	8002396 <powf+0x9e>
 8002380:	eeb0 0a49 	vmov.f32	s0, s18
 8002384:	f000 f82e 	bl	80023e4 <finitef>
 8002388:	b128      	cbz	r0, 8002396 <powf+0x9e>
 800238a:	eeb0 0a48 	vmov.f32	s0, s16
 800238e:	f000 f829 	bl	80023e4 <finitef>
 8002392:	2800      	cmp	r0, #0
 8002394:	d1d4      	bne.n	8002340 <powf+0x48>
 8002396:	eeb0 0a68 	vmov.f32	s0, s17
 800239a:	ecbd 8b04 	vpop	{d8-d9}
 800239e:	bd08      	pop	{r3, pc}
 80023a0:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80023a4:	e7f7      	b.n	8002396 <powf+0x9e>
	...

080023a8 <sqrtf>:
 80023a8:	b508      	push	{r3, lr}
 80023aa:	ed2d 8b02 	vpush	{d8}
 80023ae:	eeb0 8a40 	vmov.f32	s16, s0
 80023b2:	f000 f821 	bl	80023f8 <__ieee754_sqrtf>
 80023b6:	eeb4 8a48 	vcmp.f32	s16, s16
 80023ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023be:	d60c      	bvs.n	80023da <sqrtf+0x32>
 80023c0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80023e0 <sqrtf+0x38>
 80023c4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80023c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023cc:	d505      	bpl.n	80023da <sqrtf+0x32>
 80023ce:	f7ff ff69 	bl	80022a4 <__errno>
 80023d2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80023d6:	2321      	movs	r3, #33	@ 0x21
 80023d8:	6003      	str	r3, [r0, #0]
 80023da:	ecbd 8b02 	vpop	{d8}
 80023de:	bd08      	pop	{r3, pc}
 80023e0:	00000000 	.word	0x00000000

080023e4 <finitef>:
 80023e4:	ee10 3a10 	vmov	r3, s0
 80023e8:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80023ec:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80023f0:	bfac      	ite	ge
 80023f2:	2000      	movge	r0, #0
 80023f4:	2001      	movlt	r0, #1
 80023f6:	4770      	bx	lr

080023f8 <__ieee754_sqrtf>:
 80023f8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80023fc:	4770      	bx	lr
	...

08002400 <__ieee754_powf>:
 8002400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002404:	ee10 4a90 	vmov	r4, s1
 8002408:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800240c:	ed2d 8b02 	vpush	{d8}
 8002410:	ee10 6a10 	vmov	r6, s0
 8002414:	eeb0 8a40 	vmov.f32	s16, s0
 8002418:	eef0 8a60 	vmov.f32	s17, s1
 800241c:	d10c      	bne.n	8002438 <__ieee754_powf+0x38>
 800241e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8002422:	0076      	lsls	r6, r6, #1
 8002424:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8002428:	f240 8274 	bls.w	8002914 <__ieee754_powf+0x514>
 800242c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8002430:	ecbd 8b02 	vpop	{d8}
 8002434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002438:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800243c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8002440:	d802      	bhi.n	8002448 <__ieee754_powf+0x48>
 8002442:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8002446:	d908      	bls.n	800245a <__ieee754_powf+0x5a>
 8002448:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800244c:	d1ee      	bne.n	800242c <__ieee754_powf+0x2c>
 800244e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8002452:	0064      	lsls	r4, r4, #1
 8002454:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8002458:	e7e6      	b.n	8002428 <__ieee754_powf+0x28>
 800245a:	2e00      	cmp	r6, #0
 800245c:	da1f      	bge.n	800249e <__ieee754_powf+0x9e>
 800245e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8002462:	f080 8260 	bcs.w	8002926 <__ieee754_powf+0x526>
 8002466:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800246a:	d32f      	bcc.n	80024cc <__ieee754_powf+0xcc>
 800246c:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8002470:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8002474:	fa49 f503 	asr.w	r5, r9, r3
 8002478:	fa05 f303 	lsl.w	r3, r5, r3
 800247c:	454b      	cmp	r3, r9
 800247e:	d123      	bne.n	80024c8 <__ieee754_powf+0xc8>
 8002480:	f005 0501 	and.w	r5, r5, #1
 8002484:	f1c5 0502 	rsb	r5, r5, #2
 8002488:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800248c:	d11f      	bne.n	80024ce <__ieee754_powf+0xce>
 800248e:	2c00      	cmp	r4, #0
 8002490:	f280 8246 	bge.w	8002920 <__ieee754_powf+0x520>
 8002494:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8002498:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800249c:	e7c8      	b.n	8002430 <__ieee754_powf+0x30>
 800249e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80024a2:	d111      	bne.n	80024c8 <__ieee754_powf+0xc8>
 80024a4:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80024a8:	f000 8234 	beq.w	8002914 <__ieee754_powf+0x514>
 80024ac:	d906      	bls.n	80024bc <__ieee754_powf+0xbc>
 80024ae:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 80027c4 <__ieee754_powf+0x3c4>
 80024b2:	2c00      	cmp	r4, #0
 80024b4:	bfa8      	it	ge
 80024b6:	eeb0 0a68 	vmovge.f32	s0, s17
 80024ba:	e7b9      	b.n	8002430 <__ieee754_powf+0x30>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	f280 822c 	bge.w	800291a <__ieee754_powf+0x51a>
 80024c2:	eeb1 0a68 	vneg.f32	s0, s17
 80024c6:	e7b3      	b.n	8002430 <__ieee754_powf+0x30>
 80024c8:	2500      	movs	r5, #0
 80024ca:	e7dd      	b.n	8002488 <__ieee754_powf+0x88>
 80024cc:	2500      	movs	r5, #0
 80024ce:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80024d2:	d102      	bne.n	80024da <__ieee754_powf+0xda>
 80024d4:	ee28 0a08 	vmul.f32	s0, s16, s16
 80024d8:	e7aa      	b.n	8002430 <__ieee754_powf+0x30>
 80024da:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80024de:	f040 8227 	bne.w	8002930 <__ieee754_powf+0x530>
 80024e2:	2e00      	cmp	r6, #0
 80024e4:	f2c0 8224 	blt.w	8002930 <__ieee754_powf+0x530>
 80024e8:	eeb0 0a48 	vmov.f32	s0, s16
 80024ec:	ecbd 8b02 	vpop	{d8}
 80024f0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024f4:	f7ff bf80 	b.w	80023f8 <__ieee754_sqrtf>
 80024f8:	2d01      	cmp	r5, #1
 80024fa:	d199      	bne.n	8002430 <__ieee754_powf+0x30>
 80024fc:	eeb1 0a40 	vneg.f32	s0, s0
 8002500:	e796      	b.n	8002430 <__ieee754_powf+0x30>
 8002502:	0ff0      	lsrs	r0, r6, #31
 8002504:	3801      	subs	r0, #1
 8002506:	ea55 0300 	orrs.w	r3, r5, r0
 800250a:	d104      	bne.n	8002516 <__ieee754_powf+0x116>
 800250c:	ee38 8a48 	vsub.f32	s16, s16, s16
 8002510:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8002514:	e78c      	b.n	8002430 <__ieee754_powf+0x30>
 8002516:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800251a:	d96d      	bls.n	80025f8 <__ieee754_powf+0x1f8>
 800251c:	4baa      	ldr	r3, [pc, #680]	@ (80027c8 <__ieee754_powf+0x3c8>)
 800251e:	4598      	cmp	r8, r3
 8002520:	d808      	bhi.n	8002534 <__ieee754_powf+0x134>
 8002522:	2c00      	cmp	r4, #0
 8002524:	da0b      	bge.n	800253e <__ieee754_powf+0x13e>
 8002526:	2000      	movs	r0, #0
 8002528:	ecbd 8b02 	vpop	{d8}
 800252c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002530:	f000 bac2 	b.w	8002ab8 <__math_oflowf>
 8002534:	4ba5      	ldr	r3, [pc, #660]	@ (80027cc <__ieee754_powf+0x3cc>)
 8002536:	4598      	cmp	r8, r3
 8002538:	d908      	bls.n	800254c <__ieee754_powf+0x14c>
 800253a:	2c00      	cmp	r4, #0
 800253c:	dcf3      	bgt.n	8002526 <__ieee754_powf+0x126>
 800253e:	2000      	movs	r0, #0
 8002540:	ecbd 8b02 	vpop	{d8}
 8002544:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002548:	f000 bab0 	b.w	8002aac <__math_uflowf>
 800254c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8002550:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002554:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 80027d0 <__ieee754_powf+0x3d0>
 8002558:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800255c:	eee0 6a67 	vfms.f32	s13, s0, s15
 8002560:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8002564:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8002568:	ee20 7a00 	vmul.f32	s14, s0, s0
 800256c:	eddf 6a99 	vldr	s13, [pc, #612]	@ 80027d4 <__ieee754_powf+0x3d4>
 8002570:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002574:	eddf 7a98 	vldr	s15, [pc, #608]	@ 80027d8 <__ieee754_powf+0x3d8>
 8002578:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800257c:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80027dc <__ieee754_powf+0x3dc>
 8002580:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002584:	eeb0 7a67 	vmov.f32	s14, s15
 8002588:	eea0 7a26 	vfma.f32	s14, s0, s13
 800258c:	ee17 3a10 	vmov	r3, s14
 8002590:	f36f 030b 	bfc	r3, #0, #12
 8002594:	ee07 3a10 	vmov	s14, r3
 8002598:	eeb0 6a47 	vmov.f32	s12, s14
 800259c:	eea0 6a66 	vfms.f32	s12, s0, s13
 80025a0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80025a4:	3d01      	subs	r5, #1
 80025a6:	4305      	orrs	r5, r0
 80025a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025ac:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80025b0:	f36f 040b 	bfc	r4, #0, #12
 80025b4:	bf18      	it	ne
 80025b6:	eeb0 8a66 	vmovne.f32	s16, s13
 80025ba:	ee06 4a90 	vmov	s13, r4
 80025be:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80025c2:	ee38 6ae6 	vsub.f32	s12, s17, s13
 80025c6:	ee67 7a26 	vmul.f32	s15, s14, s13
 80025ca:	eee6 0a07 	vfma.f32	s1, s12, s14
 80025ce:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80025d2:	ee17 1a10 	vmov	r1, s14
 80025d6:	2900      	cmp	r1, #0
 80025d8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80025dc:	f340 80dd 	ble.w	800279a <__ieee754_powf+0x39a>
 80025e0:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80025e4:	f240 80ca 	bls.w	800277c <__ieee754_powf+0x37c>
 80025e8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80025ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f0:	bf4c      	ite	mi
 80025f2:	2001      	movmi	r0, #1
 80025f4:	2000      	movpl	r0, #0
 80025f6:	e797      	b.n	8002528 <__ieee754_powf+0x128>
 80025f8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80025fc:	bf01      	itttt	eq
 80025fe:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 80027e0 <__ieee754_powf+0x3e0>
 8002602:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8002606:	f06f 0317 	mvneq.w	r3, #23
 800260a:	ee17 7a90 	vmoveq	r7, s15
 800260e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8002612:	bf18      	it	ne
 8002614:	2300      	movne	r3, #0
 8002616:	3a7f      	subs	r2, #127	@ 0x7f
 8002618:	441a      	add	r2, r3
 800261a:	4b72      	ldr	r3, [pc, #456]	@ (80027e4 <__ieee754_powf+0x3e4>)
 800261c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8002620:	429f      	cmp	r7, r3
 8002622:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8002626:	dd06      	ble.n	8002636 <__ieee754_powf+0x236>
 8002628:	4b6f      	ldr	r3, [pc, #444]	@ (80027e8 <__ieee754_powf+0x3e8>)
 800262a:	429f      	cmp	r7, r3
 800262c:	f340 80a4 	ble.w	8002778 <__ieee754_powf+0x378>
 8002630:	3201      	adds	r2, #1
 8002632:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8002636:	2600      	movs	r6, #0
 8002638:	4b6c      	ldr	r3, [pc, #432]	@ (80027ec <__ieee754_powf+0x3ec>)
 800263a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800263e:	ee07 1a10 	vmov	s14, r1
 8002642:	edd3 5a00 	vldr	s11, [r3]
 8002646:	4b6a      	ldr	r3, [pc, #424]	@ (80027f0 <__ieee754_powf+0x3f0>)
 8002648:	ee75 7a87 	vadd.f32	s15, s11, s14
 800264c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002650:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8002654:	1049      	asrs	r1, r1, #1
 8002656:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800265a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800265e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8002662:	ee37 6a65 	vsub.f32	s12, s14, s11
 8002666:	ee07 1a90 	vmov	s15, r1
 800266a:	ee26 5a24 	vmul.f32	s10, s12, s9
 800266e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8002672:	ee15 7a10 	vmov	r7, s10
 8002676:	401f      	ands	r7, r3
 8002678:	ee06 7a90 	vmov	s13, r7
 800267c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8002680:	ee37 7a65 	vsub.f32	s14, s14, s11
 8002684:	ee65 7a05 	vmul.f32	s15, s10, s10
 8002688:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800268c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80027f4 <__ieee754_powf+0x3f4>
 8002690:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80027f8 <__ieee754_powf+0x3f8>
 8002694:	eee7 5a87 	vfma.f32	s11, s15, s14
 8002698:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80027fc <__ieee754_powf+0x3fc>
 800269c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80026a0:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 80027d0 <__ieee754_powf+0x3d0>
 80026a4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80026a8:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8002800 <__ieee754_powf+0x400>
 80026ac:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80026b0:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8002804 <__ieee754_powf+0x404>
 80026b4:	ee26 6a24 	vmul.f32	s12, s12, s9
 80026b8:	eee7 5a27 	vfma.f32	s11, s14, s15
 80026bc:	ee35 7a26 	vadd.f32	s14, s10, s13
 80026c0:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80026c4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80026c8:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80026cc:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80026d0:	eef0 5a67 	vmov.f32	s11, s15
 80026d4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80026d8:	ee75 5a87 	vadd.f32	s11, s11, s14
 80026dc:	ee15 1a90 	vmov	r1, s11
 80026e0:	4019      	ands	r1, r3
 80026e2:	ee05 1a90 	vmov	s11, r1
 80026e6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80026ea:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80026ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026f2:	ee67 7a85 	vmul.f32	s15, s15, s10
 80026f6:	eee6 7a25 	vfma.f32	s15, s12, s11
 80026fa:	eeb0 6a67 	vmov.f32	s12, s15
 80026fe:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8002702:	ee16 1a10 	vmov	r1, s12
 8002706:	4019      	ands	r1, r3
 8002708:	ee06 1a10 	vmov	s12, r1
 800270c:	eeb0 7a46 	vmov.f32	s14, s12
 8002710:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8002714:	493c      	ldr	r1, [pc, #240]	@ (8002808 <__ieee754_powf+0x408>)
 8002716:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800271a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800271e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800280c <__ieee754_powf+0x40c>
 8002722:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8002810 <__ieee754_powf+0x410>
 8002726:	ee67 7a87 	vmul.f32	s15, s15, s14
 800272a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8002814 <__ieee754_powf+0x414>
 800272e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8002732:	ed91 7a00 	vldr	s14, [r1]
 8002736:	ee77 7a87 	vadd.f32	s15, s15, s14
 800273a:	ee07 2a10 	vmov	s14, r2
 800273e:	4a36      	ldr	r2, [pc, #216]	@ (8002818 <__ieee754_powf+0x418>)
 8002740:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002744:	eeb0 7a67 	vmov.f32	s14, s15
 8002748:	eea6 7a25 	vfma.f32	s14, s12, s11
 800274c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8002750:	ed92 5a00 	vldr	s10, [r2]
 8002754:	ee37 7a05 	vadd.f32	s14, s14, s10
 8002758:	ee37 7a26 	vadd.f32	s14, s14, s13
 800275c:	ee17 2a10 	vmov	r2, s14
 8002760:	401a      	ands	r2, r3
 8002762:	ee07 2a10 	vmov	s14, r2
 8002766:	ee77 6a66 	vsub.f32	s13, s14, s13
 800276a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800276e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8002772:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002776:	e715      	b.n	80025a4 <__ieee754_powf+0x1a4>
 8002778:	2601      	movs	r6, #1
 800277a:	e75d      	b.n	8002638 <__ieee754_powf+0x238>
 800277c:	d152      	bne.n	8002824 <__ieee754_powf+0x424>
 800277e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800281c <__ieee754_powf+0x41c>
 8002782:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002786:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800278a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800278e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002792:	f73f af29 	bgt.w	80025e8 <__ieee754_powf+0x1e8>
 8002796:	2386      	movs	r3, #134	@ 0x86
 8002798:	e048      	b.n	800282c <__ieee754_powf+0x42c>
 800279a:	4a21      	ldr	r2, [pc, #132]	@ (8002820 <__ieee754_powf+0x420>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d907      	bls.n	80027b0 <__ieee754_powf+0x3b0>
 80027a0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80027a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a8:	bf4c      	ite	mi
 80027aa:	2001      	movmi	r0, #1
 80027ac:	2000      	movpl	r0, #0
 80027ae:	e6c7      	b.n	8002540 <__ieee754_powf+0x140>
 80027b0:	d138      	bne.n	8002824 <__ieee754_powf+0x424>
 80027b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027b6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80027ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027be:	dbea      	blt.n	8002796 <__ieee754_powf+0x396>
 80027c0:	e7ee      	b.n	80027a0 <__ieee754_powf+0x3a0>
 80027c2:	bf00      	nop
 80027c4:	00000000 	.word	0x00000000
 80027c8:	3f7ffff3 	.word	0x3f7ffff3
 80027cc:	3f800007 	.word	0x3f800007
 80027d0:	3eaaaaab 	.word	0x3eaaaaab
 80027d4:	3fb8aa00 	.word	0x3fb8aa00
 80027d8:	3fb8aa3b 	.word	0x3fb8aa3b
 80027dc:	36eca570 	.word	0x36eca570
 80027e0:	4b800000 	.word	0x4b800000
 80027e4:	001cc471 	.word	0x001cc471
 80027e8:	005db3d6 	.word	0x005db3d6
 80027ec:	08002b48 	.word	0x08002b48
 80027f0:	fffff000 	.word	0xfffff000
 80027f4:	3e6c3255 	.word	0x3e6c3255
 80027f8:	3e53f142 	.word	0x3e53f142
 80027fc:	3e8ba305 	.word	0x3e8ba305
 8002800:	3edb6db7 	.word	0x3edb6db7
 8002804:	3f19999a 	.word	0x3f19999a
 8002808:	08002b38 	.word	0x08002b38
 800280c:	3f76384f 	.word	0x3f76384f
 8002810:	3f763800 	.word	0x3f763800
 8002814:	369dc3a0 	.word	0x369dc3a0
 8002818:	08002b40 	.word	0x08002b40
 800281c:	3338aa3c 	.word	0x3338aa3c
 8002820:	43160000 	.word	0x43160000
 8002824:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8002828:	d96f      	bls.n	800290a <__ieee754_powf+0x50a>
 800282a:	15db      	asrs	r3, r3, #23
 800282c:	3b7e      	subs	r3, #126	@ 0x7e
 800282e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002832:	4118      	asrs	r0, r3
 8002834:	4408      	add	r0, r1
 8002836:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800283a:	4a4e      	ldr	r2, [pc, #312]	@ (8002974 <__ieee754_powf+0x574>)
 800283c:	3b7f      	subs	r3, #127	@ 0x7f
 800283e:	411a      	asrs	r2, r3
 8002840:	4002      	ands	r2, r0
 8002842:	ee07 2a10 	vmov	s14, r2
 8002846:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800284a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800284e:	f1c3 0317 	rsb	r3, r3, #23
 8002852:	4118      	asrs	r0, r3
 8002854:	2900      	cmp	r1, #0
 8002856:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800285a:	bfb8      	it	lt
 800285c:	4240      	neglt	r0, r0
 800285e:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8002862:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8002978 <__ieee754_powf+0x578>
 8002866:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800297c <__ieee754_powf+0x57c>
 800286a:	ee16 3a90 	vmov	r3, s13
 800286e:	f36f 030b 	bfc	r3, #0, #12
 8002872:	ee06 3a90 	vmov	s13, r3
 8002876:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800287a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800287e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8002882:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8002980 <__ieee754_powf+0x580>
 8002886:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800288a:	eee0 7a87 	vfma.f32	s15, s1, s14
 800288e:	eeb0 7a67 	vmov.f32	s14, s15
 8002892:	eea6 7a86 	vfma.f32	s14, s13, s12
 8002896:	eef0 5a47 	vmov.f32	s11, s14
 800289a:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800289e:	ee67 6a07 	vmul.f32	s13, s14, s14
 80028a2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80028a6:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8002984 <__ieee754_powf+0x584>
 80028aa:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8002988 <__ieee754_powf+0x588>
 80028ae:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80028b2:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800298c <__ieee754_powf+0x58c>
 80028b6:	eee6 5a26 	vfma.f32	s11, s12, s13
 80028ba:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8002990 <__ieee754_powf+0x590>
 80028be:	eea5 6aa6 	vfma.f32	s12, s11, s13
 80028c2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002994 <__ieee754_powf+0x594>
 80028c6:	eee6 5a26 	vfma.f32	s11, s12, s13
 80028ca:	eeb0 6a47 	vmov.f32	s12, s14
 80028ce:	eea5 6ae6 	vfms.f32	s12, s11, s13
 80028d2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80028d6:	ee67 5a06 	vmul.f32	s11, s14, s12
 80028da:	ee36 6a66 	vsub.f32	s12, s12, s13
 80028de:	eee7 7a27 	vfma.f32	s15, s14, s15
 80028e2:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80028e6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80028ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 80028f2:	ee10 3a10 	vmov	r3, s0
 80028f6:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80028fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80028fe:	da06      	bge.n	800290e <__ieee754_powf+0x50e>
 8002900:	f000 f854 	bl	80029ac <scalbnf>
 8002904:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002908:	e592      	b.n	8002430 <__ieee754_powf+0x30>
 800290a:	2000      	movs	r0, #0
 800290c:	e7a7      	b.n	800285e <__ieee754_powf+0x45e>
 800290e:	ee00 3a10 	vmov	s0, r3
 8002912:	e7f7      	b.n	8002904 <__ieee754_powf+0x504>
 8002914:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002918:	e58a      	b.n	8002430 <__ieee754_powf+0x30>
 800291a:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8002998 <__ieee754_powf+0x598>
 800291e:	e587      	b.n	8002430 <__ieee754_powf+0x30>
 8002920:	eeb0 0a48 	vmov.f32	s0, s16
 8002924:	e584      	b.n	8002430 <__ieee754_powf+0x30>
 8002926:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800292a:	f43f adbb 	beq.w	80024a4 <__ieee754_powf+0xa4>
 800292e:	2502      	movs	r5, #2
 8002930:	eeb0 0a48 	vmov.f32	s0, s16
 8002934:	f000 f832 	bl	800299c <fabsf>
 8002938:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800293c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8002940:	4647      	mov	r7, r8
 8002942:	d003      	beq.n	800294c <__ieee754_powf+0x54c>
 8002944:	f1b8 0f00 	cmp.w	r8, #0
 8002948:	f47f addb 	bne.w	8002502 <__ieee754_powf+0x102>
 800294c:	2c00      	cmp	r4, #0
 800294e:	bfbc      	itt	lt
 8002950:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8002954:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8002958:	2e00      	cmp	r6, #0
 800295a:	f6bf ad69 	bge.w	8002430 <__ieee754_powf+0x30>
 800295e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8002962:	ea58 0805 	orrs.w	r8, r8, r5
 8002966:	f47f adc7 	bne.w	80024f8 <__ieee754_powf+0xf8>
 800296a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800296e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8002972:	e55d      	b.n	8002430 <__ieee754_powf+0x30>
 8002974:	ff800000 	.word	0xff800000
 8002978:	3f317218 	.word	0x3f317218
 800297c:	3f317200 	.word	0x3f317200
 8002980:	35bfbe8c 	.word	0x35bfbe8c
 8002984:	b5ddea0e 	.word	0xb5ddea0e
 8002988:	3331bb4c 	.word	0x3331bb4c
 800298c:	388ab355 	.word	0x388ab355
 8002990:	bb360b61 	.word	0xbb360b61
 8002994:	3e2aaaab 	.word	0x3e2aaaab
 8002998:	00000000 	.word	0x00000000

0800299c <fabsf>:
 800299c:	ee10 3a10 	vmov	r3, s0
 80029a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029a4:	ee00 3a10 	vmov	s0, r3
 80029a8:	4770      	bx	lr
	...

080029ac <scalbnf>:
 80029ac:	ee10 3a10 	vmov	r3, s0
 80029b0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80029b4:	d02b      	beq.n	8002a0e <scalbnf+0x62>
 80029b6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80029ba:	d302      	bcc.n	80029c2 <scalbnf+0x16>
 80029bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80029c0:	4770      	bx	lr
 80029c2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80029c6:	d123      	bne.n	8002a10 <scalbnf+0x64>
 80029c8:	4b24      	ldr	r3, [pc, #144]	@ (8002a5c <scalbnf+0xb0>)
 80029ca:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8002a60 <scalbnf+0xb4>
 80029ce:	4298      	cmp	r0, r3
 80029d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80029d4:	db17      	blt.n	8002a06 <scalbnf+0x5a>
 80029d6:	ee10 3a10 	vmov	r3, s0
 80029da:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80029de:	3a19      	subs	r2, #25
 80029e0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80029e4:	4288      	cmp	r0, r1
 80029e6:	dd15      	ble.n	8002a14 <scalbnf+0x68>
 80029e8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8002a64 <scalbnf+0xb8>
 80029ec:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8002a68 <scalbnf+0xbc>
 80029f0:	ee10 3a10 	vmov	r3, s0
 80029f4:	eeb0 7a67 	vmov.f32	s14, s15
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	bfb8      	it	lt
 80029fc:	eef0 7a66 	vmovlt.f32	s15, s13
 8002a00:	ee27 0a87 	vmul.f32	s0, s15, s14
 8002a04:	4770      	bx	lr
 8002a06:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8002a6c <scalbnf+0xc0>
 8002a0a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002a0e:	4770      	bx	lr
 8002a10:	0dd2      	lsrs	r2, r2, #23
 8002a12:	e7e5      	b.n	80029e0 <scalbnf+0x34>
 8002a14:	4410      	add	r0, r2
 8002a16:	28fe      	cmp	r0, #254	@ 0xfe
 8002a18:	dce6      	bgt.n	80029e8 <scalbnf+0x3c>
 8002a1a:	2800      	cmp	r0, #0
 8002a1c:	dd06      	ble.n	8002a2c <scalbnf+0x80>
 8002a1e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8002a22:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8002a26:	ee00 3a10 	vmov	s0, r3
 8002a2a:	4770      	bx	lr
 8002a2c:	f110 0f16 	cmn.w	r0, #22
 8002a30:	da09      	bge.n	8002a46 <scalbnf+0x9a>
 8002a32:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8002a6c <scalbnf+0xc0>
 8002a36:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8002a70 <scalbnf+0xc4>
 8002a3a:	ee10 3a10 	vmov	r3, s0
 8002a3e:	eeb0 7a67 	vmov.f32	s14, s15
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	e7d9      	b.n	80029fa <scalbnf+0x4e>
 8002a46:	3019      	adds	r0, #25
 8002a48:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8002a4c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8002a50:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8002a74 <scalbnf+0xc8>
 8002a54:	ee07 3a90 	vmov	s15, r3
 8002a58:	e7d7      	b.n	8002a0a <scalbnf+0x5e>
 8002a5a:	bf00      	nop
 8002a5c:	ffff3cb0 	.word	0xffff3cb0
 8002a60:	4c000000 	.word	0x4c000000
 8002a64:	7149f2ca 	.word	0x7149f2ca
 8002a68:	f149f2ca 	.word	0xf149f2ca
 8002a6c:	0da24260 	.word	0x0da24260
 8002a70:	8da24260 	.word	0x8da24260
 8002a74:	33000000 	.word	0x33000000

08002a78 <with_errnof>:
 8002a78:	b510      	push	{r4, lr}
 8002a7a:	ed2d 8b02 	vpush	{d8}
 8002a7e:	eeb0 8a40 	vmov.f32	s16, s0
 8002a82:	4604      	mov	r4, r0
 8002a84:	f7ff fc0e 	bl	80022a4 <__errno>
 8002a88:	eeb0 0a48 	vmov.f32	s0, s16
 8002a8c:	ecbd 8b02 	vpop	{d8}
 8002a90:	6004      	str	r4, [r0, #0]
 8002a92:	bd10      	pop	{r4, pc}

08002a94 <xflowf>:
 8002a94:	b130      	cbz	r0, 8002aa4 <xflowf+0x10>
 8002a96:	eef1 7a40 	vneg.f32	s15, s0
 8002a9a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002a9e:	2022      	movs	r0, #34	@ 0x22
 8002aa0:	f7ff bfea 	b.w	8002a78 <with_errnof>
 8002aa4:	eef0 7a40 	vmov.f32	s15, s0
 8002aa8:	e7f7      	b.n	8002a9a <xflowf+0x6>
	...

08002aac <__math_uflowf>:
 8002aac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8002ab4 <__math_uflowf+0x8>
 8002ab0:	f7ff bff0 	b.w	8002a94 <xflowf>
 8002ab4:	10000000 	.word	0x10000000

08002ab8 <__math_oflowf>:
 8002ab8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8002ac0 <__math_oflowf+0x8>
 8002abc:	f7ff bfea 	b.w	8002a94 <xflowf>
 8002ac0:	70000000 	.word	0x70000000

08002ac4 <_init>:
 8002ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac6:	bf00      	nop
 8002ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aca:	bc08      	pop	{r3}
 8002acc:	469e      	mov	lr, r3
 8002ace:	4770      	bx	lr

08002ad0 <_fini>:
 8002ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad2:	bf00      	nop
 8002ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad6:	bc08      	pop	{r3}
 8002ad8:	469e      	mov	lr, r3
 8002ada:	4770      	bx	lr
