
echo_locate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002954  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002aec  08002aec  00003aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b60  08002b60  00004054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002b60  08002b60  00004054  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002b60  08002b60  00004054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b60  08002b60  00003b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b64  08002b64  00003b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08002b68  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  20000054  08002bbc  00004054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  08002bbc  0000453c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002c90  00000000  00000000  00004084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b78  00000000  00000000  00006d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000288  00000000  00000000  00007890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001e7  00000000  00000000  00007b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d04  00000000  00000000  00007cff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000439f  00000000  00000000  0002ca03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000839e9  00000000  00000000  00030da2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b478b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d40  00000000  00000000  000b47d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000b5510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000054 	.word	0x20000054
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002ad4 	.word	0x08002ad4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000058 	.word	0x20000058
 80001d4:	08002ad4 	.word	0x08002ad4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	0000      	movs	r0, r0
	...

08000b28 <main>:
void compute_event_pos(float * x, float * y, float mic0_x, float mic0_y,
					   float mic1_x, float mic1_y, float mic2_x, float mic2_y,
					   float mic1_delay, float mic2_delay);

int main(void)
{
 8000b28:	b5b0      	push	{r4, r5, r7, lr}
 8000b2a:	f5ad 7d30 	sub.w	sp, sp, #704	@ 0x2c0
 8000b2e:	af02      	add	r7, sp, #8

	sysclock_config();
 8000b30:	f000 fa90 	bl	8001054 <sysclock_config>

	q15_t mic0_state[NUM_FILTER_TAPS + SAMPLE_SIZE - 1];
	q15_t mic1_state[NUM_FILTER_TAPS + SAMPLE_SIZE - 1];
	q15_t mic2_state[NUM_FILTER_TAPS + SAMPLE_SIZE - 1];

	arm_fir_decimate_init_q15(&hfir0, NUM_FILTER_TAPS, DECIMATION_M, ftaps_q15, mic0_state, SAMPLE_SIZE);
 8000b34:	2330      	movs	r3, #48	@ 0x30
 8000b36:	9301      	str	r3, [sp, #4]
 8000b38:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	4bd0      	ldr	r3, [pc, #832]	@ (8000e80 <main+0x358>)
 8000b40:	2204      	movs	r2, #4
 8000b42:	212e      	movs	r1, #46	@ 0x2e
 8000b44:	48cf      	ldr	r0, [pc, #828]	@ (8000e84 <main+0x35c>)
 8000b46:	f001 f9f6 	bl	8001f36 <arm_fir_decimate_init_q15>
	arm_fir_decimate_init_q15(&hfir1, NUM_FILTER_TAPS, DECIMATION_M, ftaps_q15, mic1_state, SAMPLE_SIZE);
 8000b4a:	2330      	movs	r3, #48	@ 0x30
 8000b4c:	9301      	str	r3, [sp, #4]
 8000b4e:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	4bca      	ldr	r3, [pc, #808]	@ (8000e80 <main+0x358>)
 8000b56:	2204      	movs	r2, #4
 8000b58:	212e      	movs	r1, #46	@ 0x2e
 8000b5a:	48cb      	ldr	r0, [pc, #812]	@ (8000e88 <main+0x360>)
 8000b5c:	f001 f9eb 	bl	8001f36 <arm_fir_decimate_init_q15>
	arm_fir_decimate_init_q15(&hfir2, NUM_FILTER_TAPS, DECIMATION_M, ftaps_q15, mic2_state, SAMPLE_SIZE);
 8000b60:	2330      	movs	r3, #48	@ 0x30
 8000b62:	9301      	str	r3, [sp, #4]
 8000b64:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	4bc5      	ldr	r3, [pc, #788]	@ (8000e80 <main+0x358>)
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	212e      	movs	r1, #46	@ 0x2e
 8000b70:	48c6      	ldr	r0, [pc, #792]	@ (8000e8c <main+0x364>)
 8000b72:	f001 f9e0 	bl	8001f36 <arm_fir_decimate_init_q15>

	q15_t mic0_filtered[DECIMATION_SIZE];
	q15_t mic1_filtered[DECIMATION_SIZE];
	q15_t mic2_filtered[DECIMATION_SIZE];

	uart2_set_fcpu(84000000);
 8000b76:	48c6      	ldr	r0, [pc, #792]	@ (8000e90 <main+0x368>)
 8000b78:	f001 fa24 	bl	8001fc4 <uart2_set_fcpu>
	uart2_dma1_config(115200, USART_DATA_8, USART_STOP_1);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8000b84:	f001 fa2e 	bl	8001fe4 <uart2_dma1_config>

	tim5_time_config();
 8000b88:	f000 fc6c 	bl	8001464 <tim5_time_config>

	tim2_trig_config();
 8000b8c:	f000 fc2a 	bl	80013e4 <tim2_trig_config>
	adc1_dma_config();
 8000b90:	f000 faee 	bl	8001170 <adc1_dma_config>
//	GPIOA->MODER |= GPIO_MODER_MODER10_0;
//
//	GPIOA->MODER &= ~GPIO_MODER_MODER8;
//	GPIOA->MODER |= GPIO_MODER_MODER8_0;

	float mic0_timestamp = 0, mic1_timestamp = 0, mic2_timestamp = 0;
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8000b9c:	f04f 0300 	mov.w	r3, #0
 8000ba0:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 8000ba4:	f04f 0300 	mov.w	r3, #0
 8000ba8:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
	float last_event_timestamp = 0;
 8000bac:	f04f 0300 	mov.w	r3, #0
 8000bb0:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8

	uint8_t detection_cnt = 0;						// number of microphones that have detected an event
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
	uint32_t sample_cnt = 0;						// # of samples collected
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0

	uint32_t prev_cnt = 0, this_cnt = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c

	while (1)
	{

//		GPIOA->ODR |= GPIO_ODR_OD10;
		while (!!(DMA2_Stream0->CR & DMA_SxCR_CT) == dma_tgt);		// wait for stream to complete
 8000bcc:	bf00      	nop
 8000bce:	4bb1      	ldr	r3, [pc, #708]	@ (8000e94 <main+0x36c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	bf14      	ite	ne
 8000bda:	2301      	movne	r3, #1
 8000bdc:	2300      	moveq	r3, #0
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	461a      	mov	r2, r3
 8000be2:	4bad      	ldr	r3, [pc, #692]	@ (8000e98 <main+0x370>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d0f1      	beq.n	8000bce <main+0xa6>
		prev_cnt = this_cnt;
 8000bea:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8000bee:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
		this_cnt = TIM5->CNT;
 8000bf2:	4baa      	ldr	r3, [pc, #680]	@ (8000e9c <main+0x374>)
 8000bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bf6:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
//		GPIOA->ODR &= ~GPIO_ODR_OD10;
		dma_tgt = !dma_tgt;								// switch DMA targets
 8000bfa:	4ba7      	ldr	r3, [pc, #668]	@ (8000e98 <main+0x370>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	bf0c      	ite	eq
 8000c02:	2301      	moveq	r3, #1
 8000c04:	2300      	movne	r3, #0
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4ba3      	ldr	r3, [pc, #652]	@ (8000e98 <main+0x370>)
 8000c0c:	701a      	strb	r2, [r3, #0]
		DMA2->LIFCR |= DMA_LIFCR_CTCIF0 | DMA_LIFCR_CHTIF0;			// clear transfer complete and half complete flag
 8000c0e:	4ba4      	ldr	r3, [pc, #656]	@ (8000ea0 <main+0x378>)
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	4aa3      	ldr	r2, [pc, #652]	@ (8000ea0 <main+0x378>)
 8000c14:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000c18:	6093      	str	r3, [r2, #8]

		stream_splice();
 8000c1a:	f000 fc4f 	bl	80014bc <stream_splice>

//		GPIOA->ODR |= GPIO_ODR_OD8;

		// Cross correlation instead of filtering?
		arm_fir_decimate_fast_q15(&hfir0, mic0_samp, mic0_filtered, SAMPLE_SIZE);
 8000c1e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000c22:	2330      	movs	r3, #48	@ 0x30
 8000c24:	499f      	ldr	r1, [pc, #636]	@ (8000ea4 <main+0x37c>)
 8000c26:	4897      	ldr	r0, [pc, #604]	@ (8000e84 <main+0x35c>)
 8000c28:	f000 ffd1 	bl	8001bce <arm_fir_decimate_fast_q15>
		arm_fir_decimate_fast_q15(&hfir1, mic1_samp, mic1_filtered, SAMPLE_SIZE);
 8000c2c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000c30:	2330      	movs	r3, #48	@ 0x30
 8000c32:	499d      	ldr	r1, [pc, #628]	@ (8000ea8 <main+0x380>)
 8000c34:	4894      	ldr	r0, [pc, #592]	@ (8000e88 <main+0x360>)
 8000c36:	f000 ffca 	bl	8001bce <arm_fir_decimate_fast_q15>
		arm_fir_decimate_fast_q15(&hfir2, mic2_samp, mic2_filtered, SAMPLE_SIZE);
 8000c3a:	f107 0210 	add.w	r2, r7, #16
 8000c3e:	2330      	movs	r3, #48	@ 0x30
 8000c40:	499a      	ldr	r1, [pc, #616]	@ (8000eac <main+0x384>)
 8000c42:	4892      	ldr	r0, [pc, #584]	@ (8000e8c <main+0x364>)
 8000c44:	f000 ffc3 	bl	8001bce <arm_fir_decimate_fast_q15>

		uint16_t mic0_max, mic1_max, mic2_max;			// hold indices of max values in filtered sample (0-DECIMATION_SIZE)
		find_filter_peaks(mic0_filtered, mic1_filtered, mic2_filtered, &mic0_max, &mic1_max, &mic2_max);
 8000c48:	f107 040e 	add.w	r4, r7, #14
 8000c4c:	f107 0210 	add.w	r2, r7, #16
 8000c50:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000c54:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8000c58:	f107 030a 	add.w	r3, r7, #10
 8000c5c:	9301      	str	r3, [sp, #4]
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	4623      	mov	r3, r4
 8000c66:	f000 fcad 	bl	80015c4 <find_filter_peaks>

		float sample_based_time = sample_cnt * SAMPLE_PERIOD;
 8000c6a:	f8d7 02a0 	ldr.w	r0, [r7, #672]	@ 0x2a0
 8000c6e:	f7ff fbf5 	bl	800045c <__aeabi_ui2d>
 8000c72:	a37d      	add	r3, pc, #500	@ (adr r3, 8000e68 <main+0x340>)
 8000c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c78:	f7ff fd94 	bl	80007a4 <__aeabi_ddiv>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	460b      	mov	r3, r1
 8000c80:	4610      	mov	r0, r2
 8000c82:	4619      	mov	r1, r3
 8000c84:	f7ff fefe 	bl	8000a84 <__aeabi_d2f>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
		// if a new event has been detected, update time stamps and event count
		if ((abs(mic0_filtered[mic0_max]) > THRESH_EVENT) && (sample_based_time - mic0_timestamp > EVENT_DB_TIME))
 8000c8e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8000c92:	f2a3 23aa 	subw	r3, r3, #682	@ 0x2aa
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8000c9e:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8000ca2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	bfb8      	it	lt
 8000caa:	425b      	neglt	r3, r3
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000cb2:	d94f      	bls.n	8000d54 <main+0x22c>
 8000cb4:	ed97 7aa5 	vldr	s14, [r7, #660]	@ 0x294
 8000cb8:	edd7 7aad 	vldr	s15, [r7, #692]	@ 0x2b4
 8000cbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cc0:	ee17 0a90 	vmov	r0, s15
 8000cc4:	f7ff fbec 	bl	80004a0 <__aeabi_f2d>
 8000cc8:	a369      	add	r3, pc, #420	@ (adr r3, 8000e70 <main+0x348>)
 8000cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cce:	f7ff fecf 	bl	8000a70 <__aeabi_dcmpgt>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d03d      	beq.n	8000d54 <main+0x22c>
		{
			mic0_timestamp = prev_cnt * TIME_PERIOD + mic0_max * SAMPLE_PERIOD * DECIMATION_M;
 8000cd8:	f8d7 0298 	ldr.w	r0, [r7, #664]	@ 0x298
 8000cdc:	f7ff fbbe 	bl	800045c <__aeabi_ui2d>
 8000ce0:	a365      	add	r3, pc, #404	@ (adr r3, 8000e78 <main+0x350>)
 8000ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce6:	f7ff fd5d 	bl	80007a4 <__aeabi_ddiv>
 8000cea:	4602      	mov	r2, r0
 8000cec:	460b      	mov	r3, r1
 8000cee:	4614      	mov	r4, r2
 8000cf0:	461d      	mov	r5, r3
 8000cf2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8000cf6:	f2a3 23aa 	subw	r3, r3, #682	@ 0x2aa
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fbbd 	bl	800047c <__aeabi_i2d>
 8000d02:	a359      	add	r3, pc, #356	@ (adr r3, 8000e68 <main+0x340>)
 8000d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d08:	f7ff fd4c 	bl	80007a4 <__aeabi_ddiv>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4610      	mov	r0, r2
 8000d12:	4619      	mov	r1, r3
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	4b65      	ldr	r3, [pc, #404]	@ (8000eb0 <main+0x388>)
 8000d1a:	f7ff fc19 	bl	8000550 <__aeabi_dmul>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	460b      	mov	r3, r1
 8000d22:	4620      	mov	r0, r4
 8000d24:	4629      	mov	r1, r5
 8000d26:	f7ff fa5d 	bl	80001e4 <__adddf3>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	4610      	mov	r0, r2
 8000d30:	4619      	mov	r1, r3
 8000d32:	f7ff fea7 	bl	8000a84 <__aeabi_d2f>
 8000d36:	4603      	mov	r3, r0
 8000d38:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
			mic_detected_event[0] = 1;
 8000d3c:	4b5d      	ldr	r3, [pc, #372]	@ (8000eb4 <main+0x38c>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
			detection_cnt++;
 8000d42:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8000d46:	3301      	adds	r3, #1
 8000d48:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
			last_event_timestamp = mic0_timestamp;
 8000d4c:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8000d50:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
		}

		if ((abs(mic1_filtered[mic1_max]) > THRESH_EVENT) && (sample_based_time - mic1_timestamp > EVENT_DB_TIME))
 8000d54:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8000d58:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8000d64:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8000d68:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	bfb8      	it	lt
 8000d70:	425b      	neglt	r3, r3
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000d78:	d94f      	bls.n	8000e1a <main+0x2f2>
 8000d7a:	ed97 7aa5 	vldr	s14, [r7, #660]	@ 0x294
 8000d7e:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8000d82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d86:	ee17 0a90 	vmov	r0, s15
 8000d8a:	f7ff fb89 	bl	80004a0 <__aeabi_f2d>
 8000d8e:	a338      	add	r3, pc, #224	@ (adr r3, 8000e70 <main+0x348>)
 8000d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d94:	f7ff fe6c 	bl	8000a70 <__aeabi_dcmpgt>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d03d      	beq.n	8000e1a <main+0x2f2>
		{
			// account for sample delay later
			mic1_timestamp = prev_cnt * TIME_PERIOD + mic1_max * SAMPLE_PERIOD * DECIMATION_M;
 8000d9e:	f8d7 0298 	ldr.w	r0, [r7, #664]	@ 0x298
 8000da2:	f7ff fb5b 	bl	800045c <__aeabi_ui2d>
 8000da6:	a334      	add	r3, pc, #208	@ (adr r3, 8000e78 <main+0x350>)
 8000da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dac:	f7ff fcfa 	bl	80007a4 <__aeabi_ddiv>
 8000db0:	4602      	mov	r2, r0
 8000db2:	460b      	mov	r3, r1
 8000db4:	4614      	mov	r4, r2
 8000db6:	461d      	mov	r5, r3
 8000db8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8000dbc:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fb5a 	bl	800047c <__aeabi_i2d>
 8000dc8:	a327      	add	r3, pc, #156	@ (adr r3, 8000e68 <main+0x340>)
 8000dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dce:	f7ff fce9 	bl	80007a4 <__aeabi_ddiv>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	4610      	mov	r0, r2
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f04f 0200 	mov.w	r2, #0
 8000dde:	4b34      	ldr	r3, [pc, #208]	@ (8000eb0 <main+0x388>)
 8000de0:	f7ff fbb6 	bl	8000550 <__aeabi_dmul>
 8000de4:	4602      	mov	r2, r0
 8000de6:	460b      	mov	r3, r1
 8000de8:	4620      	mov	r0, r4
 8000dea:	4629      	mov	r1, r5
 8000dec:	f7ff f9fa 	bl	80001e4 <__adddf3>
 8000df0:	4602      	mov	r2, r0
 8000df2:	460b      	mov	r3, r1
 8000df4:	4610      	mov	r0, r2
 8000df6:	4619      	mov	r1, r3
 8000df8:	f7ff fe44 	bl	8000a84 <__aeabi_d2f>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
			mic_detected_event[1] = 1;
 8000e02:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb4 <main+0x38c>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	705a      	strb	r2, [r3, #1]
			detection_cnt++;
 8000e08:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
			last_event_timestamp = mic1_timestamp;
 8000e12:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8000e16:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
		}

		if ((abs(mic2_filtered[mic2_max]) > THRESH_EVENT) && (sample_based_time - mic2_timestamp > EVENT_DB_TIME))
 8000e1a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8000e1e:	f2a3 23ae 	subw	r3, r3, #686	@ 0x2ae
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8000e2a:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8000e2e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	bfb8      	it	lt
 8000e36:	425b      	neglt	r3, r3
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e3e:	d979      	bls.n	8000f34 <main+0x40c>
 8000e40:	ed97 7aa5 	vldr	s14, [r7, #660]	@ 0x294
 8000e44:	edd7 7aab 	vldr	s15, [r7, #684]	@ 0x2ac
 8000e48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e4c:	ee17 0a90 	vmov	r0, s15
 8000e50:	f7ff fb26 	bl	80004a0 <__aeabi_f2d>
 8000e54:	a306      	add	r3, pc, #24	@ (adr r3, 8000e70 <main+0x348>)
 8000e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5a:	f7ff fe09 	bl	8000a70 <__aeabi_dcmpgt>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d067      	beq.n	8000f34 <main+0x40c>
 8000e64:	e028      	b.n	8000eb8 <main+0x390>
 8000e66:	bf00      	nop
 8000e68:	00000000 	.word	0x00000000
 8000e6c:	40e38800 	.word	0x40e38800
 8000e70:	9999999a 	.word	0x9999999a
 8000e74:	3fb99999 	.word	0x3fb99999
 8000e78:	00000000 	.word	0x00000000
 8000e7c:	40f86a00 	.word	0x40f86a00
 8000e80:	08002aec 	.word	0x08002aec
 8000e84:	20000070 	.word	0x20000070
 8000e88:	2000007c 	.word	0x2000007c
 8000e8c:	20000088 	.word	0x20000088
 8000e90:	0501bd00 	.word	0x0501bd00
 8000e94:	40026410 	.word	0x40026410
 8000e98:	200003f4 	.word	0x200003f4
 8000e9c:	40000c00 	.word	0x40000c00
 8000ea0:	40026400 	.word	0x40026400
 8000ea4:	200002d4 	.word	0x200002d4
 8000ea8:	20000334 	.word	0x20000334
 8000eac:	20000394 	.word	0x20000394
 8000eb0:	40100000 	.word	0x40100000
 8000eb4:	200003f8 	.word	0x200003f8
		{
			// account for sample delay later
			mic2_timestamp = prev_cnt * TIME_PERIOD + mic2_max * SAMPLE_PERIOD * DECIMATION_M;
 8000eb8:	f8d7 0298 	ldr.w	r0, [r7, #664]	@ 0x298
 8000ebc:	f7ff face 	bl	800045c <__aeabi_ui2d>
 8000ec0:	a360      	add	r3, pc, #384	@ (adr r3, 8001044 <main+0x51c>)
 8000ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec6:	f7ff fc6d 	bl	80007a4 <__aeabi_ddiv>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	4614      	mov	r4, r2
 8000ed0:	461d      	mov	r5, r3
 8000ed2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8000ed6:	f2a3 23ae 	subw	r3, r3, #686	@ 0x2ae
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff facd 	bl	800047c <__aeabi_i2d>
 8000ee2:	a35a      	add	r3, pc, #360	@ (adr r3, 800104c <main+0x524>)
 8000ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee8:	f7ff fc5c 	bl	80007a4 <__aeabi_ddiv>
 8000eec:	4602      	mov	r2, r0
 8000eee:	460b      	mov	r3, r1
 8000ef0:	4610      	mov	r0, r2
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f04f 0200 	mov.w	r2, #0
 8000ef8:	4b4d      	ldr	r3, [pc, #308]	@ (8001030 <main+0x508>)
 8000efa:	f7ff fb29 	bl	8000550 <__aeabi_dmul>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
 8000f02:	4620      	mov	r0, r4
 8000f04:	4629      	mov	r1, r5
 8000f06:	f7ff f96d 	bl	80001e4 <__adddf3>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	4610      	mov	r0, r2
 8000f10:	4619      	mov	r1, r3
 8000f12:	f7ff fdb7 	bl	8000a84 <__aeabi_d2f>
 8000f16:	4603      	mov	r3, r0
 8000f18:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
			mic_detected_event[2] = 1;
 8000f1c:	4b45      	ldr	r3, [pc, #276]	@ (8001034 <main+0x50c>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	709a      	strb	r2, [r3, #2]
			detection_cnt++;
 8000f22:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8000f26:	3301      	adds	r3, #1
 8000f28:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
			last_event_timestamp = mic2_timestamp;
 8000f2c:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8000f30:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
		mic_detected_event[0] = 1;
		mic_detected_event[1] = 1;
		mic_detected_event[2] = 1;
		*/

		if (detection_cnt >= 3)
 8000f34:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d954      	bls.n	8000fe6 <main+0x4be>
		{
			if (detection_cnt == 3 && mic_detected_event[0] && mic_detected_event[1] && mic_detected_event[2])
 8000f3c:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8000f40:	2b03      	cmp	r3, #3
 8000f42:	d143      	bne.n	8000fcc <main+0x4a4>
 8000f44:	4b3b      	ldr	r3, [pc, #236]	@ (8001034 <main+0x50c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d03f      	beq.n	8000fcc <main+0x4a4>
 8000f4c:	4b39      	ldr	r3, [pc, #228]	@ (8001034 <main+0x50c>)
 8000f4e:	785b      	ldrb	r3, [r3, #1]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d03b      	beq.n	8000fcc <main+0x4a4>
 8000f54:	4b37      	ldr	r3, [pc, #220]	@ (8001034 <main+0x50c>)
 8000f56:	789b      	ldrb	r3, [r3, #2]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d037      	beq.n	8000fcc <main+0x4a4>
			{
				// GOOD state
				// mic0 is the reference
				float mic1_delay = mic1_timestamp - mic0_timestamp;
 8000f5c:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 8000f60:	edd7 7aad 	vldr	s15, [r7, #692]	@ 0x2b4
 8000f64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f68:	edc7 7aa4 	vstr	s15, [r7, #656]	@ 0x290
				float mic2_delay = mic2_timestamp - mic0_timestamp;
 8000f6c:	ed97 7aab 	vldr	s14, [r7, #684]	@ 0x2ac
 8000f70:	edd7 7aad 	vldr	s15, [r7, #692]	@ 0x2b4
 8000f74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f78:	edc7 7aa3 	vstr	s15, [r7, #652]	@ 0x28c
					float coords_f[2];			// (x, y)
					uint8_t serial[8];
				} coords;

				// initial guess
				coords.coords_f[0] = 0.23;
 8000f7c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8000f80:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8000f84:	4a2c      	ldr	r2, [pc, #176]	@ (8001038 <main+0x510>)
 8000f86:	601a      	str	r2, [r3, #0]
				coords.coords_f[1] = 0.38;
 8000f88:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8000f8c:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8000f90:	4a2a      	ldr	r2, [pc, #168]	@ (800103c <main+0x514>)
 8000f92:	605a      	str	r2, [r3, #4]

				compute_event_pos(&coords.coords_f[0], &coords.coords_f[1], MIC0_XPOS, MIC0_YPOS, MIC1_XPOS, MIC1_YPOS, MIC2_XPOS, MIC2_YPOS, mic1_delay, mic2_delay);
 8000f94:	463b      	mov	r3, r7
 8000f96:	1d1a      	adds	r2, r3, #4
 8000f98:	463b      	mov	r3, r7
 8000f9a:	edd7 3aa3 	vldr	s7, [r7, #652]	@ 0x28c
 8000f9e:	ed97 3aa4 	vldr	s6, [r7, #656]	@ 0x290
 8000fa2:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 8000fa6:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 8000faa:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8000fae:	ed9f 1a24 	vldr	s2, [pc, #144]	@ 8001040 <main+0x518>
 8000fb2:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8001040 <main+0x518>
 8000fb6:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8001040 <main+0x518>
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 fb73 	bl	80016a8 <compute_event_pos>
				uart2_dma1_write(8, coords.serial);
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	2008      	movs	r0, #8
 8000fc8:	f001 f92e 	bl	8002228 <uart2_dma1_write>
			{
				// ERROR state
			}

			// reset event detection
			detection_cnt = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
			mic_detected_event[0] = 0;
 8000fd2:	4b18      	ldr	r3, [pc, #96]	@ (8001034 <main+0x50c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
			mic_detected_event[1] = 0;
 8000fd8:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <main+0x50c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	705a      	strb	r2, [r3, #1]
			mic_detected_event[2] = 0;
 8000fde:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <main+0x50c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	709a      	strb	r2, [r3, #2]
 8000fe4:	e01c      	b.n	8001020 <main+0x4f8>
		}
		else if (detection_cnt != 0 && sample_based_time - last_event_timestamp > TIMEOUT_S)
 8000fe6:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d018      	beq.n	8001020 <main+0x4f8>
 8000fee:	ed97 7aa5 	vldr	s14, [r7, #660]	@ 0x294
 8000ff2:	edd7 7aaa 	vldr	s15, [r7, #680]	@ 0x2a8
 8000ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ffa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ffe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001006:	dd0b      	ble.n	8001020 <main+0x4f8>
		{
			detection_cnt = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
			mic_detected_event[0] = 0;
 800100e:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <main+0x50c>)
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
			mic_detected_event[1] = 0;
 8001014:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <main+0x50c>)
 8001016:	2200      	movs	r2, #0
 8001018:	705a      	strb	r2, [r3, #1]
			mic_detected_event[2] = 0;
 800101a:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <main+0x50c>)
 800101c:	2200      	movs	r2, #0
 800101e:	709a      	strb	r2, [r3, #2]
		}


		sample_cnt += SAMPLE_SIZE;
 8001020:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001024:	3330      	adds	r3, #48	@ 0x30
 8001026:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
	{
 800102a:	e5cf      	b.n	8000bcc <main+0xa4>
 800102c:	f3af 8000 	nop.w
 8001030:	40100000 	.word	0x40100000
 8001034:	200003f8 	.word	0x200003f8
 8001038:	3e6b851f 	.word	0x3e6b851f
 800103c:	3ec28f5c 	.word	0x3ec28f5c
	...
 8001048:	40f86a00 	.word	0x40f86a00
 800104c:	00000000 	.word	0x00000000
 8001050:	40e38800 	.word	0x40e38800

08001054 <sysclock_config>:
//		GPIOA->ODR &= ~GPIO_ODR_OD8;
	}
}

void sysclock_config(void)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
	// 16 MHz HSI oscillator is default on reset, but select anyways
	RCC->CR |= RCC_CR_HSION;
 800105a:	4b42      	ldr	r3, [pc, #264]	@ (8001164 <sysclock_config+0x110>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a41      	ldr	r2, [pc, #260]	@ (8001164 <sysclock_config+0x110>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6013      	str	r3, [r2, #0]
	// wait for HSI to be ready
	while (!((RCC->CR) & RCC_CR_HSIRDY));
 8001066:	bf00      	nop
 8001068:	4b3e      	ldr	r3, [pc, #248]	@ (8001164 <sysclock_config+0x110>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d0f9      	beq.n	8001068 <sysclock_config+0x14>

	// enable power interface clock for APB1
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001074:	4b3b      	ldr	r3, [pc, #236]	@ (8001164 <sysclock_config+0x110>)
 8001076:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800107a:	641a      	str	r2, [r3, #64]	@ 0x40

	// configure VCO to scale 2 per CubeMX
	PWR->CR |= PWR_CR_VOS_1;
 800107c:	4b3a      	ldr	r3, [pc, #232]	@ (8001168 <sysclock_config+0x114>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a39      	ldr	r2, [pc, #228]	@ (8001168 <sysclock_config+0x114>)
 8001082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001086:	6013      	str	r3, [r2, #0]
	PWR->CR &= ~PWR_CR_VOS_0;
 8001088:	4b37      	ldr	r3, [pc, #220]	@ (8001168 <sysclock_config+0x114>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a36      	ldr	r2, [pc, #216]	@ (8001168 <sysclock_config+0x114>)
 800108e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001092:	6013      	str	r3, [r2, #0]

	// configure FLASH
	// instruction cache, prefetch enable, and data cache enabled
	uint32_t flash;
	flash = FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN;
 8001094:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001098:	60fb      	str	r3, [r7, #12]
	flash |= 2;		// 2 wait states for flash
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	60fb      	str	r3, [r7, #12]
	FLASH->ACR = flash;
 80010a2:	4a32      	ldr	r2, [pc, #200]	@ (800116c <sysclock_config+0x118>)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6013      	str	r3, [r2, #0]

	// configure bus prescalers
	uint32_t cfgr = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_PPRE2_2;		// APB2 prescaler of 1 (84MHz)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80010b2:	60bb      	str	r3, [r7, #8]
	cfgr |= RCC_CFGR_PPRE1_2;		// APB1 prescaler of 2 (42MHZ)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010ba:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_HPRE;			// AHB prescaler of 1 (84MHz)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80010c2:	60bb      	str	r3, [r7, #8]
	RCC->CFGR = cfgr;
 80010c4:	4a27      	ldr	r2, [pc, #156]	@ (8001164 <sysclock_config+0x110>)
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	6093      	str	r3, [r2, #8]

	// configure main PLL
	uint32_t pll_cfg = RCC->PLLCFGR;
 80010ca:	4b26      	ldr	r3, [pc, #152]	@ (8001164 <sysclock_config+0x110>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	607b      	str	r3, [r7, #4]
	pll_cfg &= ~RCC_PLLCFGR_PLLQ;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80010d6:	607b      	str	r3, [r7, #4]
	pll_cfg |= RCC_PLLCFGR_PLLQ_2; // configure Q prescaler for USB, SDIO, RNG clocks (/4)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80010de:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLP;	// main PLL division factor of 2
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80010e6:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLN;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80010ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80010f2:	607b      	str	r3, [r7, #4]
	pll_cfg |= 168UL << 6;	// pll multiplication factor for VCO (x168)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f443 5328 	orr.w	r3, r3, #10752	@ 0x2a00
 80010fa:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLM;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001102:	607b      	str	r3, [r7, #4]
	pll_cfg |= 16UL << 0;	// pll division factor for main PLL and audio PLL (/16)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f043 0310 	orr.w	r3, r3, #16
 800110a:	607b      	str	r3, [r7, #4]

	RCC->PLLCFGR = pll_cfg;
 800110c:	4a15      	ldr	r2, [pc, #84]	@ (8001164 <sysclock_config+0x110>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6053      	str	r3, [r2, #4]

	// enable PLL and wait for ready
	RCC->CR |= RCC_CR_PLLON;
 8001112:	4b14      	ldr	r3, [pc, #80]	@ (8001164 <sysclock_config+0x110>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a13      	ldr	r2, [pc, #76]	@ (8001164 <sysclock_config+0x110>)
 8001118:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800111c:	6013      	str	r3, [r2, #0]
	while (!((RCC->CR) & RCC_CR_PLLRDY));
 800111e:	bf00      	nop
 8001120:	4b10      	ldr	r3, [pc, #64]	@ (8001164 <sysclock_config+0x110>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0f9      	beq.n	8001120 <sysclock_config+0xcc>

	// select clock source
	cfgr = RCC->CFGR;
 800112c:	4b0d      	ldr	r3, [pc, #52]	@ (8001164 <sysclock_config+0x110>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	60bb      	str	r3, [r7, #8]
	cfgr |= RCC_CFGR_SW_1;		// select PLL as system clock
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_SW_0;
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	f023 0301 	bic.w	r3, r3, #1
 8001140:	60bb      	str	r3, [r7, #8]
	RCC->CFGR = cfgr;
 8001142:	4a08      	ldr	r2, [pc, #32]	@ (8001164 <sysclock_config+0x110>)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	6093      	str	r3, [r2, #8]

	// wait for PLL clock source to become active
	while (!((RCC->CFGR) & RCC_CFGR_SWS_1));
 8001148:	bf00      	nop
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <sysclock_config+0x110>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 0308 	and.w	r3, r3, #8
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0f9      	beq.n	800114a <sysclock_config+0xf6>
}
 8001156:	bf00      	nop
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	40023800 	.word	0x40023800
 8001168:	40007000 	.word	0x40007000
 800116c:	40023c00 	.word	0x40023c00

08001170 <adc1_dma_config>:

void adc1_dma_config(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;				// enable ADC1 clock
 8001174:	4b93      	ldr	r3, [pc, #588]	@ (80013c4 <adc1_dma_config+0x254>)
 8001176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001178:	4a92      	ldr	r2, [pc, #584]	@ (80013c4 <adc1_dma_config+0x254>)
 800117a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800117e:	6453      	str	r3, [r2, #68]	@ 0x44
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;			// enable GPIOA clock
 8001180:	4b90      	ldr	r3, [pc, #576]	@ (80013c4 <adc1_dma_config+0x254>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001184:	4a8f      	ldr	r2, [pc, #572]	@ (80013c4 <adc1_dma_config+0x254>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6313      	str	r3, [r2, #48]	@ 0x30

	// PA0 as analog input
	GPIOA->MODER |= GPIO_MODER_MODER0_0 | GPIO_MODER_MODER0_1;
 800118c:	4b8e      	ldr	r3, [pc, #568]	@ (80013c8 <adc1_dma_config+0x258>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a8d      	ldr	r2, [pc, #564]	@ (80013c8 <adc1_dma_config+0x258>)
 8001192:	f043 0303 	orr.w	r3, r3, #3
 8001196:	6013      	str	r3, [r2, #0]
	// PA1 as analog input
	GPIOA->MODER |= GPIO_MODER_MODER1_0 | GPIO_MODER_MODER1_1;
 8001198:	4b8b      	ldr	r3, [pc, #556]	@ (80013c8 <adc1_dma_config+0x258>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a8a      	ldr	r2, [pc, #552]	@ (80013c8 <adc1_dma_config+0x258>)
 800119e:	f043 030c 	orr.w	r3, r3, #12
 80011a2:	6013      	str	r3, [r2, #0]
	// PA4 as analog input
	GPIOA->MODER |= GPIO_MODER_MODER4_0 | GPIO_MODER_MODER4_1;
 80011a4:	4b88      	ldr	r3, [pc, #544]	@ (80013c8 <adc1_dma_config+0x258>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a87      	ldr	r2, [pc, #540]	@ (80013c8 <adc1_dma_config+0x258>)
 80011aa:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80011ae:	6013      	str	r3, [r2, #0]

	ADC1->CR2 &= ~ADC_CR2_ADON;						// turn off ADC to configure
 80011b0:	4b86      	ldr	r3, [pc, #536]	@ (80013cc <adc1_dma_config+0x25c>)
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	4a85      	ldr	r2, [pc, #532]	@ (80013cc <adc1_dma_config+0x25c>)
 80011b6:	f023 0301 	bic.w	r3, r3, #1
 80011ba:	6093      	str	r3, [r2, #8]

	// APB2 clock (84 MHz) / 4 = 21 MHz
	// MAX ADC clock freq is 36 MHz (pg 106 datasheet)
	ADC->CCR &= ~ADC_CCR_ADCPRE;
 80011bc:	4b84      	ldr	r3, [pc, #528]	@ (80013d0 <adc1_dma_config+0x260>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	4a83      	ldr	r2, [pc, #524]	@ (80013d0 <adc1_dma_config+0x260>)
 80011c2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80011c6:	6053      	str	r3, [r2, #4]
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 80011c8:	4b81      	ldr	r3, [pc, #516]	@ (80013d0 <adc1_dma_config+0x260>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	4a80      	ldr	r2, [pc, #512]	@ (80013d0 <adc1_dma_config+0x260>)
 80011ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011d2:	6053      	str	r3, [r2, #4]

	// trigger detection on rising edge
	ADC1->CR2 |= ADC_CR2_EXTEN_0;
 80011d4:	4b7d      	ldr	r3, [pc, #500]	@ (80013cc <adc1_dma_config+0x25c>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	4a7c      	ldr	r2, [pc, #496]	@ (80013cc <adc1_dma_config+0x25c>)
 80011da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011de:	6093      	str	r3, [r2, #8]
	ADC1->CR2 &= ~ADC_CR2_EXTEN_1;
 80011e0:	4b7a      	ldr	r3, [pc, #488]	@ (80013cc <adc1_dma_config+0x25c>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	4a79      	ldr	r2, [pc, #484]	@ (80013cc <adc1_dma_config+0x25c>)
 80011e6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80011ea:	6093      	str	r3, [r2, #8]

	// TIM2 TRGO event
	ADC1->CR2 |= ADC_CR2_EXTSEL_1 | ADC_CR2_EXTSEL_2;
 80011ec:	4b77      	ldr	r3, [pc, #476]	@ (80013cc <adc1_dma_config+0x25c>)
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	4a76      	ldr	r2, [pc, #472]	@ (80013cc <adc1_dma_config+0x25c>)
 80011f2:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 80011f6:	6093      	str	r3, [r2, #8]
	ADC1->CR2 &= ~(ADC_CR2_EXTSEL_0 | ADC_CR2_EXTSEL_3);
 80011f8:	4b74      	ldr	r3, [pc, #464]	@ (80013cc <adc1_dma_config+0x25c>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	4a73      	ldr	r2, [pc, #460]	@ (80013cc <adc1_dma_config+0x25c>)
 80011fe:	f023 6310 	bic.w	r3, r3, #150994944	@ 0x9000000
 8001202:	6093      	str	r3, [r2, #8]

	// Scan mode to convert all 3 channels
	ADC1->CR1 |= ADC_CR1_SCAN;
 8001204:	4b71      	ldr	r3, [pc, #452]	@ (80013cc <adc1_dma_config+0x25c>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	4a70      	ldr	r2, [pc, #448]	@ (80013cc <adc1_dma_config+0x25c>)
 800120a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800120e:	6053      	str	r3, [r2, #4]

	// EOC bit set at end of each sequence of regular conversions
	ADC1->CR2 &= ~ADC_CR2_EOCS;
 8001210:	4b6e      	ldr	r3, [pc, #440]	@ (80013cc <adc1_dma_config+0x25c>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	4a6d      	ldr	r2, [pc, #436]	@ (80013cc <adc1_dma_config+0x25c>)
 8001216:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800121a:	6093      	str	r3, [r2, #8]

	// 3 cycles before sample
	ADC1->SMPR2 &= ~(ADC_SMPR2_SMP0 | ADC_SMPR2_SMP1 | ADC_SMPR2_SMP2);
 800121c:	4b6b      	ldr	r3, [pc, #428]	@ (80013cc <adc1_dma_config+0x25c>)
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	4a6a      	ldr	r2, [pc, #424]	@ (80013cc <adc1_dma_config+0x25c>)
 8001222:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8001226:	f023 0301 	bic.w	r3, r3, #1
 800122a:	6113      	str	r3, [r2, #16]

	// 3 conversions per sequence
	ADC1->SQR1 &= ~ADC_SQR1_L;
 800122c:	4b67      	ldr	r3, [pc, #412]	@ (80013cc <adc1_dma_config+0x25c>)
 800122e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001230:	4a66      	ldr	r2, [pc, #408]	@ (80013cc <adc1_dma_config+0x25c>)
 8001232:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001236:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC1->SQR1 |= ADC_SQR1_L_1;
 8001238:	4b64      	ldr	r3, [pc, #400]	@ (80013cc <adc1_dma_config+0x25c>)
 800123a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800123c:	4a63      	ldr	r2, [pc, #396]	@ (80013cc <adc1_dma_config+0x25c>)
 800123e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001242:	62d3      	str	r3, [r2, #44]	@ 0x2c

	// channel 0 (PA0 --> ADC1_IN0) is first conversion
	ADC1->SQR3 &= ~ADC_SQR3_SQ1;
 8001244:	4b61      	ldr	r3, [pc, #388]	@ (80013cc <adc1_dma_config+0x25c>)
 8001246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001248:	4a60      	ldr	r2, [pc, #384]	@ (80013cc <adc1_dma_config+0x25c>)
 800124a:	f023 031f 	bic.w	r3, r3, #31
 800124e:	6353      	str	r3, [r2, #52]	@ 0x34

	// channel 1 (PA1 --> ADC1_IN1) is second conversion
	ADC1->SQR3 &= ~ADC_SQR3_SQ2;
 8001250:	4b5e      	ldr	r3, [pc, #376]	@ (80013cc <adc1_dma_config+0x25c>)
 8001252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001254:	4a5d      	ldr	r2, [pc, #372]	@ (80013cc <adc1_dma_config+0x25c>)
 8001256:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 800125a:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC1->SQR3 |= ADC_SQR3_SQ2_0;
 800125c:	4b5b      	ldr	r3, [pc, #364]	@ (80013cc <adc1_dma_config+0x25c>)
 800125e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001260:	4a5a      	ldr	r2, [pc, #360]	@ (80013cc <adc1_dma_config+0x25c>)
 8001262:	f043 0320 	orr.w	r3, r3, #32
 8001266:	6353      	str	r3, [r2, #52]	@ 0x34

	// channel 4 (PA4 --> ADC1_IN4) is third conversion
	ADC1->SQR3 &= ~ADC_SQR3_SQ3;
 8001268:	4b58      	ldr	r3, [pc, #352]	@ (80013cc <adc1_dma_config+0x25c>)
 800126a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800126c:	4a57      	ldr	r2, [pc, #348]	@ (80013cc <adc1_dma_config+0x25c>)
 800126e:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8001272:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC1->SQR3 |= ADC_SQR3_SQ3_2;
 8001274:	4b55      	ldr	r3, [pc, #340]	@ (80013cc <adc1_dma_config+0x25c>)
 8001276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001278:	4a54      	ldr	r2, [pc, #336]	@ (80013cc <adc1_dma_config+0x25c>)
 800127a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800127e:	6353      	str	r3, [r2, #52]	@ 0x34


	/* DMA2 Channel 0, Stream 0 --> ADC1 */
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;		// enable DMA2 clock
 8001280:	4b50      	ldr	r3, [pc, #320]	@ (80013c4 <adc1_dma_config+0x254>)
 8001282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001284:	4a4f      	ldr	r2, [pc, #316]	@ (80013c4 <adc1_dma_config+0x254>)
 8001286:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800128a:	6313      	str	r3, [r2, #48]	@ 0x30

	DMA2_Stream0->CR &= ~DMA_SxCR_EN;		// disable stream
 800128c:	4b51      	ldr	r3, [pc, #324]	@ (80013d4 <adc1_dma_config+0x264>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a50      	ldr	r2, [pc, #320]	@ (80013d4 <adc1_dma_config+0x264>)
 8001292:	f023 0301 	bic.w	r3, r3, #1
 8001296:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream0->CR & DMA_SxCR_EN);	// wait for stream to disable
 8001298:	bf00      	nop
 800129a:	4b4e      	ldr	r3, [pc, #312]	@ (80013d4 <adc1_dma_config+0x264>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f9      	bne.n	800129a <adc1_dma_config+0x12a>

	DMA2_Stream0->PAR = (uint32_t)&(ADC1->DR);// peripheral address
 80012a6:	4b4b      	ldr	r3, [pc, #300]	@ (80013d4 <adc1_dma_config+0x264>)
 80012a8:	4a4b      	ldr	r2, [pc, #300]	@ (80013d8 <adc1_dma_config+0x268>)
 80012aa:	609a      	str	r2, [r3, #8]
	DMA2_Stream0->M0AR = (uint32_t)stream0;	// destination memory address (CT = 0)
 80012ac:	4b49      	ldr	r3, [pc, #292]	@ (80013d4 <adc1_dma_config+0x264>)
 80012ae:	4a4b      	ldr	r2, [pc, #300]	@ (80013dc <adc1_dma_config+0x26c>)
 80012b0:	60da      	str	r2, [r3, #12]
	DMA2_Stream0->M1AR = (uint32_t)stream1;	// destination memory address (CT = 1)
 80012b2:	4b48      	ldr	r3, [pc, #288]	@ (80013d4 <adc1_dma_config+0x264>)
 80012b4:	4a4a      	ldr	r2, [pc, #296]	@ (80013e0 <adc1_dma_config+0x270>)
 80012b6:	611a      	str	r2, [r3, #16]
	DMA2_Stream0->NDTR = BLOCK_SIZE;		// number of units to be transmitted
 80012b8:	4b46      	ldr	r3, [pc, #280]	@ (80013d4 <adc1_dma_config+0x264>)
 80012ba:	2290      	movs	r2, #144	@ 0x90
 80012bc:	605a      	str	r2, [r3, #4]

	DMA2_Stream0->CR &= ~DMA_SxCR_CHSEL;	// channel 0 selected
 80012be:	4b45      	ldr	r3, [pc, #276]	@ (80013d4 <adc1_dma_config+0x264>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a44      	ldr	r2, [pc, #272]	@ (80013d4 <adc1_dma_config+0x264>)
 80012c4:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 80012c8:	6013      	str	r3, [r2, #0]

	DMA2_Stream0->CR &= ~DMA_SxCR_PFCTRL;	// DMA is the flow controller
 80012ca:	4b42      	ldr	r3, [pc, #264]	@ (80013d4 <adc1_dma_config+0x264>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a41      	ldr	r2, [pc, #260]	@ (80013d4 <adc1_dma_config+0x264>)
 80012d0:	f023 0320 	bic.w	r3, r3, #32
 80012d4:	6013      	str	r3, [r2, #0]

	// priority level: medium
	DMA2_Stream0->CR |= DMA_SxCR_PL_0;
 80012d6:	4b3f      	ldr	r3, [pc, #252]	@ (80013d4 <adc1_dma_config+0x264>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a3e      	ldr	r2, [pc, #248]	@ (80013d4 <adc1_dma_config+0x264>)
 80012dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012e0:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~DMA_SxCR_PL_1;
 80012e2:	4b3c      	ldr	r3, [pc, #240]	@ (80013d4 <adc1_dma_config+0x264>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a3b      	ldr	r2, [pc, #236]	@ (80013d4 <adc1_dma_config+0x264>)
 80012e8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80012ec:	6013      	str	r3, [r2, #0]

	// disable direct mode
	// FIFO threshold of 1/2 before transfer
	DMA2_Stream0->FCR |= DMA_SxFCR_DMDIS;
 80012ee:	4b39      	ldr	r3, [pc, #228]	@ (80013d4 <adc1_dma_config+0x264>)
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	4a38      	ldr	r2, [pc, #224]	@ (80013d4 <adc1_dma_config+0x264>)
 80012f4:	f043 0304 	orr.w	r3, r3, #4
 80012f8:	6153      	str	r3, [r2, #20]
	DMA2_Stream0->FCR |= DMA_SxFCR_FTH_0;
 80012fa:	4b36      	ldr	r3, [pc, #216]	@ (80013d4 <adc1_dma_config+0x264>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a35      	ldr	r2, [pc, #212]	@ (80013d4 <adc1_dma_config+0x264>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6153      	str	r3, [r2, #20]
	DMA2_Stream0->FCR &= ~DMA_SxFCR_FTH_1;
 8001306:	4b33      	ldr	r3, [pc, #204]	@ (80013d4 <adc1_dma_config+0x264>)
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	4a32      	ldr	r2, [pc, #200]	@ (80013d4 <adc1_dma_config+0x264>)
 800130c:	f023 0302 	bic.w	r3, r3, #2
 8001310:	6153      	str	r3, [r2, #20]

	// memory data size: half word (16 bits)
	DMA2_Stream0->CR |= DMA_SxCR_MSIZE_0;
 8001312:	4b30      	ldr	r3, [pc, #192]	@ (80013d4 <adc1_dma_config+0x264>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a2f      	ldr	r2, [pc, #188]	@ (80013d4 <adc1_dma_config+0x264>)
 8001318:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800131c:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~DMA_SxCR_MSIZE_1;
 800131e:	4b2d      	ldr	r3, [pc, #180]	@ (80013d4 <adc1_dma_config+0x264>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a2c      	ldr	r2, [pc, #176]	@ (80013d4 <adc1_dma_config+0x264>)
 8001324:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001328:	6013      	str	r3, [r2, #0]

	// peripheral data size: half word (16 bits)
	DMA2_Stream0->CR |= DMA_SxCR_PSIZE_0;
 800132a:	4b2a      	ldr	r3, [pc, #168]	@ (80013d4 <adc1_dma_config+0x264>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a29      	ldr	r2, [pc, #164]	@ (80013d4 <adc1_dma_config+0x264>)
 8001330:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001334:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~DMA_SxCR_PSIZE_1;
 8001336:	4b27      	ldr	r3, [pc, #156]	@ (80013d4 <adc1_dma_config+0x264>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a26      	ldr	r2, [pc, #152]	@ (80013d4 <adc1_dma_config+0x264>)
 800133c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001340:	6013      	str	r3, [r2, #0]

	// increment memory address after every transfer
	DMA2_Stream0->CR |= DMA_SxCR_MINC;
 8001342:	4b24      	ldr	r3, [pc, #144]	@ (80013d4 <adc1_dma_config+0x264>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a23      	ldr	r2, [pc, #140]	@ (80013d4 <adc1_dma_config+0x264>)
 8001348:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800134c:	6013      	str	r3, [r2, #0]

	// disable peripheral address increment
	DMA2_Stream0->CR &= ~DMA_SxCR_PINC;
 800134e:	4b21      	ldr	r3, [pc, #132]	@ (80013d4 <adc1_dma_config+0x264>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a20      	ldr	r2, [pc, #128]	@ (80013d4 <adc1_dma_config+0x264>)
 8001354:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001358:	6013      	str	r3, [r2, #0]

	// peripheral to memory data direction
	DMA2_Stream0->CR &= ~DMA_SxCR_DIR;
 800135a:	4b1e      	ldr	r3, [pc, #120]	@ (80013d4 <adc1_dma_config+0x264>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a1d      	ldr	r2, [pc, #116]	@ (80013d4 <adc1_dma_config+0x264>)
 8001360:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001364:	6013      	str	r3, [r2, #0]

	// circular mode --> reload NDTR after every transfer complete
	DMA2_Stream0->CR |= DMA_SxCR_CIRC;
 8001366:	4b1b      	ldr	r3, [pc, #108]	@ (80013d4 <adc1_dma_config+0x264>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a1a      	ldr	r2, [pc, #104]	@ (80013d4 <adc1_dma_config+0x264>)
 800136c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001370:	6013      	str	r3, [r2, #0]

	// double buffer mode; current target is memory 0 (DMA_SxM0AR)
	DMA2_Stream0->CR |= DMA_SxCR_DBM;
 8001372:	4b18      	ldr	r3, [pc, #96]	@ (80013d4 <adc1_dma_config+0x264>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a17      	ldr	r2, [pc, #92]	@ (80013d4 <adc1_dma_config+0x264>)
 8001378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800137c:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~DMA_SxCR_CT;
 800137e:	4b15      	ldr	r3, [pc, #84]	@ (80013d4 <adc1_dma_config+0x264>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a14      	ldr	r2, [pc, #80]	@ (80013d4 <adc1_dma_config+0x264>)
 8001384:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001388:	6013      	str	r3, [r2, #0]


	DMA2_Stream0->CR |= DMA_SxCR_EN;		// enable DMA stream
 800138a:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <adc1_dma_config+0x264>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a11      	ldr	r2, [pc, #68]	@ (80013d4 <adc1_dma_config+0x264>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6013      	str	r3, [r2, #0]

	ADC1->CR2 |= ADC_CR2_DMA;				// enable DMA
 8001396:	4b0d      	ldr	r3, [pc, #52]	@ (80013cc <adc1_dma_config+0x25c>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	4a0c      	ldr	r2, [pc, #48]	@ (80013cc <adc1_dma_config+0x25c>)
 800139c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013a0:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_DDS;				// DMA requests issued as long as DMA=1
 80013a2:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <adc1_dma_config+0x25c>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	4a09      	ldr	r2, [pc, #36]	@ (80013cc <adc1_dma_config+0x25c>)
 80013a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013ac:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_ADON;				// turn on ADC
 80013ae:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <adc1_dma_config+0x25c>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	4a06      	ldr	r2, [pc, #24]	@ (80013cc <adc1_dma_config+0x25c>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6093      	str	r3, [r2, #8]
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020000 	.word	0x40020000
 80013cc:	40012000 	.word	0x40012000
 80013d0:	40012300 	.word	0x40012300
 80013d4:	40026410 	.word	0x40026410
 80013d8:	4001204c 	.word	0x4001204c
 80013dc:	20000094 	.word	0x20000094
 80013e0:	200001b4 	.word	0x200001b4

080013e4 <tim2_trig_config>:

void tim2_trig_config(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;				// enable TIM2 clock
 80013e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001460 <tim2_trig_config+0x7c>)
 80013ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001460 <tim2_trig_config+0x7c>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6413      	str	r3, [r2, #64]	@ 0x40

	TIM2->CR1 &= ~TIM_CR1_DIR;			// upcounting
 80013f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013fe:	f023 0310 	bic.w	r3, r3, #16
 8001402:	6013      	str	r3, [r2, #0]
	TIM2->PSC = 0;						// /1 prescaler
 8001404:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001408:	2200      	movs	r2, #0
 800140a:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 2099;					// 40kHz frequency
 800140c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001410:	f640 0233 	movw	r2, #2099	@ 0x833
 8001414:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM2->CR2 |= TIM_CR2_MMS_1;
 8001416:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001420:	f043 0320 	orr.w	r3, r3, #32
 8001424:	6053      	str	r3, [r2, #4]
	TIM2->CR2 &= ~(TIM_CR2_MMS_0 | TIM_CR2_MMS_2);		// update event as TRGO
 8001426:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001430:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8001434:	6053      	str	r3, [r2, #4]

	TIM2->EGR |= TIM_EGR_UG;			// generate update event
 8001436:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6153      	str	r3, [r2, #20]

	TIM2->CR1 |= TIM_CR1_CEN;			// enable counter
 8001446:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6013      	str	r3, [r2, #0]
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	40023800 	.word	0x40023800

08001464 <tim5_time_config>:

void tim5_time_config(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;				// enable TIM2 clock
 8001468:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <tim5_time_config+0x50>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146c:	4a11      	ldr	r2, [pc, #68]	@ (80014b4 <tim5_time_config+0x50>)
 800146e:	f043 0308 	orr.w	r3, r3, #8
 8001472:	6413      	str	r3, [r2, #64]	@ 0x40

	TIM5->CR1 &= ~TIM_CR1_DIR;			// upcounting
 8001474:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <tim5_time_config+0x54>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0f      	ldr	r2, [pc, #60]	@ (80014b8 <tim5_time_config+0x54>)
 800147a:	f023 0310 	bic.w	r3, r3, #16
 800147e:	6013      	str	r3, [r2, #0]
	TIM5->PSC = 839;					// 100kHz frequency
 8001480:	4b0d      	ldr	r3, [pc, #52]	@ (80014b8 <tim5_time_config+0x54>)
 8001482:	f240 3247 	movw	r2, #839	@ 0x347
 8001486:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM5->ARR = 0xffffffff;
 8001488:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <tim5_time_config+0x54>)
 800148a:	f04f 32ff 	mov.w	r2, #4294967295
 800148e:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM5->EGR |= TIM_EGR_UG;			// generate update event
 8001490:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <tim5_time_config+0x54>)
 8001492:	695b      	ldr	r3, [r3, #20]
 8001494:	4a08      	ldr	r2, [pc, #32]	@ (80014b8 <tim5_time_config+0x54>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6153      	str	r3, [r2, #20]

	TIM5->CR1 |= TIM_CR1_CEN;			// enable counter
 800149c:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <tim5_time_config+0x54>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a05      	ldr	r2, [pc, #20]	@ (80014b8 <tim5_time_config+0x54>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6013      	str	r3, [r2, #0]
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40000c00 	.word	0x40000c00

080014bc <stream_splice>:

void stream_splice(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < BLOCK_SIZE; i += 3)
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	e065      	b.n	8001594 <stream_splice+0xd8>
	{
		uint32_t ind = i / 3;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a37      	ldr	r2, [pc, #220]	@ (80015a8 <stream_splice+0xec>)
 80014cc:	fba2 2303 	umull	r2, r3, r2, r3
 80014d0:	085b      	lsrs	r3, r3, #1
 80014d2:	603b      	str	r3, [r7, #0]

		// DMA is targeting M1AR ---> read from M0AR memory
		// TO DO: check ranges of mic0
		if (dma_tgt)
 80014d4:	4b35      	ldr	r3, [pc, #212]	@ (80015ac <stream_splice+0xf0>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d02c      	beq.n	8001536 <stream_splice+0x7a>
		{
			mic0_samp[ind] = ((int16_t)stream0[i] - 2048) << 4;
 80014dc:	4a34      	ldr	r2, [pc, #208]	@ (80015b0 <stream_splice+0xf4>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014e4:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	b21b      	sxth	r3, r3
 80014ec:	011b      	lsls	r3, r3, #4
 80014ee:	b219      	sxth	r1, r3
 80014f0:	4a30      	ldr	r2, [pc, #192]	@ (80015b4 <stream_splice+0xf8>)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			mic1_samp[ind] = ((int16_t)stream0[i+1] - 2048) << 4;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3301      	adds	r3, #1
 80014fc:	4a2c      	ldr	r2, [pc, #176]	@ (80015b0 <stream_splice+0xf4>)
 80014fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001502:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001506:	b29b      	uxth	r3, r3
 8001508:	b21b      	sxth	r3, r3
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	b219      	sxth	r1, r3
 800150e:	4a2a      	ldr	r2, [pc, #168]	@ (80015b8 <stream_splice+0xfc>)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			mic2_samp[ind] = ((int16_t)stream0[i+2] - 2048) << 4;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3302      	adds	r3, #2
 800151a:	4a25      	ldr	r2, [pc, #148]	@ (80015b0 <stream_splice+0xf4>)
 800151c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001520:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001524:	b29b      	uxth	r3, r3
 8001526:	b21b      	sxth	r3, r3
 8001528:	011b      	lsls	r3, r3, #4
 800152a:	b219      	sxth	r1, r3
 800152c:	4a23      	ldr	r2, [pc, #140]	@ (80015bc <stream_splice+0x100>)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001534:	e02b      	b.n	800158e <stream_splice+0xd2>
		}
		else
		{
			mic0_samp[ind] = ((int16_t)stream1[i] - 2048) << 4;
 8001536:	4a22      	ldr	r2, [pc, #136]	@ (80015c0 <stream_splice+0x104>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800153e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001542:	b29b      	uxth	r3, r3
 8001544:	b21b      	sxth	r3, r3
 8001546:	011b      	lsls	r3, r3, #4
 8001548:	b219      	sxth	r1, r3
 800154a:	4a1a      	ldr	r2, [pc, #104]	@ (80015b4 <stream_splice+0xf8>)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			mic1_samp[ind] = ((int16_t)stream1[i+1] - 2048) << 4;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3301      	adds	r3, #1
 8001556:	4a1a      	ldr	r2, [pc, #104]	@ (80015c0 <stream_splice+0x104>)
 8001558:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800155c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001560:	b29b      	uxth	r3, r3
 8001562:	b21b      	sxth	r3, r3
 8001564:	011b      	lsls	r3, r3, #4
 8001566:	b219      	sxth	r1, r3
 8001568:	4a13      	ldr	r2, [pc, #76]	@ (80015b8 <stream_splice+0xfc>)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			mic2_samp[ind] = ((int16_t)stream1[i+2] - 2048) << 4;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3302      	adds	r3, #2
 8001574:	4a12      	ldr	r2, [pc, #72]	@ (80015c0 <stream_splice+0x104>)
 8001576:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800157a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800157e:	b29b      	uxth	r3, r3
 8001580:	b21b      	sxth	r3, r3
 8001582:	011b      	lsls	r3, r3, #4
 8001584:	b219      	sxth	r1, r3
 8001586:	4a0d      	ldr	r2, [pc, #52]	@ (80015bc <stream_splice+0x100>)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint32_t i = 0; i < BLOCK_SIZE; i += 3)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3303      	adds	r3, #3
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b8f      	cmp	r3, #143	@ 0x8f
 8001598:	d996      	bls.n	80014c8 <stream_splice+0xc>
		}
	}
}
 800159a:	bf00      	nop
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	aaaaaaab 	.word	0xaaaaaaab
 80015ac:	200003f4 	.word	0x200003f4
 80015b0:	20000094 	.word	0x20000094
 80015b4:	200002d4 	.word	0x200002d4
 80015b8:	20000334 	.word	0x20000334
 80015bc:	20000394 	.word	0x20000394
 80015c0:	200001b4 	.word	0x200001b4

080015c4 <find_filter_peaks>:

void find_filter_peaks(q15_t * mic0_filtered, q15_t * mic1_filtered, q15_t * mic2_filtered,
						uint16_t * mic0_ind, uint16_t * mic1_ind, uint16_t * mic2_ind)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b087      	sub	sp, #28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
 80015d0:	603b      	str	r3, [r7, #0]
	*mic0_ind = 0;
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	2200      	movs	r2, #0
 80015d6:	801a      	strh	r2, [r3, #0]
	*mic1_ind = 0;
 80015d8:	6a3b      	ldr	r3, [r7, #32]
 80015da:	2200      	movs	r2, #0
 80015dc:	801a      	strh	r2, [r3, #0]
	*mic2_ind = 0;
 80015de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e0:	2200      	movs	r2, #0
 80015e2:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 1; i < DECIMATION_SIZE; i++)
 80015e4:	2301      	movs	r3, #1
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	e053      	b.n	8001692 <find_filter_peaks+0xce>
	{
		if (abs(mic0_filtered[i]) > abs(mic0_filtered[*mic0_ind]))
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	4413      	add	r3, r2
 80015f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	bfb8      	it	lt
 80015fa:	425b      	neglt	r3, r3
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	68f9      	ldr	r1, [r7, #12]
 8001606:	440b      	add	r3, r1
 8001608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160c:	2b00      	cmp	r3, #0
 800160e:	bfb8      	it	lt
 8001610:	425b      	neglt	r3, r3
 8001612:	b29b      	uxth	r3, r3
 8001614:	429a      	cmp	r2, r3
 8001616:	d903      	bls.n	8001620 <find_filter_peaks+0x5c>
		{
			*mic0_ind = i;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	b29a      	uxth	r2, r3
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	801a      	strh	r2, [r3, #0]
		}
		if (abs(mic1_filtered[i]) > abs(mic1_filtered[*mic1_ind]))
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	68ba      	ldr	r2, [r7, #8]
 8001626:	4413      	add	r3, r2
 8001628:	f9b3 3000 	ldrsh.w	r3, [r3]
 800162c:	2b00      	cmp	r3, #0
 800162e:	bfb8      	it	lt
 8001630:	425b      	neglt	r3, r3
 8001632:	b29a      	uxth	r2, r3
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	68b9      	ldr	r1, [r7, #8]
 800163c:	440b      	add	r3, r1
 800163e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001642:	2b00      	cmp	r3, #0
 8001644:	bfb8      	it	lt
 8001646:	425b      	neglt	r3, r3
 8001648:	b29b      	uxth	r3, r3
 800164a:	429a      	cmp	r2, r3
 800164c:	d903      	bls.n	8001656 <find_filter_peaks+0x92>
		{
			*mic1_ind = i;
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	b29a      	uxth	r2, r3
 8001652:	6a3b      	ldr	r3, [r7, #32]
 8001654:	801a      	strh	r2, [r3, #0]
		}
		if (abs(mic2_filtered[i]) > abs(mic2_filtered[*mic2_ind]))
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001662:	2b00      	cmp	r3, #0
 8001664:	bfb8      	it	lt
 8001666:	425b      	neglt	r3, r3
 8001668:	b29a      	uxth	r2, r3
 800166a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	440b      	add	r3, r1
 8001674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001678:	2b00      	cmp	r3, #0
 800167a:	bfb8      	it	lt
 800167c:	425b      	neglt	r3, r3
 800167e:	b29b      	uxth	r3, r3
 8001680:	429a      	cmp	r2, r3
 8001682:	d903      	bls.n	800168c <find_filter_peaks+0xc8>
		{
			*mic2_ind = i;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	b29a      	uxth	r2, r3
 8001688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168a:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 1; i < DECIMATION_SIZE; i++)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	3301      	adds	r3, #1
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	2b0b      	cmp	r3, #11
 8001696:	d9a8      	bls.n	80015ea <find_filter_peaks+0x26>
		}
	}
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	371c      	adds	r7, #28
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <compute_event_pos>:

void compute_event_pos(float * x, float * y, float mic0_x, float mic0_y,
					   float mic1_x, float mic1_y, float mic2_x, float mic2_y,
					   float mic1_delay, float mic2_delay)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	ed2d 8b02 	vpush	{d8}
 80016ae:	b0a0      	sub	sp, #128	@ 0x80
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6278      	str	r0, [r7, #36]	@ 0x24
 80016b4:	6239      	str	r1, [r7, #32]
 80016b6:	ed87 0a07 	vstr	s0, [r7, #28]
 80016ba:	edc7 0a06 	vstr	s1, [r7, #24]
 80016be:	ed87 1a05 	vstr	s2, [r7, #20]
 80016c2:	edc7 1a04 	vstr	s3, [r7, #16]
 80016c6:	ed87 2a03 	vstr	s4, [r7, #12]
 80016ca:	edc7 2a02 	vstr	s5, [r7, #8]
 80016ce:	ed87 3a01 	vstr	s6, [r7, #4]
 80016d2:	edc7 3a00 	vstr	s7, [r7]

	for (uint8_t i = 0; i < 10; i++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80016dc:	e1f8      	b.n	8001ad0 <compute_event_pos+0x428>
	{
		// distances from mic1 and mic2 to mic0
		float d10 = SPEED_OF_SOUND * mic1_delay;
 80016de:	edd7 7a01 	vldr	s15, [r7, #4]
 80016e2:	ed9f 7acb 	vldr	s14, [pc, #812]	@ 8001a10 <compute_event_pos+0x368>
 80016e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ea:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
		float d20 = SPEED_OF_SOUND * mic2_delay;
 80016ee:	edd7 7a00 	vldr	s15, [r7]
 80016f2:	ed9f 7ac7 	vldr	s14, [pc, #796]	@ 8001a10 <compute_event_pos+0x368>
 80016f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016fa:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

		// compute radii of guesses
		float r0 = sqrtf(powf(*x - mic0_x, 2) + powf(*y - mic0_y, 2));
 80016fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001700:	ed93 7a00 	vldr	s14, [r3]
 8001704:	edd7 7a07 	vldr	s15, [r7, #28]
 8001708:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170c:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8001710:	eeb0 0a67 	vmov.f32	s0, s15
 8001714:	f000 fdf8 	bl	8002308 <powf>
 8001718:	eeb0 8a40 	vmov.f32	s16, s0
 800171c:	6a3b      	ldr	r3, [r7, #32]
 800171e:	ed93 7a00 	vldr	s14, [r3]
 8001722:	edd7 7a06 	vldr	s15, [r7, #24]
 8001726:	ee77 7a67 	vsub.f32	s15, s14, s15
 800172a:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800172e:	eeb0 0a67 	vmov.f32	s0, s15
 8001732:	f000 fde9 	bl	8002308 <powf>
 8001736:	eef0 7a40 	vmov.f32	s15, s0
 800173a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800173e:	eeb0 0a67 	vmov.f32	s0, s15
 8001742:	f000 fe39 	bl	80023b8 <sqrtf>
 8001746:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
		float r1 = sqrtf(powf(*x - mic1_x, 2) + powf(*y - mic1_y, 2));
 800174a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174c:	ed93 7a00 	vldr	s14, [r3]
 8001750:	edd7 7a05 	vldr	s15, [r7, #20]
 8001754:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001758:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800175c:	eeb0 0a67 	vmov.f32	s0, s15
 8001760:	f000 fdd2 	bl	8002308 <powf>
 8001764:	eeb0 8a40 	vmov.f32	s16, s0
 8001768:	6a3b      	ldr	r3, [r7, #32]
 800176a:	ed93 7a00 	vldr	s14, [r3]
 800176e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001772:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001776:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800177a:	eeb0 0a67 	vmov.f32	s0, s15
 800177e:	f000 fdc3 	bl	8002308 <powf>
 8001782:	eef0 7a40 	vmov.f32	s15, s0
 8001786:	ee78 7a27 	vadd.f32	s15, s16, s15
 800178a:	eeb0 0a67 	vmov.f32	s0, s15
 800178e:	f000 fe13 	bl	80023b8 <sqrtf>
 8001792:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
		float r2 = sqrtf(powf(*x - mic2_x, 2) + powf(*y - mic2_y, 2));
 8001796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001798:	ed93 7a00 	vldr	s14, [r3]
 800179c:	edd7 7a03 	vldr	s15, [r7, #12]
 80017a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a4:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80017a8:	eeb0 0a67 	vmov.f32	s0, s15
 80017ac:	f000 fdac 	bl	8002308 <powf>
 80017b0:	eeb0 8a40 	vmov.f32	s16, s0
 80017b4:	6a3b      	ldr	r3, [r7, #32]
 80017b6:	ed93 7a00 	vldr	s14, [r3]
 80017ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80017be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017c2:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80017c6:	eeb0 0a67 	vmov.f32	s0, s15
 80017ca:	f000 fd9d 	bl	8002308 <powf>
 80017ce:	eef0 7a40 	vmov.f32	s15, s0
 80017d2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80017d6:	eeb0 0a67 	vmov.f32	s0, s15
 80017da:	f000 fded 	bl	80023b8 <sqrtf>
 80017de:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68

		if (r0 == 0 || r1 == 0 || r2 == 0) break;
 80017e2:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80017e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ee:	f000 8178 	beq.w	8001ae2 <compute_event_pos+0x43a>
 80017f2:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80017f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fe:	f000 8170 	beq.w	8001ae2 <compute_event_pos+0x43a>
 8001802:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001806:	eef5 7a40 	vcmp.f32	s15, #0.0
 800180a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180e:	f000 8168 	beq.w	8001ae2 <compute_event_pos+0x43a>

		// compute residuals (error)
		// [f]
		float res1 = r1 - r0 - d10;
 8001812:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001816:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800181a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800181e:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001822:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001826:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
		float res2 = r2 - r0 - d20;
 800182a:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 800182e:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001832:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001836:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800183a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800183e:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

		// create Jacobian
		float j11 = (*x - mic1_x) / r1 - (*x - mic0_x) / r0;
 8001842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001844:	ed93 7a00 	vldr	s14, [r3]
 8001848:	edd7 7a05 	vldr	s15, [r7, #20]
 800184c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001850:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001854:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185a:	edd3 6a00 	vldr	s13, [r3]
 800185e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001862:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8001866:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 800186a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800186e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001872:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		float j12 = (*y - mic1_y) / r1 - (*y - mic0_y) / r0;
 8001876:	6a3b      	ldr	r3, [r7, #32]
 8001878:	ed93 7a00 	vldr	s14, [r3]
 800187c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001880:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001884:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001888:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800188c:	6a3b      	ldr	r3, [r7, #32]
 800188e:	edd3 6a00 	vldr	s13, [r3]
 8001892:	edd7 7a06 	vldr	s15, [r7, #24]
 8001896:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800189a:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 800189e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80018a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018a6:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		float j21 = (*x - mic2_x) / r2 - (*x - mic0_x) / r0;
 80018aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ac:	ed93 7a00 	vldr	s14, [r3]
 80018b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80018b4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80018b8:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80018bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c2:	edd3 6a00 	vldr	s13, [r3]
 80018c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80018ca:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80018ce:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 80018d2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80018d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018da:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		float j22 = (*y - mic2_y) / r2 - (*y - mic0_y) / r0;
 80018de:	6a3b      	ldr	r3, [r7, #32]
 80018e0:	ed93 7a00 	vldr	s14, [r3]
 80018e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80018e8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80018ec:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80018f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	edd3 6a00 	vldr	s13, [r3]
 80018fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80018fe:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8001902:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 8001906:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800190a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800190e:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

		// ([J]^T)[J]
		float prod11 = j11 * j11 + j21 * j21;
 8001912:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001916:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800191a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800191e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001926:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		float prod12 = j11 * j12 + j21 * j22;
 800192a:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800192e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001932:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001936:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 800193a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800193e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001942:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001946:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
		float prod21 = j12 * j11 + j22 * j21;
 800194a:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800194e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001952:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001956:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 800195a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800195e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001962:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001966:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		float prod22 = j12 * j12 + j22 * j22;
 800196a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800196e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001972:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001976:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800197a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800197e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

		// ([J]^T)[f]
		float g1 = j11 * res1 + j21 * res2;
 8001982:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001986:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800198a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800198e:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8001992:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001996:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800199a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800199e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		float g2 = j12 * res1 + j22 * res2;
 80019a2:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80019a6:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80019aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ae:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80019b2:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80019b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019be:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// solve system
		// ([J]^T)[J]delta = -([J]^T)[f]
		// delta = inv(([J]^T)[J]) * (-([J]^T)[f])
		float det = prod11 * prod22 - prod12 * prod21;
 80019c2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80019c6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80019ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ce:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80019d2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80019d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019de:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		if (fabsf(det) < 1e-6) break;
 80019e2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80019e6:	eef0 7ae7 	vabs.f32	s15, s15
 80019ea:	ee17 0a90 	vmov	r0, s15
 80019ee:	f7fe fd57 	bl	80004a0 <__aeabi_f2d>
 80019f2:	a305      	add	r3, pc, #20	@ (adr r3, 8001a08 <compute_event_pos+0x360>)
 80019f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f8:	f7ff f81c 	bl	8000a34 <__aeabi_dcmplt>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d16c      	bne.n	8001adc <compute_event_pos+0x434>
 8001a02:	e007      	b.n	8001a14 <compute_event_pos+0x36c>
 8001a04:	f3af 8000 	nop.w
 8001a08:	a0b5ed8d 	.word	0xa0b5ed8d
 8001a0c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001a10:	43ab8000 	.word	0x43ab8000

		float dx = (-prod22 * g1 + prod12 * g2) / det;
 8001a14:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001a18:	eeb1 7a67 	vneg.f32	s14, s15
 8001a1c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001a20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a24:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8001a28:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001a2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a30:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001a34:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a3c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		float dy = (prod21 * g1 - prod11 * g2) / det;
 8001a40:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001a44:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001a48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a4c:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8001a50:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001a54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a58:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a5c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a64:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		*x += dx;
 8001a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6a:	ed93 7a00 	vldr	s14, [r3]
 8001a6e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a78:	edc3 7a00 	vstr	s15, [r3]
		*y += dy;
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	ed93 7a00 	vldr	s14, [r3]
 8001a82:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	edc3 7a00 	vstr	s15, [r3]

		if (sqrtf(dx * dx + dy * dy) < 1e-5) break;
 8001a90:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001a94:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001a98:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a9c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa4:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa8:	f000 fc86 	bl	80023b8 <sqrtf>
 8001aac:	ee10 3a10 	vmov	r3, s0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fcf5 	bl	80004a0 <__aeabi_f2d>
 8001ab6:	a30e      	add	r3, pc, #56	@ (adr r3, 8001af0 <compute_event_pos+0x448>)
 8001ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abc:	f7fe ffba 	bl	8000a34 <__aeabi_dcmplt>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10c      	bne.n	8001ae0 <compute_event_pos+0x438>
	for (uint8_t i = 0; i < 10; i++)
 8001ac6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001aca:	3301      	adds	r3, #1
 8001acc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001ad0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001ad4:	2b09      	cmp	r3, #9
 8001ad6:	f67f ae02 	bls.w	80016de <compute_event_pos+0x36>
	}

}
 8001ada:	e002      	b.n	8001ae2 <compute_event_pos+0x43a>
		if (fabsf(det) < 1e-6) break;
 8001adc:	bf00      	nop
 8001ade:	e000      	b.n	8001ae2 <compute_event_pos+0x43a>
		if (sqrtf(dx * dx + dy * dy) < 1e-5) break;
 8001ae0:	bf00      	nop
}
 8001ae2:	bf00      	nop
 8001ae4:	3780      	adds	r7, #128	@ 0x80
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	ecbd 8b02 	vpop	{d8}
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	88e368f1 	.word	0x88e368f1
 8001af4:	3ee4f8b5 	.word	0x3ee4f8b5

08001af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <NMI_Handler+0x4>

08001b00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <HardFault_Handler+0x4>

08001b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <MemManage_Handler+0x4>

08001b10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <BusFault_Handler+0x4>

08001b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <UsageFault_Handler+0x4>

08001b20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b4e:	f000 fa25 	bl	8001f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b5c:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <SystemInit+0x20>)
 8001b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b62:	4a05      	ldr	r2, [pc, #20]	@ (8001b78 <SystemInit+0x20>)
 8001b64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b80:	f7ff ffea 	bl	8001b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b84:	480c      	ldr	r0, [pc, #48]	@ (8001bb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b86:	490d      	ldr	r1, [pc, #52]	@ (8001bbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b88:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b8c:	e002      	b.n	8001b94 <LoopCopyDataInit>

08001b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b92:	3304      	adds	r3, #4

08001b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b98:	d3f9      	bcc.n	8001b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b9c:	4c0a      	ldr	r4, [pc, #40]	@ (8001bc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba0:	e001      	b.n	8001ba6 <LoopFillZerobss>

08001ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba4:	3204      	adds	r2, #4

08001ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba8:	d3fb      	bcc.n	8001ba2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001baa:	f000 fb89 	bl	80022c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bae:	f7fe ffbb 	bl	8000b28 <main>
  bx  lr    
 8001bb2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bb4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bbc:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001bc0:	08002b68 	.word	0x08002b68
  ldr r2, =_sbss
 8001bc4:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001bc8:	2000053c 	.word	0x2000053c

08001bcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bcc:	e7fe      	b.n	8001bcc <ADC_IRQHandler>

08001bce <arm_fir_decimate_fast_q15>:
ARM_DSP_ATTRIBUTE void arm_fir_decimate_fast_q15(
  const arm_fir_decimate_instance_q15 * S,
  const q15_t * pSrc,
        q15_t * pDst,
        uint32_t blockSize)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b0b5      	sub	sp, #212	@ 0xd4
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
 8001bda:	603b      	str	r3, [r7, #0]
        q15_t *pState = S->pState;                     /* State pointer */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	62bb      	str	r3, [r7, #40]	@ 0x28
  const q15_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        q31_t x0, x1, c0;                              /* Temporary variables to hold state and coefficient values */
        q31_t sum0;                                    /* Accumulators */
        q31_t acc0, acc1;
        q15_t *px0, *px1;
        uint32_t blkCntN3;
        uint32_t numTaps = S->numTaps;                 /* Number of taps */
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	885b      	ldrh	r3, [r3, #2]
 8001bee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        uint32_t i, blkCnt, tapCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bfe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        q31_t c1;                                      /* Temporary variables to hold state and coefficient values */
#endif

  /* S->pState buffer contains previous frame (numTaps - 1) samples */
  /* pStateCur points to the location where the new input data should be written */
  pStateCur = S->pState + (numTaps - 1U);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001c0a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4413      	add	r3, r2
 8001c14:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Total number of output samples to be computed */
  blkCnt = outBlockSize / 2;
 8001c16:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c1a:	085b      	lsrs	r3, r3, #1
 8001c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  blkCntN3 = outBlockSize - (2 * blkCnt);
 8001c20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  while (blkCnt > 0U)
 8001c30:	e0a0      	b.n	8001d74 <arm_fir_decimate_fast_q15+0x1a6>
  {
    /* Copy 2 * decimation factor number of new input samples into the state buffer */
    i = S->M * 2;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

    do
    {
      *pStateCur++ = *pSrc++;
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	1c93      	adds	r3, r2, #2
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c44:	1c99      	adds	r1, r3, #2
 8001c46:	6279      	str	r1, [r7, #36]	@ 0x24
 8001c48:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c4c:	801a      	strh	r2, [r3, #0]

    } while (--i);
 8001c4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c52:	3b01      	subs	r3, #1
 8001c54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001c58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1ed      	bne.n	8001c3c <arm_fir_decimate_fast_q15+0x6e>

    /* Set accumulator to zero */
    acc0 = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    acc1 = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

    /* Initialize state pointer for all the samples */
    px0 = pState;
 8001c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c6e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    px1 = pState + S->M;
 8001c72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

    /* Initialize coeff pointer */
    pb = pCoeffs;
 8001c80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    tapCnt = numTaps % 0x4U;

#else

    /* Initialize tapCnt with number of taps */
    tapCnt = numTaps;
 8001c88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001c8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (tapCnt > 0U)
 8001c90:	e041      	b.n	8001d16 <arm_fir_decimate_fast_q15+0x148>
    {
      /* Read coefficients */
      c0 = *pb++;
 8001c92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001c96:	1c9a      	adds	r2, r3, #2
 8001c98:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001c9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

      /* Fetch state variables for acc0, acc1 */
      x0 = *px0++;
 8001ca4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001ca8:	1c9a      	adds	r2, r3, #2
 8001caa:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8001cae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      x1 = *px1++;
 8001cb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cba:	1c9a      	adds	r2, r3, #2
 8001cbc:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001cc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc4:	677b      	str	r3, [r7, #116]	@ 0x74

      /* Perform the multiply-accumulate */
      acc0 = __SMLAD(x0, c0, acc0);
 8001cc6:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8001cca:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001cce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001cd2:	6639      	str	r1, [r7, #96]	@ 0x60
 8001cd4:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001cd6:	65bb      	str	r3, [r7, #88]	@ 0x58

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001cd8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001cda:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001cdc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001cde:	fb23 1302 	smlad	r3, r3, r2, r1
 8001ce2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8001ce4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ce6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
      acc1 = __SMLAD(x1, c0, acc1);
 8001cea:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8001cec:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001cf0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001cf4:	6739      	str	r1, [r7, #112]	@ 0x70
 8001cf6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001cf8:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001cfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001cfc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001cfe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001d00:	fb23 1302 	smlad	r3, r3, r2, r1
 8001d04:	667b      	str	r3, [r7, #100]	@ 0x64
  return(result);
 8001d06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d08:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

      /* Decrement loop counter */
      tapCnt--;
 8001d0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d10:	3b01      	subs	r3, #1
 8001d12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    while (tapCnt > 0U)
 8001d16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1b9      	bne.n	8001c92 <arm_fir_decimate_fast_q15+0xc4>
    }

    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + S->M * 2;
 8001d1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Store filter output, smlad returns the values in 2.14 format */
    /* so downsacle by 15 to get output in 1.15 */
    *pDst++ = (q15_t) (__SSAT((acc0 >> 15), 16));
 8001d2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d2e:	13db      	asrs	r3, r3, #15
 8001d30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001d34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d38:	f303 030f 	ssat	r3, #16, r3
 8001d3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001d40:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	1c9a      	adds	r2, r3, #2
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	b20a      	sxth	r2, r1
 8001d4c:	801a      	strh	r2, [r3, #0]
    *pDst++ = (q15_t) (__SSAT((acc1 >> 15), 16));
 8001d4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d52:	13db      	asrs	r3, r3, #15
 8001d54:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001d56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d58:	f303 030f 	ssat	r3, #16, r3
 8001d5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001d5e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	1c9a      	adds	r2, r3, #2
 8001d64:	607a      	str	r2, [r7, #4]
 8001d66:	b20a      	sxth	r2, r1
 8001d68:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    blkCnt--;
 8001d6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  while (blkCnt > 0U)
 8001d74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f47f af5a 	bne.w	8001c32 <arm_fir_decimate_fast_q15+0x64>
  }

  while (blkCntN3 > 0U)
 8001d7e:	e06e      	b.n	8001e5e <arm_fir_decimate_fast_q15+0x290>
  {
    /* Copy decimation factor number of new input samples into the state buffer */
    i = S->M;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

    do
    {
      *pStateCur++ = *pSrc++;
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	1c93      	adds	r3, r2, #2
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d90:	1c99      	adds	r1, r3, #2
 8001d92:	6279      	str	r1, [r7, #36]	@ 0x24
 8001d94:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001d98:	801a      	strh	r2, [r3, #0]

    } while (--i);
 8001d9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001da4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1ed      	bne.n	8001d88 <arm_fir_decimate_fast_q15+0x1ba>

    /* Set accumulator to zero */
    sum0 = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    /* Initialize state pointer */
    px = pState;
 8001db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001db4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

    /* Initialize coeff pointer */
    pb = pCoeffs;
 8001db8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001dbc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    tapCnt = numTaps % 0x4U;

#else

    /* Initialize tapCnt with number of taps */
    tapCnt = numTaps;
 8001dc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001dc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (tapCnt > 0U)
 8001dc8:	e028      	b.n	8001e1c <arm_fir_decimate_fast_q15+0x24e>
    {
      /* Read coefficients */
      c0 = *pb++;
 8001dca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001dce:	1c9a      	adds	r2, r3, #2
 8001dd0:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001dd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

      /* Fetch 1 state variable */
      x0 = *px++;
 8001ddc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001de0:	1c9a      	adds	r2, r3, #2
 8001de2:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001de6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      /* Perform the multiply-accumulate */
      sum0 = __SMLAD(x0, c0, sum0);
 8001dee:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8001df2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001df6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001dfa:	6539      	str	r1, [r7, #80]	@ 0x50
 8001dfc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001e00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e04:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001e06:	fb23 1302 	smlad	r3, r3, r2, r1
 8001e0a:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8001e0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e0e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      /* Decrement loop counter */
      tapCnt--;
 8001e12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e16:	3b01      	subs	r3, #1
 8001e18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    while (tapCnt > 0U)
 8001e1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1d2      	bne.n	8001dca <arm_fir_decimate_fast_q15+0x1fc>
    }

    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + S->M;
 8001e24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4413      	add	r3, r2
 8001e2e:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Store filter output, smlad returns the values in 2.14 format */
    /* so downsacle by 15 to get output in 1.15 */
    *pDst++ = (q15_t) (__SSAT((sum0 >> 15), 16));
 8001e30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001e34:	13db      	asrs	r3, r3, #15
 8001e36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001e3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001e3e:	f303 030f 	ssat	r3, #16, r3
 8001e42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001e46:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	1c9a      	adds	r2, r3, #2
 8001e4e:	607a      	str	r2, [r7, #4]
 8001e50:	b20a      	sxth	r2, r1
 8001e52:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    blkCntN3--;
 8001e54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  while (blkCntN3 > 0U)
 8001e5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d18c      	bne.n	8001d80 <arm_fir_decimate_fast_q15+0x1b2>
  /* Processing is complete.
     Now copy the last numTaps - 1 samples to the satrt of the state buffer.
     This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCur = S->pState;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	627b      	str	r3, [r7, #36]	@ 0x24

  i = (numTaps - 1U) >> 2U;
 8001e6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e70:	3b01      	subs	r3, #1
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  /* copy data */
  while (i > 0U)
 8001e78:	e038      	b.n	8001eec <arm_fir_decimate_fast_q15+0x31e>
  {
    write_q15x2_ia (&pStateCur, read_q15x2_ia (&pState));
 8001e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e82:	3b04      	subs	r3, #4
 8001e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  q15_t const * pQ15)
{
  q31_t val;

#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (&val, pQ15, 4);
 8001e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	623b      	str	r3, [r7, #32]
#else
  val = (pQ15[1] << 16) | (pQ15[0] & 0x0FFFF) ;
#endif

  return (val);
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001e92:	637a      	str	r2, [r7, #52]	@ 0x34
 8001e94:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE void write_q15x2_ia (
  q15_t ** pQ15,
  q31_t    value)
{
  q31_t val = value;
 8001e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e98:	61fb      	str	r3, [r7, #28]
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ15, &val, 4);
 8001e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	601a      	str	r2, [r3, #0]
#else
  (*pQ15)[0] = (q15_t)(val & 0x0FFFF);
  (*pQ15)[1] = (q15_t)((val >> 16) & 0x0FFFF);
#endif

 *pQ15 += 2;
 8001ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	1d1a      	adds	r2, r3, #4
 8001ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eaa:	601a      	str	r2, [r3, #0]
}
 8001eac:	bf00      	nop
    write_q15x2_ia (&pStateCur, read_q15x2_ia (&pState));
 8001eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eb6:	3b04      	subs	r3, #4
 8001eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  memcpy (&val, pQ15, 4);
 8001eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	61bb      	str	r3, [r7, #24]
  return (val);
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001ec6:	643a      	str	r2, [r7, #64]	@ 0x40
 8001ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  q31_t val = value;
 8001eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ecc:	617b      	str	r3, [r7, #20]
  memcpy (*pQ15, &val, 4);
 8001ece:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8001ed6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	1d1a      	adds	r2, r3, #4
 8001edc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ede:	601a      	str	r2, [r3, #0]
}
 8001ee0:	bf00      	nop

    /* Decrement loop counter */
    i--;
 8001ee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  while (i > 0U)
 8001eec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1c2      	bne.n	8001e7a <arm_fir_decimate_fast_q15+0x2ac>
  }

  i = (numTaps - 1U) % 0x04U;
 8001ef4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  /* Copy data */
  while (i > 0U)
 8001f02:	e00d      	b.n	8001f20 <arm_fir_decimate_fast_q15+0x352>
  {
    *pStateCur++ = *pState++;
 8001f04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f06:	1c93      	adds	r3, r2, #2
 8001f08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0c:	1c99      	adds	r1, r3, #2
 8001f0e:	6279      	str	r1, [r7, #36]	@ 0x24
 8001f10:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001f14:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    i--;
 8001f16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  while (i > 0U)
 8001f20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1ed      	bne.n	8001f04 <arm_fir_decimate_fast_q15+0x336>
  }

}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	37d4      	adds	r7, #212	@ 0xd4
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <arm_fir_decimate_init_q15>:
        uint16_t numTaps,
        uint8_t M,
  const q15_t * pCoeffs,
        q15_t * pState,
        uint32_t blockSize)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b086      	sub	sp, #24
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	607b      	str	r3, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	817b      	strh	r3, [r7, #10]
 8001f44:	4613      	mov	r3, r2
 8001f46:	727b      	strb	r3, [r7, #9]
  arm_status status;

  /* The size of the input block must be a multiple of the decimation factor */
  if ((blockSize % M) != 0U)
 8001f48:	7a7a      	ldrb	r2, [r7, #9]
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001f50:	fb01 f202 	mul.w	r2, r1, r2
 8001f54:	1a9b      	subs	r3, r3, r2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d002      	beq.n	8001f60 <arm_fir_decimate_init_q15+0x2a>
  {
    /* Set status as ARM_MATH_LENGTH_ERROR */
    status = ARM_MATH_LENGTH_ERROR;
 8001f5a:	23fe      	movs	r3, #254	@ 0xfe
 8001f5c:	75fb      	strb	r3, [r7, #23]
 8001f5e:	e017      	b.n	8001f90 <arm_fir_decimate_init_q15+0x5a>
  }
  else
  {
    /* Assign filter taps */
    S->numTaps = numTaps;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	897a      	ldrh	r2, [r7, #10]
 8001f64:	805a      	strh	r2, [r3, #2]

    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	605a      	str	r2, [r3, #4]

    /* Clear the state buffer. The size is always (blockSize + numTaps - 1) */
    memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(q15_t));
 8001f6c:	897a      	ldrh	r2, [r7, #10]
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f70:	4413      	add	r3, r2
 8001f72:	3b01      	subs	r3, #1
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	461a      	mov	r2, r3
 8001f78:	2100      	movs	r1, #0
 8001f7a:	6a38      	ldr	r0, [r7, #32]
 8001f7c:	f000 f992 	bl	80022a4 <memset>

    /* Assign state pointer */
    S->pState = pState;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6a3a      	ldr	r2, [r7, #32]
 8001f84:	609a      	str	r2, [r3, #8]

    /* Assign Decimation Factor */
    S->M = M;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	7a7a      	ldrb	r2, [r7, #9]
 8001f8a:	701a      	strb	r2, [r3, #0]

    status = ARM_MATH_SUCCESS;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 8001f90:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <HAL_IncTick+0x20>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <HAL_IncTick+0x24>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4413      	add	r3, r2
 8001fac:	4a04      	ldr	r2, [pc, #16]	@ (8001fc0 <HAL_IncTick+0x24>)
 8001fae:	6013      	str	r3, [r2, #0]
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20000000 	.word	0x20000000
 8001fc0:	200003fc 	.word	0x200003fc

08001fc4 <uart2_set_fcpu>:

unsigned long f_cpu;

/** Functions ----------------------------------------------------------------*/
void uart2_set_fcpu(unsigned long freq)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
	f_cpu = freq;
 8001fcc:	4a04      	ldr	r2, [pc, #16]	@ (8001fe0 <uart2_set_fcpu+0x1c>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6013      	str	r3, [r2, #0]
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000400 	.word	0x20000400

08001fe4 <uart2_dma1_config>:

	return USART_OK;
}

uart_err_type_t uart2_dma1_config(uint32_t baud, uart_data_type_t ndata, uart_stop_type_t nstop)
{
 8001fe4:	b5b0      	push	{r4, r5, r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	460b      	mov	r3, r1
 8001fee:	72fb      	strb	r3, [r7, #11]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	72bb      	strb	r3, [r7, #10]
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;	// enable UART2 clock
 8001ff4:	4b85      	ldr	r3, [pc, #532]	@ (800220c <uart2_dma1_config+0x228>)
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff8:	4a84      	ldr	r2, [pc, #528]	@ (800220c <uart2_dma1_config+0x228>)
 8001ffa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ffe:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;	// enable GPIOA clock
 8002000:	4b82      	ldr	r3, [pc, #520]	@ (800220c <uart2_dma1_config+0x228>)
 8002002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002004:	4a81      	ldr	r2, [pc, #516]	@ (800220c <uart2_dma1_config+0x228>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN;		// enable DMA1 clock
 800200c:	4b7f      	ldr	r3, [pc, #508]	@ (800220c <uart2_dma1_config+0x228>)
 800200e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002010:	4a7e      	ldr	r2, [pc, #504]	@ (800220c <uart2_dma1_config+0x228>)
 8002012:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002016:	6313      	str	r3, [r2, #48]	@ 0x30

	/* Setup DMA1 for transmission */
	// disable DMA1 to configure
	DMA1_Stream6->CR &= ~DMA_SxCR_EN;
 8002018:	4b7d      	ldr	r3, [pc, #500]	@ (8002210 <uart2_dma1_config+0x22c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a7c      	ldr	r2, [pc, #496]	@ (8002210 <uart2_dma1_config+0x22c>)
 800201e:	f023 0301 	bic.w	r3, r3, #1
 8002022:	6013      	str	r3, [r2, #0]
	while (DMA1_Stream6->CR & DMA_SxCR_EN);
 8002024:	bf00      	nop
 8002026:	4b7a      	ldr	r3, [pc, #488]	@ (8002210 <uart2_dma1_config+0x22c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f9      	bne.n	8002026 <uart2_dma1_config+0x42>

	// select stream 6, channel 4 for USART2_TX
	DMA1_Stream6->CR &= ~DMA_SxCR_CHSEL;
 8002032:	4b77      	ldr	r3, [pc, #476]	@ (8002210 <uart2_dma1_config+0x22c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a76      	ldr	r2, [pc, #472]	@ (8002210 <uart2_dma1_config+0x22c>)
 8002038:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 800203c:	6013      	str	r3, [r2, #0]
	DMA1_Stream6->CR |= DMA_SxCR_CHSEL_2;
 800203e:	4b74      	ldr	r3, [pc, #464]	@ (8002210 <uart2_dma1_config+0x22c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a73      	ldr	r2, [pc, #460]	@ (8002210 <uart2_dma1_config+0x22c>)
 8002044:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002048:	6013      	str	r3, [r2, #0]

	// disable direct mode
	DMA1_Stream6->FCR |= DMA_SxFCR_DMDIS;
 800204a:	4b71      	ldr	r3, [pc, #452]	@ (8002210 <uart2_dma1_config+0x22c>)
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	4a70      	ldr	r2, [pc, #448]	@ (8002210 <uart2_dma1_config+0x22c>)
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	6153      	str	r3, [r2, #20]

	// normal mode, low priority, 1 byte data size (memory and peripheral)
	DMA1_Stream6->CR &= ~(DMA_SxCR_DBM | DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE);
 8002056:	4b6e      	ldr	r3, [pc, #440]	@ (8002210 <uart2_dma1_config+0x22c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a6d      	ldr	r2, [pc, #436]	@ (8002210 <uart2_dma1_config+0x22c>)
 800205c:	f423 23ef 	bic.w	r3, r3, #489472	@ 0x77800
 8002060:	6013      	str	r3, [r2, #0]

	// memory increment mode
	DMA1_Stream6->CR |= DMA_SxCR_MINC;
 8002062:	4b6b      	ldr	r3, [pc, #428]	@ (8002210 <uart2_dma1_config+0x22c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a6a      	ldr	r2, [pc, #424]	@ (8002210 <uart2_dma1_config+0x22c>)
 8002068:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800206c:	6013      	str	r3, [r2, #0]

	// fixed peripheral pointer
	DMA1_Stream6->CR &= ~DMA_SxCR_PINC;
 800206e:	4b68      	ldr	r3, [pc, #416]	@ (8002210 <uart2_dma1_config+0x22c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a67      	ldr	r2, [pc, #412]	@ (8002210 <uart2_dma1_config+0x22c>)
 8002074:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002078:	6013      	str	r3, [r2, #0]

	// disable circular mode
	DMA1_Stream6->CR &= ~DMA_SxCR_CIRC;
 800207a:	4b65      	ldr	r3, [pc, #404]	@ (8002210 <uart2_dma1_config+0x22c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a64      	ldr	r2, [pc, #400]	@ (8002210 <uart2_dma1_config+0x22c>)
 8002080:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002084:	6013      	str	r3, [r2, #0]

	// memory to peripheral mode
	DMA1_Stream6->CR &= ~DMA_SxCR_DIR_1;
 8002086:	4b62      	ldr	r3, [pc, #392]	@ (8002210 <uart2_dma1_config+0x22c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a61      	ldr	r2, [pc, #388]	@ (8002210 <uart2_dma1_config+0x22c>)
 800208c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002090:	6013      	str	r3, [r2, #0]
	DMA1_Stream6->CR |= DMA_SxCR_DIR_0;
 8002092:	4b5f      	ldr	r3, [pc, #380]	@ (8002210 <uart2_dma1_config+0x22c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a5e      	ldr	r2, [pc, #376]	@ (8002210 <uart2_dma1_config+0x22c>)
 8002098:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800209c:	6013      	str	r3, [r2, #0]

	// peripheral address is USART2_DR
	DMA1_Stream6->PAR = (uint32_t)&(USART2->DR);
 800209e:	4b5c      	ldr	r3, [pc, #368]	@ (8002210 <uart2_dma1_config+0x22c>)
 80020a0:	4a5c      	ldr	r2, [pc, #368]	@ (8002214 <uart2_dma1_config+0x230>)
 80020a2:	609a      	str	r2, [r3, #8]

	/* Setup UART2 for transmission using DMA1 */
	// alternate function mode on TX (PA2) and RX (PA3)
	GPIOA->MODER |= GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1;
 80020a4:	4b5c      	ldr	r3, [pc, #368]	@ (8002218 <uart2_dma1_config+0x234>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a5b      	ldr	r2, [pc, #364]	@ (8002218 <uart2_dma1_config+0x234>)
 80020aa:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80020ae:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_0 | GPIO_MODER_MODER3_0);
 80020b0:	4b59      	ldr	r3, [pc, #356]	@ (8002218 <uart2_dma1_config+0x234>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a58      	ldr	r2, [pc, #352]	@ (8002218 <uart2_dma1_config+0x234>)
 80020b6:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 80020ba:	6013      	str	r3, [r2, #0]

	// select alternate function mode 7 for each
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL2 | GPIO_AFRL_AFRL3);
 80020bc:	4b56      	ldr	r3, [pc, #344]	@ (8002218 <uart2_dma1_config+0x234>)
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	4a55      	ldr	r2, [pc, #340]	@ (8002218 <uart2_dma1_config+0x234>)
 80020c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80020c6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL2_0 | GPIO_AFRL_AFRL3_0 |
 80020c8:	4b53      	ldr	r3, [pc, #332]	@ (8002218 <uart2_dma1_config+0x234>)
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	4a52      	ldr	r2, [pc, #328]	@ (8002218 <uart2_dma1_config+0x234>)
 80020ce:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80020d2:	6213      	str	r3, [r2, #32]
					GPIO_AFRL_AFRL2_1 | GPIO_AFRL_AFRL3_1 |
					GPIO_AFRL_AFRL2_2 | GPIO_AFRL_AFRL3_2;

	USART2->CR1 |= USART_CR1_UE;			// UART2 enable
 80020d4:	4b51      	ldr	r3, [pc, #324]	@ (800221c <uart2_dma1_config+0x238>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	4a50      	ldr	r2, [pc, #320]	@ (800221c <uart2_dma1_config+0x238>)
 80020da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020de:	60d3      	str	r3, [r2, #12]

	if (ndata == USART_DATA_8)
 80020e0:	7afb      	ldrb	r3, [r7, #11]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d106      	bne.n	80020f4 <uart2_dma1_config+0x110>
	{
		USART2->CR1 &= ~USART_CR1_M;		// 1 start, 8 data, n stop
 80020e6:	4b4d      	ldr	r3, [pc, #308]	@ (800221c <uart2_dma1_config+0x238>)
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	4a4c      	ldr	r2, [pc, #304]	@ (800221c <uart2_dma1_config+0x238>)
 80020ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80020f0:	60d3      	str	r3, [r2, #12]
 80020f2:	e00b      	b.n	800210c <uart2_dma1_config+0x128>
	}
	else if (ndata == USART_DATA_9)
 80020f4:	7afb      	ldrb	r3, [r7, #11]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d106      	bne.n	8002108 <uart2_dma1_config+0x124>
	{
		USART2->CR1 |= USART_CR1_M;			// 1 start, 9 data, n stop
 80020fa:	4b48      	ldr	r3, [pc, #288]	@ (800221c <uart2_dma1_config+0x238>)
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	4a47      	ldr	r2, [pc, #284]	@ (800221c <uart2_dma1_config+0x238>)
 8002100:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002104:	60d3      	str	r3, [r2, #12]
 8002106:	e001      	b.n	800210c <uart2_dma1_config+0x128>
	}
	else
	{
		return USART_INVALID_NDATA;
 8002108:	2302      	movs	r3, #2
 800210a:	e07b      	b.n	8002204 <uart2_dma1_config+0x220>
	}

	if (nstop == USART_STOP_1)
 800210c:	7abb      	ldrb	r3, [r7, #10]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d106      	bne.n	8002120 <uart2_dma1_config+0x13c>
	{
		USART2->CR2 &= ~USART_CR2_STOP;		// 1 stop bit
 8002112:	4b42      	ldr	r3, [pc, #264]	@ (800221c <uart2_dma1_config+0x238>)
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	4a41      	ldr	r2, [pc, #260]	@ (800221c <uart2_dma1_config+0x238>)
 8002118:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800211c:	6113      	str	r3, [r2, #16]
 800211e:	e021      	b.n	8002164 <uart2_dma1_config+0x180>
	}
	else if (nstop == USART_STOP_HALF)
 8002120:	7abb      	ldrb	r3, [r7, #10]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d10c      	bne.n	8002140 <uart2_dma1_config+0x15c>
	{
		USART2->CR2 &= ~USART_CR2_STOP;		// half stop bit
 8002126:	4b3d      	ldr	r3, [pc, #244]	@ (800221c <uart2_dma1_config+0x238>)
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	4a3c      	ldr	r2, [pc, #240]	@ (800221c <uart2_dma1_config+0x238>)
 800212c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002130:	6113      	str	r3, [r2, #16]
		USART2->CR2 |= USART_CR2_STOP_0;
 8002132:	4b3a      	ldr	r3, [pc, #232]	@ (800221c <uart2_dma1_config+0x238>)
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	4a39      	ldr	r2, [pc, #228]	@ (800221c <uart2_dma1_config+0x238>)
 8002138:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800213c:	6113      	str	r3, [r2, #16]
 800213e:	e011      	b.n	8002164 <uart2_dma1_config+0x180>
	}
	else if (nstop == USART_STOP_2)
 8002140:	7abb      	ldrb	r3, [r7, #10]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d10c      	bne.n	8002160 <uart2_dma1_config+0x17c>
	{
		USART2->CR2 &= ~USART_CR2_STOP;		// 2 stop bits
 8002146:	4b35      	ldr	r3, [pc, #212]	@ (800221c <uart2_dma1_config+0x238>)
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	4a34      	ldr	r2, [pc, #208]	@ (800221c <uart2_dma1_config+0x238>)
 800214c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002150:	6113      	str	r3, [r2, #16]
		USART2->CR2 |= USART_CR2_STOP_1;
 8002152:	4b32      	ldr	r3, [pc, #200]	@ (800221c <uart2_dma1_config+0x238>)
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	4a31      	ldr	r2, [pc, #196]	@ (800221c <uart2_dma1_config+0x238>)
 8002158:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800215c:	6113      	str	r3, [r2, #16]
 800215e:	e001      	b.n	8002164 <uart2_dma1_config+0x180>
	}
	else
	{
		return USART_INVALID_NSTOP;
 8002160:	2301      	movs	r3, #1
 8002162:	e04f      	b.n	8002204 <uart2_dma1_config+0x220>
	}

	// pg. 519 STM32F401RE reference
	float usart_div = f_cpu / (2 * 16.0 * baud);		// APB1 bus is 1/2 clock speed of f_cpu
 8002164:	4b2e      	ldr	r3, [pc, #184]	@ (8002220 <uart2_dma1_config+0x23c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe f977 	bl	800045c <__aeabi_ui2d>
 800216e:	4604      	mov	r4, r0
 8002170:	460d      	mov	r5, r1
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f7fe f972 	bl	800045c <__aeabi_ui2d>
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	4b29      	ldr	r3, [pc, #164]	@ (8002224 <uart2_dma1_config+0x240>)
 800217e:	f7fe f9e7 	bl	8000550 <__aeabi_dmul>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4620      	mov	r0, r4
 8002188:	4629      	mov	r1, r5
 800218a:	f7fe fb0b 	bl	80007a4 <__aeabi_ddiv>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	f7fe fc75 	bl	8000a84 <__aeabi_d2f>
 800219a:	4603      	mov	r3, r0
 800219c:	617b      	str	r3, [r7, #20]
	uint16_t mantissa = (uint16_t) usart_div;
 800219e:	edd7 7a05 	vldr	s15, [r7, #20]
 80021a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021a6:	ee17 3a90 	vmov	r3, s15
 80021aa:	827b      	strh	r3, [r7, #18]
	uint8_t fraction = (uint8_t) ((usart_div - mantissa) * 16);
 80021ac:	8a7b      	ldrh	r3, [r7, #18]
 80021ae:	ee07 3a90 	vmov	s15, r3
 80021b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80021ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021be:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80021c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021ca:	edc7 7a01 	vstr	s15, [r7, #4]
 80021ce:	793b      	ldrb	r3, [r7, #4]
 80021d0:	747b      	strb	r3, [r7, #17]
	USART2->BRR = mantissa << 4 | fraction;
 80021d2:	8a7b      	ldrh	r3, [r7, #18]
 80021d4:	011a      	lsls	r2, r3, #4
 80021d6:	7c7b      	ldrb	r3, [r7, #17]
 80021d8:	431a      	orrs	r2, r3
 80021da:	4b10      	ldr	r3, [pc, #64]	@ (800221c <uart2_dma1_config+0x238>)
 80021dc:	609a      	str	r2, [r3, #8]

	USART2->CR3 |= USART_CR3_DMAT;		// enable DMA transmitter
 80021de:	4b0f      	ldr	r3, [pc, #60]	@ (800221c <uart2_dma1_config+0x238>)
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	4a0e      	ldr	r2, [pc, #56]	@ (800221c <uart2_dma1_config+0x238>)
 80021e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021e8:	6153      	str	r3, [r2, #20]

	USART2->CR1 |= USART_CR1_TE;		// transmitter enable
 80021ea:	4b0c      	ldr	r3, [pc, #48]	@ (800221c <uart2_dma1_config+0x238>)
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	4a0b      	ldr	r2, [pc, #44]	@ (800221c <uart2_dma1_config+0x238>)
 80021f0:	f043 0308 	orr.w	r3, r3, #8
 80021f4:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RE;		// receiver enable
 80021f6:	4b09      	ldr	r3, [pc, #36]	@ (800221c <uart2_dma1_config+0x238>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	4a08      	ldr	r2, [pc, #32]	@ (800221c <uart2_dma1_config+0x238>)
 80021fc:	f043 0304 	orr.w	r3, r3, #4
 8002200:	60d3      	str	r3, [r2, #12]

	return USART_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bdb0      	pop	{r4, r5, r7, pc}
 800220c:	40023800 	.word	0x40023800
 8002210:	400260a0 	.word	0x400260a0
 8002214:	40004404 	.word	0x40004404
 8002218:	40020000 	.word	0x40020000
 800221c:	40004400 	.word	0x40004400
 8002220:	20000400 	.word	0x20000400
 8002224:	40400000 	.word	0x40400000

08002228 <uart2_dma1_write>:

	return USART_OK;
}

void uart2_dma1_write(uint16_t n, uint8_t * data)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	6039      	str	r1, [r7, #0]
 8002232:	80fb      	strh	r3, [r7, #6]
	while (!(USART2->SR & USART_SR_TXE));	// wait for transmit data register empty
 8002234:	bf00      	nop
 8002236:	4b18      	ldr	r3, [pc, #96]	@ (8002298 <uart2_dma1_write+0x70>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f9      	beq.n	8002236 <uart2_dma1_write+0xe>
	USART2->SR &= ~USART_SR_TC;				// clear flag
 8002242:	4b15      	ldr	r3, [pc, #84]	@ (8002298 <uart2_dma1_write+0x70>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a14      	ldr	r2, [pc, #80]	@ (8002298 <uart2_dma1_write+0x70>)
 8002248:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800224c:	6013      	str	r3, [r2, #0]

	DMA1_Stream6->CR &= ~DMA_SxCR_EN;		// disable DMA stream
 800224e:	4b13      	ldr	r3, [pc, #76]	@ (800229c <uart2_dma1_write+0x74>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a12      	ldr	r2, [pc, #72]	@ (800229c <uart2_dma1_write+0x74>)
 8002254:	f023 0301 	bic.w	r3, r3, #1
 8002258:	6013      	str	r3, [r2, #0]
	while (DMA1_Stream6->CR & DMA_SxCR_EN);
 800225a:	bf00      	nop
 800225c:	4b0f      	ldr	r3, [pc, #60]	@ (800229c <uart2_dma1_write+0x74>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1f9      	bne.n	800225c <uart2_dma1_write+0x34>

	// clear flags
	DMA1->HIFCR |= DMA_HIFCR_CTCIF6 | DMA_HIFCR_CHTIF6 | DMA_HIFCR_CTEIF6 | DMA_HIFCR_CDMEIF6 | DMA_HIFCR_CFEIF6;
 8002268:	4b0d      	ldr	r3, [pc, #52]	@ (80022a0 <uart2_dma1_write+0x78>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4a0c      	ldr	r2, [pc, #48]	@ (80022a0 <uart2_dma1_write+0x78>)
 800226e:	f443 1374 	orr.w	r3, r3, #3997696	@ 0x3d0000
 8002272:	60d3      	str	r3, [r2, #12]

	DMA1_Stream6->NDTR = n;					// set # of data items to transfer
 8002274:	4a09      	ldr	r2, [pc, #36]	@ (800229c <uart2_dma1_write+0x74>)
 8002276:	88fb      	ldrh	r3, [r7, #6]
 8002278:	6053      	str	r3, [r2, #4]
	DMA1_Stream6->M0AR = (uint32_t) data;	// pointer to data
 800227a:	4a08      	ldr	r2, [pc, #32]	@ (800229c <uart2_dma1_write+0x74>)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	60d3      	str	r3, [r2, #12]
	DMA1_Stream6->CR |= DMA_SxCR_EN;		// enable DMA stream
 8002280:	4b06      	ldr	r3, [pc, #24]	@ (800229c <uart2_dma1_write+0x74>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a05      	ldr	r2, [pc, #20]	@ (800229c <uart2_dma1_write+0x74>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	6013      	str	r3, [r2, #0]
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	40004400 	.word	0x40004400
 800229c:	400260a0 	.word	0x400260a0
 80022a0:	40026000 	.word	0x40026000

080022a4 <memset>:
 80022a4:	4402      	add	r2, r0
 80022a6:	4603      	mov	r3, r0
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d100      	bne.n	80022ae <memset+0xa>
 80022ac:	4770      	bx	lr
 80022ae:	f803 1b01 	strb.w	r1, [r3], #1
 80022b2:	e7f9      	b.n	80022a8 <memset+0x4>

080022b4 <__errno>:
 80022b4:	4b01      	ldr	r3, [pc, #4]	@ (80022bc <__errno+0x8>)
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	20000004 	.word	0x20000004

080022c0 <__libc_init_array>:
 80022c0:	b570      	push	{r4, r5, r6, lr}
 80022c2:	4d0d      	ldr	r5, [pc, #52]	@ (80022f8 <__libc_init_array+0x38>)
 80022c4:	4c0d      	ldr	r4, [pc, #52]	@ (80022fc <__libc_init_array+0x3c>)
 80022c6:	1b64      	subs	r4, r4, r5
 80022c8:	10a4      	asrs	r4, r4, #2
 80022ca:	2600      	movs	r6, #0
 80022cc:	42a6      	cmp	r6, r4
 80022ce:	d109      	bne.n	80022e4 <__libc_init_array+0x24>
 80022d0:	4d0b      	ldr	r5, [pc, #44]	@ (8002300 <__libc_init_array+0x40>)
 80022d2:	4c0c      	ldr	r4, [pc, #48]	@ (8002304 <__libc_init_array+0x44>)
 80022d4:	f000 fbfe 	bl	8002ad4 <_init>
 80022d8:	1b64      	subs	r4, r4, r5
 80022da:	10a4      	asrs	r4, r4, #2
 80022dc:	2600      	movs	r6, #0
 80022de:	42a6      	cmp	r6, r4
 80022e0:	d105      	bne.n	80022ee <__libc_init_array+0x2e>
 80022e2:	bd70      	pop	{r4, r5, r6, pc}
 80022e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80022e8:	4798      	blx	r3
 80022ea:	3601      	adds	r6, #1
 80022ec:	e7ee      	b.n	80022cc <__libc_init_array+0xc>
 80022ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80022f2:	4798      	blx	r3
 80022f4:	3601      	adds	r6, #1
 80022f6:	e7f2      	b.n	80022de <__libc_init_array+0x1e>
 80022f8:	08002b60 	.word	0x08002b60
 80022fc:	08002b60 	.word	0x08002b60
 8002300:	08002b60 	.word	0x08002b60
 8002304:	08002b64 	.word	0x08002b64

08002308 <powf>:
 8002308:	b508      	push	{r3, lr}
 800230a:	ed2d 8b04 	vpush	{d8-d9}
 800230e:	eeb0 8a60 	vmov.f32	s16, s1
 8002312:	eeb0 9a40 	vmov.f32	s18, s0
 8002316:	f000 f87b 	bl	8002410 <__ieee754_powf>
 800231a:	eeb4 8a48 	vcmp.f32	s16, s16
 800231e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002322:	eef0 8a40 	vmov.f32	s17, s0
 8002326:	d63e      	bvs.n	80023a6 <powf+0x9e>
 8002328:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800232c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002330:	d112      	bne.n	8002358 <powf+0x50>
 8002332:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8002336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233a:	d039      	beq.n	80023b0 <powf+0xa8>
 800233c:	eeb0 0a48 	vmov.f32	s0, s16
 8002340:	f000 f858 	bl	80023f4 <finitef>
 8002344:	b378      	cbz	r0, 80023a6 <powf+0x9e>
 8002346:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800234a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234e:	d52a      	bpl.n	80023a6 <powf+0x9e>
 8002350:	f7ff ffb0 	bl	80022b4 <__errno>
 8002354:	2322      	movs	r3, #34	@ 0x22
 8002356:	e014      	b.n	8002382 <powf+0x7a>
 8002358:	f000 f84c 	bl	80023f4 <finitef>
 800235c:	b998      	cbnz	r0, 8002386 <powf+0x7e>
 800235e:	eeb0 0a49 	vmov.f32	s0, s18
 8002362:	f000 f847 	bl	80023f4 <finitef>
 8002366:	b170      	cbz	r0, 8002386 <powf+0x7e>
 8002368:	eeb0 0a48 	vmov.f32	s0, s16
 800236c:	f000 f842 	bl	80023f4 <finitef>
 8002370:	b148      	cbz	r0, 8002386 <powf+0x7e>
 8002372:	eef4 8a68 	vcmp.f32	s17, s17
 8002376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237a:	d7e9      	bvc.n	8002350 <powf+0x48>
 800237c:	f7ff ff9a 	bl	80022b4 <__errno>
 8002380:	2321      	movs	r3, #33	@ 0x21
 8002382:	6003      	str	r3, [r0, #0]
 8002384:	e00f      	b.n	80023a6 <powf+0x9e>
 8002386:	eef5 8a40 	vcmp.f32	s17, #0.0
 800238a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238e:	d10a      	bne.n	80023a6 <powf+0x9e>
 8002390:	eeb0 0a49 	vmov.f32	s0, s18
 8002394:	f000 f82e 	bl	80023f4 <finitef>
 8002398:	b128      	cbz	r0, 80023a6 <powf+0x9e>
 800239a:	eeb0 0a48 	vmov.f32	s0, s16
 800239e:	f000 f829 	bl	80023f4 <finitef>
 80023a2:	2800      	cmp	r0, #0
 80023a4:	d1d4      	bne.n	8002350 <powf+0x48>
 80023a6:	eeb0 0a68 	vmov.f32	s0, s17
 80023aa:	ecbd 8b04 	vpop	{d8-d9}
 80023ae:	bd08      	pop	{r3, pc}
 80023b0:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80023b4:	e7f7      	b.n	80023a6 <powf+0x9e>
	...

080023b8 <sqrtf>:
 80023b8:	b508      	push	{r3, lr}
 80023ba:	ed2d 8b02 	vpush	{d8}
 80023be:	eeb0 8a40 	vmov.f32	s16, s0
 80023c2:	f000 f821 	bl	8002408 <__ieee754_sqrtf>
 80023c6:	eeb4 8a48 	vcmp.f32	s16, s16
 80023ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ce:	d60c      	bvs.n	80023ea <sqrtf+0x32>
 80023d0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80023f0 <sqrtf+0x38>
 80023d4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80023d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023dc:	d505      	bpl.n	80023ea <sqrtf+0x32>
 80023de:	f7ff ff69 	bl	80022b4 <__errno>
 80023e2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80023e6:	2321      	movs	r3, #33	@ 0x21
 80023e8:	6003      	str	r3, [r0, #0]
 80023ea:	ecbd 8b02 	vpop	{d8}
 80023ee:	bd08      	pop	{r3, pc}
 80023f0:	00000000 	.word	0x00000000

080023f4 <finitef>:
 80023f4:	ee10 3a10 	vmov	r3, s0
 80023f8:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80023fc:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8002400:	bfac      	ite	ge
 8002402:	2000      	movge	r0, #0
 8002404:	2001      	movlt	r0, #1
 8002406:	4770      	bx	lr

08002408 <__ieee754_sqrtf>:
 8002408:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800240c:	4770      	bx	lr
	...

08002410 <__ieee754_powf>:
 8002410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002414:	ee10 4a90 	vmov	r4, s1
 8002418:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800241c:	ed2d 8b02 	vpush	{d8}
 8002420:	ee10 6a10 	vmov	r6, s0
 8002424:	eeb0 8a40 	vmov.f32	s16, s0
 8002428:	eef0 8a60 	vmov.f32	s17, s1
 800242c:	d10c      	bne.n	8002448 <__ieee754_powf+0x38>
 800242e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8002432:	0076      	lsls	r6, r6, #1
 8002434:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8002438:	f240 8274 	bls.w	8002924 <__ieee754_powf+0x514>
 800243c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8002440:	ecbd 8b02 	vpop	{d8}
 8002444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002448:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800244c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8002450:	d802      	bhi.n	8002458 <__ieee754_powf+0x48>
 8002452:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8002456:	d908      	bls.n	800246a <__ieee754_powf+0x5a>
 8002458:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800245c:	d1ee      	bne.n	800243c <__ieee754_powf+0x2c>
 800245e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8002462:	0064      	lsls	r4, r4, #1
 8002464:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8002468:	e7e6      	b.n	8002438 <__ieee754_powf+0x28>
 800246a:	2e00      	cmp	r6, #0
 800246c:	da1f      	bge.n	80024ae <__ieee754_powf+0x9e>
 800246e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8002472:	f080 8260 	bcs.w	8002936 <__ieee754_powf+0x526>
 8002476:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800247a:	d32f      	bcc.n	80024dc <__ieee754_powf+0xcc>
 800247c:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8002480:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8002484:	fa49 f503 	asr.w	r5, r9, r3
 8002488:	fa05 f303 	lsl.w	r3, r5, r3
 800248c:	454b      	cmp	r3, r9
 800248e:	d123      	bne.n	80024d8 <__ieee754_powf+0xc8>
 8002490:	f005 0501 	and.w	r5, r5, #1
 8002494:	f1c5 0502 	rsb	r5, r5, #2
 8002498:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800249c:	d11f      	bne.n	80024de <__ieee754_powf+0xce>
 800249e:	2c00      	cmp	r4, #0
 80024a0:	f280 8246 	bge.w	8002930 <__ieee754_powf+0x520>
 80024a4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80024a8:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80024ac:	e7c8      	b.n	8002440 <__ieee754_powf+0x30>
 80024ae:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80024b2:	d111      	bne.n	80024d8 <__ieee754_powf+0xc8>
 80024b4:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80024b8:	f000 8234 	beq.w	8002924 <__ieee754_powf+0x514>
 80024bc:	d906      	bls.n	80024cc <__ieee754_powf+0xbc>
 80024be:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 80027d4 <__ieee754_powf+0x3c4>
 80024c2:	2c00      	cmp	r4, #0
 80024c4:	bfa8      	it	ge
 80024c6:	eeb0 0a68 	vmovge.f32	s0, s17
 80024ca:	e7b9      	b.n	8002440 <__ieee754_powf+0x30>
 80024cc:	2c00      	cmp	r4, #0
 80024ce:	f280 822c 	bge.w	800292a <__ieee754_powf+0x51a>
 80024d2:	eeb1 0a68 	vneg.f32	s0, s17
 80024d6:	e7b3      	b.n	8002440 <__ieee754_powf+0x30>
 80024d8:	2500      	movs	r5, #0
 80024da:	e7dd      	b.n	8002498 <__ieee754_powf+0x88>
 80024dc:	2500      	movs	r5, #0
 80024de:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80024e2:	d102      	bne.n	80024ea <__ieee754_powf+0xda>
 80024e4:	ee28 0a08 	vmul.f32	s0, s16, s16
 80024e8:	e7aa      	b.n	8002440 <__ieee754_powf+0x30>
 80024ea:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80024ee:	f040 8227 	bne.w	8002940 <__ieee754_powf+0x530>
 80024f2:	2e00      	cmp	r6, #0
 80024f4:	f2c0 8224 	blt.w	8002940 <__ieee754_powf+0x530>
 80024f8:	eeb0 0a48 	vmov.f32	s0, s16
 80024fc:	ecbd 8b02 	vpop	{d8}
 8002500:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002504:	f7ff bf80 	b.w	8002408 <__ieee754_sqrtf>
 8002508:	2d01      	cmp	r5, #1
 800250a:	d199      	bne.n	8002440 <__ieee754_powf+0x30>
 800250c:	eeb1 0a40 	vneg.f32	s0, s0
 8002510:	e796      	b.n	8002440 <__ieee754_powf+0x30>
 8002512:	0ff0      	lsrs	r0, r6, #31
 8002514:	3801      	subs	r0, #1
 8002516:	ea55 0300 	orrs.w	r3, r5, r0
 800251a:	d104      	bne.n	8002526 <__ieee754_powf+0x116>
 800251c:	ee38 8a48 	vsub.f32	s16, s16, s16
 8002520:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8002524:	e78c      	b.n	8002440 <__ieee754_powf+0x30>
 8002526:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800252a:	d96d      	bls.n	8002608 <__ieee754_powf+0x1f8>
 800252c:	4baa      	ldr	r3, [pc, #680]	@ (80027d8 <__ieee754_powf+0x3c8>)
 800252e:	4598      	cmp	r8, r3
 8002530:	d808      	bhi.n	8002544 <__ieee754_powf+0x134>
 8002532:	2c00      	cmp	r4, #0
 8002534:	da0b      	bge.n	800254e <__ieee754_powf+0x13e>
 8002536:	2000      	movs	r0, #0
 8002538:	ecbd 8b02 	vpop	{d8}
 800253c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002540:	f000 bac2 	b.w	8002ac8 <__math_oflowf>
 8002544:	4ba5      	ldr	r3, [pc, #660]	@ (80027dc <__ieee754_powf+0x3cc>)
 8002546:	4598      	cmp	r8, r3
 8002548:	d908      	bls.n	800255c <__ieee754_powf+0x14c>
 800254a:	2c00      	cmp	r4, #0
 800254c:	dcf3      	bgt.n	8002536 <__ieee754_powf+0x126>
 800254e:	2000      	movs	r0, #0
 8002550:	ecbd 8b02 	vpop	{d8}
 8002554:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002558:	f000 bab0 	b.w	8002abc <__math_uflowf>
 800255c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8002560:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002564:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 80027e0 <__ieee754_powf+0x3d0>
 8002568:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800256c:	eee0 6a67 	vfms.f32	s13, s0, s15
 8002570:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8002574:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8002578:	ee20 7a00 	vmul.f32	s14, s0, s0
 800257c:	eddf 6a99 	vldr	s13, [pc, #612]	@ 80027e4 <__ieee754_powf+0x3d4>
 8002580:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002584:	eddf 7a98 	vldr	s15, [pc, #608]	@ 80027e8 <__ieee754_powf+0x3d8>
 8002588:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800258c:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80027ec <__ieee754_powf+0x3dc>
 8002590:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002594:	eeb0 7a67 	vmov.f32	s14, s15
 8002598:	eea0 7a26 	vfma.f32	s14, s0, s13
 800259c:	ee17 3a10 	vmov	r3, s14
 80025a0:	f36f 030b 	bfc	r3, #0, #12
 80025a4:	ee07 3a10 	vmov	s14, r3
 80025a8:	eeb0 6a47 	vmov.f32	s12, s14
 80025ac:	eea0 6a66 	vfms.f32	s12, s0, s13
 80025b0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80025b4:	3d01      	subs	r5, #1
 80025b6:	4305      	orrs	r5, r0
 80025b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025bc:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80025c0:	f36f 040b 	bfc	r4, #0, #12
 80025c4:	bf18      	it	ne
 80025c6:	eeb0 8a66 	vmovne.f32	s16, s13
 80025ca:	ee06 4a90 	vmov	s13, r4
 80025ce:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80025d2:	ee38 6ae6 	vsub.f32	s12, s17, s13
 80025d6:	ee67 7a26 	vmul.f32	s15, s14, s13
 80025da:	eee6 0a07 	vfma.f32	s1, s12, s14
 80025de:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80025e2:	ee17 1a10 	vmov	r1, s14
 80025e6:	2900      	cmp	r1, #0
 80025e8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80025ec:	f340 80dd 	ble.w	80027aa <__ieee754_powf+0x39a>
 80025f0:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80025f4:	f240 80ca 	bls.w	800278c <__ieee754_powf+0x37c>
 80025f8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80025fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002600:	bf4c      	ite	mi
 8002602:	2001      	movmi	r0, #1
 8002604:	2000      	movpl	r0, #0
 8002606:	e797      	b.n	8002538 <__ieee754_powf+0x128>
 8002608:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800260c:	bf01      	itttt	eq
 800260e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 80027f0 <__ieee754_powf+0x3e0>
 8002612:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8002616:	f06f 0317 	mvneq.w	r3, #23
 800261a:	ee17 7a90 	vmoveq	r7, s15
 800261e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8002622:	bf18      	it	ne
 8002624:	2300      	movne	r3, #0
 8002626:	3a7f      	subs	r2, #127	@ 0x7f
 8002628:	441a      	add	r2, r3
 800262a:	4b72      	ldr	r3, [pc, #456]	@ (80027f4 <__ieee754_powf+0x3e4>)
 800262c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8002630:	429f      	cmp	r7, r3
 8002632:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8002636:	dd06      	ble.n	8002646 <__ieee754_powf+0x236>
 8002638:	4b6f      	ldr	r3, [pc, #444]	@ (80027f8 <__ieee754_powf+0x3e8>)
 800263a:	429f      	cmp	r7, r3
 800263c:	f340 80a4 	ble.w	8002788 <__ieee754_powf+0x378>
 8002640:	3201      	adds	r2, #1
 8002642:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8002646:	2600      	movs	r6, #0
 8002648:	4b6c      	ldr	r3, [pc, #432]	@ (80027fc <__ieee754_powf+0x3ec>)
 800264a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800264e:	ee07 1a10 	vmov	s14, r1
 8002652:	edd3 5a00 	vldr	s11, [r3]
 8002656:	4b6a      	ldr	r3, [pc, #424]	@ (8002800 <__ieee754_powf+0x3f0>)
 8002658:	ee75 7a87 	vadd.f32	s15, s11, s14
 800265c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002660:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8002664:	1049      	asrs	r1, r1, #1
 8002666:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800266a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800266e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8002672:	ee37 6a65 	vsub.f32	s12, s14, s11
 8002676:	ee07 1a90 	vmov	s15, r1
 800267a:	ee26 5a24 	vmul.f32	s10, s12, s9
 800267e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8002682:	ee15 7a10 	vmov	r7, s10
 8002686:	401f      	ands	r7, r3
 8002688:	ee06 7a90 	vmov	s13, r7
 800268c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8002690:	ee37 7a65 	vsub.f32	s14, s14, s11
 8002694:	ee65 7a05 	vmul.f32	s15, s10, s10
 8002698:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800269c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8002804 <__ieee754_powf+0x3f4>
 80026a0:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8002808 <__ieee754_powf+0x3f8>
 80026a4:	eee7 5a87 	vfma.f32	s11, s15, s14
 80026a8:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800280c <__ieee754_powf+0x3fc>
 80026ac:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80026b0:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 80027e0 <__ieee754_powf+0x3d0>
 80026b4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80026b8:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8002810 <__ieee754_powf+0x400>
 80026bc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80026c0:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8002814 <__ieee754_powf+0x404>
 80026c4:	ee26 6a24 	vmul.f32	s12, s12, s9
 80026c8:	eee7 5a27 	vfma.f32	s11, s14, s15
 80026cc:	ee35 7a26 	vadd.f32	s14, s10, s13
 80026d0:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80026d4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80026d8:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80026dc:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80026e0:	eef0 5a67 	vmov.f32	s11, s15
 80026e4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80026e8:	ee75 5a87 	vadd.f32	s11, s11, s14
 80026ec:	ee15 1a90 	vmov	r1, s11
 80026f0:	4019      	ands	r1, r3
 80026f2:	ee05 1a90 	vmov	s11, r1
 80026f6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80026fa:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80026fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002702:	ee67 7a85 	vmul.f32	s15, s15, s10
 8002706:	eee6 7a25 	vfma.f32	s15, s12, s11
 800270a:	eeb0 6a67 	vmov.f32	s12, s15
 800270e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8002712:	ee16 1a10 	vmov	r1, s12
 8002716:	4019      	ands	r1, r3
 8002718:	ee06 1a10 	vmov	s12, r1
 800271c:	eeb0 7a46 	vmov.f32	s14, s12
 8002720:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8002724:	493c      	ldr	r1, [pc, #240]	@ (8002818 <__ieee754_powf+0x408>)
 8002726:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800272a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800272e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800281c <__ieee754_powf+0x40c>
 8002732:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8002820 <__ieee754_powf+0x410>
 8002736:	ee67 7a87 	vmul.f32	s15, s15, s14
 800273a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8002824 <__ieee754_powf+0x414>
 800273e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8002742:	ed91 7a00 	vldr	s14, [r1]
 8002746:	ee77 7a87 	vadd.f32	s15, s15, s14
 800274a:	ee07 2a10 	vmov	s14, r2
 800274e:	4a36      	ldr	r2, [pc, #216]	@ (8002828 <__ieee754_powf+0x418>)
 8002750:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002754:	eeb0 7a67 	vmov.f32	s14, s15
 8002758:	eea6 7a25 	vfma.f32	s14, s12, s11
 800275c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8002760:	ed92 5a00 	vldr	s10, [r2]
 8002764:	ee37 7a05 	vadd.f32	s14, s14, s10
 8002768:	ee37 7a26 	vadd.f32	s14, s14, s13
 800276c:	ee17 2a10 	vmov	r2, s14
 8002770:	401a      	ands	r2, r3
 8002772:	ee07 2a10 	vmov	s14, r2
 8002776:	ee77 6a66 	vsub.f32	s13, s14, s13
 800277a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800277e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8002782:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002786:	e715      	b.n	80025b4 <__ieee754_powf+0x1a4>
 8002788:	2601      	movs	r6, #1
 800278a:	e75d      	b.n	8002648 <__ieee754_powf+0x238>
 800278c:	d152      	bne.n	8002834 <__ieee754_powf+0x424>
 800278e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800282c <__ieee754_powf+0x41c>
 8002792:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002796:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800279a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800279e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a2:	f73f af29 	bgt.w	80025f8 <__ieee754_powf+0x1e8>
 80027a6:	2386      	movs	r3, #134	@ 0x86
 80027a8:	e048      	b.n	800283c <__ieee754_powf+0x42c>
 80027aa:	4a21      	ldr	r2, [pc, #132]	@ (8002830 <__ieee754_powf+0x420>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d907      	bls.n	80027c0 <__ieee754_powf+0x3b0>
 80027b0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80027b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b8:	bf4c      	ite	mi
 80027ba:	2001      	movmi	r0, #1
 80027bc:	2000      	movpl	r0, #0
 80027be:	e6c7      	b.n	8002550 <__ieee754_powf+0x140>
 80027c0:	d138      	bne.n	8002834 <__ieee754_powf+0x424>
 80027c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027c6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80027ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ce:	dbea      	blt.n	80027a6 <__ieee754_powf+0x396>
 80027d0:	e7ee      	b.n	80027b0 <__ieee754_powf+0x3a0>
 80027d2:	bf00      	nop
 80027d4:	00000000 	.word	0x00000000
 80027d8:	3f7ffff3 	.word	0x3f7ffff3
 80027dc:	3f800007 	.word	0x3f800007
 80027e0:	3eaaaaab 	.word	0x3eaaaaab
 80027e4:	3fb8aa00 	.word	0x3fb8aa00
 80027e8:	3fb8aa3b 	.word	0x3fb8aa3b
 80027ec:	36eca570 	.word	0x36eca570
 80027f0:	4b800000 	.word	0x4b800000
 80027f4:	001cc471 	.word	0x001cc471
 80027f8:	005db3d6 	.word	0x005db3d6
 80027fc:	08002b58 	.word	0x08002b58
 8002800:	fffff000 	.word	0xfffff000
 8002804:	3e6c3255 	.word	0x3e6c3255
 8002808:	3e53f142 	.word	0x3e53f142
 800280c:	3e8ba305 	.word	0x3e8ba305
 8002810:	3edb6db7 	.word	0x3edb6db7
 8002814:	3f19999a 	.word	0x3f19999a
 8002818:	08002b48 	.word	0x08002b48
 800281c:	3f76384f 	.word	0x3f76384f
 8002820:	3f763800 	.word	0x3f763800
 8002824:	369dc3a0 	.word	0x369dc3a0
 8002828:	08002b50 	.word	0x08002b50
 800282c:	3338aa3c 	.word	0x3338aa3c
 8002830:	43160000 	.word	0x43160000
 8002834:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8002838:	d96f      	bls.n	800291a <__ieee754_powf+0x50a>
 800283a:	15db      	asrs	r3, r3, #23
 800283c:	3b7e      	subs	r3, #126	@ 0x7e
 800283e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002842:	4118      	asrs	r0, r3
 8002844:	4408      	add	r0, r1
 8002846:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800284a:	4a4e      	ldr	r2, [pc, #312]	@ (8002984 <__ieee754_powf+0x574>)
 800284c:	3b7f      	subs	r3, #127	@ 0x7f
 800284e:	411a      	asrs	r2, r3
 8002850:	4002      	ands	r2, r0
 8002852:	ee07 2a10 	vmov	s14, r2
 8002856:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800285a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800285e:	f1c3 0317 	rsb	r3, r3, #23
 8002862:	4118      	asrs	r0, r3
 8002864:	2900      	cmp	r1, #0
 8002866:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800286a:	bfb8      	it	lt
 800286c:	4240      	neglt	r0, r0
 800286e:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8002872:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8002988 <__ieee754_powf+0x578>
 8002876:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800298c <__ieee754_powf+0x57c>
 800287a:	ee16 3a90 	vmov	r3, s13
 800287e:	f36f 030b 	bfc	r3, #0, #12
 8002882:	ee06 3a90 	vmov	s13, r3
 8002886:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800288a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800288e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8002892:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8002990 <__ieee754_powf+0x580>
 8002896:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800289a:	eee0 7a87 	vfma.f32	s15, s1, s14
 800289e:	eeb0 7a67 	vmov.f32	s14, s15
 80028a2:	eea6 7a86 	vfma.f32	s14, s13, s12
 80028a6:	eef0 5a47 	vmov.f32	s11, s14
 80028aa:	eee6 5ac6 	vfms.f32	s11, s13, s12
 80028ae:	ee67 6a07 	vmul.f32	s13, s14, s14
 80028b2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80028b6:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8002994 <__ieee754_powf+0x584>
 80028ba:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8002998 <__ieee754_powf+0x588>
 80028be:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80028c2:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800299c <__ieee754_powf+0x58c>
 80028c6:	eee6 5a26 	vfma.f32	s11, s12, s13
 80028ca:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 80029a0 <__ieee754_powf+0x590>
 80028ce:	eea5 6aa6 	vfma.f32	s12, s11, s13
 80028d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80029a4 <__ieee754_powf+0x594>
 80028d6:	eee6 5a26 	vfma.f32	s11, s12, s13
 80028da:	eeb0 6a47 	vmov.f32	s12, s14
 80028de:	eea5 6ae6 	vfms.f32	s12, s11, s13
 80028e2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80028e6:	ee67 5a06 	vmul.f32	s11, s14, s12
 80028ea:	ee36 6a66 	vsub.f32	s12, s12, s13
 80028ee:	eee7 7a27 	vfma.f32	s15, s14, s15
 80028f2:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80028f6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80028fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002902:	ee10 3a10 	vmov	r3, s0
 8002906:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800290a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800290e:	da06      	bge.n	800291e <__ieee754_powf+0x50e>
 8002910:	f000 f854 	bl	80029bc <scalbnf>
 8002914:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002918:	e592      	b.n	8002440 <__ieee754_powf+0x30>
 800291a:	2000      	movs	r0, #0
 800291c:	e7a7      	b.n	800286e <__ieee754_powf+0x45e>
 800291e:	ee00 3a10 	vmov	s0, r3
 8002922:	e7f7      	b.n	8002914 <__ieee754_powf+0x504>
 8002924:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002928:	e58a      	b.n	8002440 <__ieee754_powf+0x30>
 800292a:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80029a8 <__ieee754_powf+0x598>
 800292e:	e587      	b.n	8002440 <__ieee754_powf+0x30>
 8002930:	eeb0 0a48 	vmov.f32	s0, s16
 8002934:	e584      	b.n	8002440 <__ieee754_powf+0x30>
 8002936:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800293a:	f43f adbb 	beq.w	80024b4 <__ieee754_powf+0xa4>
 800293e:	2502      	movs	r5, #2
 8002940:	eeb0 0a48 	vmov.f32	s0, s16
 8002944:	f000 f832 	bl	80029ac <fabsf>
 8002948:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800294c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8002950:	4647      	mov	r7, r8
 8002952:	d003      	beq.n	800295c <__ieee754_powf+0x54c>
 8002954:	f1b8 0f00 	cmp.w	r8, #0
 8002958:	f47f addb 	bne.w	8002512 <__ieee754_powf+0x102>
 800295c:	2c00      	cmp	r4, #0
 800295e:	bfbc      	itt	lt
 8002960:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8002964:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8002968:	2e00      	cmp	r6, #0
 800296a:	f6bf ad69 	bge.w	8002440 <__ieee754_powf+0x30>
 800296e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8002972:	ea58 0805 	orrs.w	r8, r8, r5
 8002976:	f47f adc7 	bne.w	8002508 <__ieee754_powf+0xf8>
 800297a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800297e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8002982:	e55d      	b.n	8002440 <__ieee754_powf+0x30>
 8002984:	ff800000 	.word	0xff800000
 8002988:	3f317218 	.word	0x3f317218
 800298c:	3f317200 	.word	0x3f317200
 8002990:	35bfbe8c 	.word	0x35bfbe8c
 8002994:	b5ddea0e 	.word	0xb5ddea0e
 8002998:	3331bb4c 	.word	0x3331bb4c
 800299c:	388ab355 	.word	0x388ab355
 80029a0:	bb360b61 	.word	0xbb360b61
 80029a4:	3e2aaaab 	.word	0x3e2aaaab
 80029a8:	00000000 	.word	0x00000000

080029ac <fabsf>:
 80029ac:	ee10 3a10 	vmov	r3, s0
 80029b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029b4:	ee00 3a10 	vmov	s0, r3
 80029b8:	4770      	bx	lr
	...

080029bc <scalbnf>:
 80029bc:	ee10 3a10 	vmov	r3, s0
 80029c0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80029c4:	d02b      	beq.n	8002a1e <scalbnf+0x62>
 80029c6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80029ca:	d302      	bcc.n	80029d2 <scalbnf+0x16>
 80029cc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80029d0:	4770      	bx	lr
 80029d2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80029d6:	d123      	bne.n	8002a20 <scalbnf+0x64>
 80029d8:	4b24      	ldr	r3, [pc, #144]	@ (8002a6c <scalbnf+0xb0>)
 80029da:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8002a70 <scalbnf+0xb4>
 80029de:	4298      	cmp	r0, r3
 80029e0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80029e4:	db17      	blt.n	8002a16 <scalbnf+0x5a>
 80029e6:	ee10 3a10 	vmov	r3, s0
 80029ea:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80029ee:	3a19      	subs	r2, #25
 80029f0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80029f4:	4288      	cmp	r0, r1
 80029f6:	dd15      	ble.n	8002a24 <scalbnf+0x68>
 80029f8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8002a74 <scalbnf+0xb8>
 80029fc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8002a78 <scalbnf+0xbc>
 8002a00:	ee10 3a10 	vmov	r3, s0
 8002a04:	eeb0 7a67 	vmov.f32	s14, s15
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	bfb8      	it	lt
 8002a0c:	eef0 7a66 	vmovlt.f32	s15, s13
 8002a10:	ee27 0a87 	vmul.f32	s0, s15, s14
 8002a14:	4770      	bx	lr
 8002a16:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8002a7c <scalbnf+0xc0>
 8002a1a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002a1e:	4770      	bx	lr
 8002a20:	0dd2      	lsrs	r2, r2, #23
 8002a22:	e7e5      	b.n	80029f0 <scalbnf+0x34>
 8002a24:	4410      	add	r0, r2
 8002a26:	28fe      	cmp	r0, #254	@ 0xfe
 8002a28:	dce6      	bgt.n	80029f8 <scalbnf+0x3c>
 8002a2a:	2800      	cmp	r0, #0
 8002a2c:	dd06      	ble.n	8002a3c <scalbnf+0x80>
 8002a2e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8002a32:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8002a36:	ee00 3a10 	vmov	s0, r3
 8002a3a:	4770      	bx	lr
 8002a3c:	f110 0f16 	cmn.w	r0, #22
 8002a40:	da09      	bge.n	8002a56 <scalbnf+0x9a>
 8002a42:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8002a7c <scalbnf+0xc0>
 8002a46:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8002a80 <scalbnf+0xc4>
 8002a4a:	ee10 3a10 	vmov	r3, s0
 8002a4e:	eeb0 7a67 	vmov.f32	s14, s15
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	e7d9      	b.n	8002a0a <scalbnf+0x4e>
 8002a56:	3019      	adds	r0, #25
 8002a58:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8002a5c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8002a60:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8002a84 <scalbnf+0xc8>
 8002a64:	ee07 3a90 	vmov	s15, r3
 8002a68:	e7d7      	b.n	8002a1a <scalbnf+0x5e>
 8002a6a:	bf00      	nop
 8002a6c:	ffff3cb0 	.word	0xffff3cb0
 8002a70:	4c000000 	.word	0x4c000000
 8002a74:	7149f2ca 	.word	0x7149f2ca
 8002a78:	f149f2ca 	.word	0xf149f2ca
 8002a7c:	0da24260 	.word	0x0da24260
 8002a80:	8da24260 	.word	0x8da24260
 8002a84:	33000000 	.word	0x33000000

08002a88 <with_errnof>:
 8002a88:	b510      	push	{r4, lr}
 8002a8a:	ed2d 8b02 	vpush	{d8}
 8002a8e:	eeb0 8a40 	vmov.f32	s16, s0
 8002a92:	4604      	mov	r4, r0
 8002a94:	f7ff fc0e 	bl	80022b4 <__errno>
 8002a98:	eeb0 0a48 	vmov.f32	s0, s16
 8002a9c:	ecbd 8b02 	vpop	{d8}
 8002aa0:	6004      	str	r4, [r0, #0]
 8002aa2:	bd10      	pop	{r4, pc}

08002aa4 <xflowf>:
 8002aa4:	b130      	cbz	r0, 8002ab4 <xflowf+0x10>
 8002aa6:	eef1 7a40 	vneg.f32	s15, s0
 8002aaa:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002aae:	2022      	movs	r0, #34	@ 0x22
 8002ab0:	f7ff bfea 	b.w	8002a88 <with_errnof>
 8002ab4:	eef0 7a40 	vmov.f32	s15, s0
 8002ab8:	e7f7      	b.n	8002aaa <xflowf+0x6>
	...

08002abc <__math_uflowf>:
 8002abc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8002ac4 <__math_uflowf+0x8>
 8002ac0:	f7ff bff0 	b.w	8002aa4 <xflowf>
 8002ac4:	10000000 	.word	0x10000000

08002ac8 <__math_oflowf>:
 8002ac8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8002ad0 <__math_oflowf+0x8>
 8002acc:	f7ff bfea 	b.w	8002aa4 <xflowf>
 8002ad0:	70000000 	.word	0x70000000

08002ad4 <_init>:
 8002ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad6:	bf00      	nop
 8002ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ada:	bc08      	pop	{r3}
 8002adc:	469e      	mov	lr, r3
 8002ade:	4770      	bx	lr

08002ae0 <_fini>:
 8002ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ae2:	bf00      	nop
 8002ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ae6:	bc08      	pop	{r3}
 8002ae8:	469e      	mov	lr, r3
 8002aea:	4770      	bx	lr
