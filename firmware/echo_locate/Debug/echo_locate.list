
echo_locate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003510  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080036a8  080036a8  000046a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003708  08003708  00005004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003708  08003708  00005004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003708  08003708  00005004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003708  08003708  00004708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800370c  0800370c  0000470c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08003710  00005000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005b24  20000004  08003714  00005004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005b28  08003714  00005b28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003d33  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e68  00000000  00000000  00008d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000300  00000000  00000000  00009bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000022e  00000000  00000000  00009ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025519  00000000  00000000  0000a0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000067de  00000000  00000000  0002f617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083cf1  00000000  00000000  00035df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b9ae6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a84  00000000  00000000  000b9b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000ba5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003690 	.word	0x08003690

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08003690 	.word	0x08003690

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	0000      	movs	r0, r0
	...

08000b28 <main>:
void compute_event_pos(float * x, float * y, float mic0_x, float mic0_y,
					   float mic1_x, float mic1_y, float mic2_x, float mic2_y,
					   float mic1_delay, float mic2_delay);

int main(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b098      	sub	sp, #96	@ 0x60
 8000b2c:	af02      	add	r7, sp, #8

	sysclock_config();
 8000b2e:	f000 fabd 	bl	80010ac <sysclock_config>

	static q15_t mic0_state[NUM_FILTER_TAPS + SAMPLE_SIZE - 1];
	static q15_t mic1_state[NUM_FILTER_TAPS + SAMPLE_SIZE - 1];
	static q15_t mic2_state[NUM_FILTER_TAPS + SAMPLE_SIZE - 1];

	arm_fir_init_q15(&hfir0, NUM_FILTER_TAPS, ftaps_q15, mic0_state, SAMPLE_SIZE);
 8000b32:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	4bb5      	ldr	r3, [pc, #724]	@ (8000e10 <main+0x2e8>)
 8000b3a:	4ab6      	ldr	r2, [pc, #728]	@ (8000e14 <main+0x2ec>)
 8000b3c:	2130      	movs	r1, #48	@ 0x30
 8000b3e:	48b6      	ldr	r0, [pc, #728]	@ (8000e18 <main+0x2f0>)
 8000b40:	f002 fa79 	bl	8003036 <arm_fir_init_q15>
	arm_fir_init_q15(&hfir1, NUM_FILTER_TAPS, ftaps_q15, mic1_state, SAMPLE_SIZE);
 8000b44:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	4bb4      	ldr	r3, [pc, #720]	@ (8000e1c <main+0x2f4>)
 8000b4c:	4ab1      	ldr	r2, [pc, #708]	@ (8000e14 <main+0x2ec>)
 8000b4e:	2130      	movs	r1, #48	@ 0x30
 8000b50:	48b3      	ldr	r0, [pc, #716]	@ (8000e20 <main+0x2f8>)
 8000b52:	f002 fa70 	bl	8003036 <arm_fir_init_q15>
	arm_fir_init_q15(&hfir2, NUM_FILTER_TAPS, ftaps_q15, mic2_state, SAMPLE_SIZE);
 8000b56:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	4bb1      	ldr	r3, [pc, #708]	@ (8000e24 <main+0x2fc>)
 8000b5e:	4aad      	ldr	r2, [pc, #692]	@ (8000e14 <main+0x2ec>)
 8000b60:	2130      	movs	r1, #48	@ 0x30
 8000b62:	48b1      	ldr	r0, [pc, #708]	@ (8000e28 <main+0x300>)
 8000b64:	f002 fa67 	bl	8003036 <arm_fir_init_q15>
	static q15_t mic0_buff[BUFFER_SIZE], mic1_buff[BUFFER_SIZE], mic2_buff[BUFFER_SIZE];

	// sampled and filtered microphone streams
	static q15_t mic0_filt[SAMPLE_SIZE], mic1_filt[SAMPLE_SIZE], mic2_filt[SAMPLE_SIZE];

	uart2_set_fcpu(84000000);
 8000b68:	48b0      	ldr	r0, [pc, #704]	@ (8000e2c <main+0x304>)
 8000b6a:	f002 fbf5 	bl	8003358 <uart2_set_fcpu>
	uart2_dma1_config(115200, USART_DATA_8, USART_STOP_1);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2100      	movs	r1, #0
 8000b72:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8000b76:	f002 fbff 	bl	8003378 <uart2_dma1_config>

	tim5_time_config();
 8000b7a:	f000 fca1 	bl	80014c0 <tim5_time_config>

	tim2_trig_config();
 8000b7e:	f000 fc5f 	bl	8001440 <tim2_trig_config>
	adc1_dma_config();
 8000b82:	f000 fb21 	bl	80011c8 <adc1_dma_config>

	GPIOA->MODER &= ~GPIO_MODER_MODER10;
 8000b86:	4baa      	ldr	r3, [pc, #680]	@ (8000e30 <main+0x308>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4aa9      	ldr	r2, [pc, #676]	@ (8000e30 <main+0x308>)
 8000b8c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000b90:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER10_0;
 8000b92:	4ba7      	ldr	r3, [pc, #668]	@ (8000e30 <main+0x308>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4aa6      	ldr	r2, [pc, #664]	@ (8000e30 <main+0x308>)
 8000b98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000b9c:	6013      	str	r3, [r2, #0]

	GPIOA->MODER &= ~GPIO_MODER_MODER8;
 8000b9e:	4ba4      	ldr	r3, [pc, #656]	@ (8000e30 <main+0x308>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4aa3      	ldr	r2, [pc, #652]	@ (8000e30 <main+0x308>)
 8000ba4:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000ba8:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER8_0;
 8000baa:	4ba1      	ldr	r3, [pc, #644]	@ (8000e30 <main+0x308>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4aa0      	ldr	r2, [pc, #640]	@ (8000e30 <main+0x308>)
 8000bb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bb4:	6013      	str	r3, [r2, #0]

	uint32_t prev_ticks = 0, ticks = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8000bba:	2300      	movs	r3, #0
 8000bbc:	657b      	str	r3, [r7, #84]	@ 0x54

	uint8_t window_ind = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	float last_update = 0;
 8000bc4:	f04f 0300 	mov.w	r3, #0
 8000bc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint8_t detected_event = 0;								// has reference microphone detected an event?
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	uint32_t ref_sample = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t samples = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	643b      	str	r3, [r7, #64]	@ 0x40

	while (1)
	{
		GPIOA->ODR |= GPIO_ODR_OD10;
 8000bd8:	4b95      	ldr	r3, [pc, #596]	@ (8000e30 <main+0x308>)
 8000bda:	695b      	ldr	r3, [r3, #20]
 8000bdc:	4a94      	ldr	r2, [pc, #592]	@ (8000e30 <main+0x308>)
 8000bde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000be2:	6153      	str	r3, [r2, #20]
		while (!!(DMA2_Stream0->CR & DMA_SxCR_CT) == dma_tgt);		// wait for stream to complete
 8000be4:	bf00      	nop
 8000be6:	4b93      	ldr	r3, [pc, #588]	@ (8000e34 <main+0x30c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	bf14      	ite	ne
 8000bf2:	2301      	movne	r3, #1
 8000bf4:	2300      	moveq	r3, #0
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b8f      	ldr	r3, [pc, #572]	@ (8000e38 <main+0x310>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d0f1      	beq.n	8000be6 <main+0xbe>
		prev_ticks = ticks;
 8000c02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c04:	637b      	str	r3, [r7, #52]	@ 0x34
		ticks = TIM5->CNT;
 8000c06:	4b8d      	ldr	r3, [pc, #564]	@ (8000e3c <main+0x314>)
 8000c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c0a:	657b      	str	r3, [r7, #84]	@ 0x54
		samples += SAMPLE_SIZE;
 8000c0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c0e:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8000c12:	643b      	str	r3, [r7, #64]	@ 0x40
		GPIOA->ODR &= ~GPIO_ODR_OD10;
 8000c14:	4b86      	ldr	r3, [pc, #536]	@ (8000e30 <main+0x308>)
 8000c16:	695b      	ldr	r3, [r3, #20]
 8000c18:	4a85      	ldr	r2, [pc, #532]	@ (8000e30 <main+0x308>)
 8000c1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000c1e:	6153      	str	r3, [r2, #20]
		dma_tgt = !dma_tgt;											// switch DMA targets
 8000c20:	4b85      	ldr	r3, [pc, #532]	@ (8000e38 <main+0x310>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	bf0c      	ite	eq
 8000c28:	2301      	moveq	r3, #1
 8000c2a:	2300      	movne	r3, #0
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	461a      	mov	r2, r3
 8000c30:	4b81      	ldr	r3, [pc, #516]	@ (8000e38 <main+0x310>)
 8000c32:	701a      	strb	r2, [r3, #0]
		DMA2->LIFCR |= DMA_LIFCR_CTCIF0 | DMA_LIFCR_CHTIF0;			// clear transfer complete and half complete flag
 8000c34:	4b82      	ldr	r3, [pc, #520]	@ (8000e40 <main+0x318>)
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	4a81      	ldr	r2, [pc, #516]	@ (8000e40 <main+0x318>)
 8000c3a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000c3e:	6093      	str	r3, [r2, #8]

		GPIOA->ODR |= GPIO_ODR_OD8;
 8000c40:	4b7b      	ldr	r3, [pc, #492]	@ (8000e30 <main+0x308>)
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	4a7a      	ldr	r2, [pc, #488]	@ (8000e30 <main+0x308>)
 8000c46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c4a:	6153      	str	r3, [r2, #20]
		stream_splice();
 8000c4c:	f000 fc64 	bl	8001518 <stream_splice>

		// sanitize microphone streams with bandpass filter
		arm_fir_fast_q15(&hfir0, mic0_samp, mic0_filt, SAMPLE_SIZE);
 8000c50:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000c54:	4a7b      	ldr	r2, [pc, #492]	@ (8000e44 <main+0x31c>)
 8000c56:	497c      	ldr	r1, [pc, #496]	@ (8000e48 <main+0x320>)
 8000c58:	486f      	ldr	r0, [pc, #444]	@ (8000e18 <main+0x2f0>)
 8000c5a:	f002 f965 	bl	8002f28 <arm_fir_fast_q15>
		arm_fir_fast_q15(&hfir1, mic1_samp, mic1_filt, SAMPLE_SIZE);
 8000c5e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000c62:	4a7a      	ldr	r2, [pc, #488]	@ (8000e4c <main+0x324>)
 8000c64:	497a      	ldr	r1, [pc, #488]	@ (8000e50 <main+0x328>)
 8000c66:	486e      	ldr	r0, [pc, #440]	@ (8000e20 <main+0x2f8>)
 8000c68:	f002 f95e 	bl	8002f28 <arm_fir_fast_q15>
		arm_fir_fast_q15(&hfir2, mic2_samp, mic2_filt, SAMPLE_SIZE);
 8000c6c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000c70:	4a78      	ldr	r2, [pc, #480]	@ (8000e54 <main+0x32c>)
 8000c72:	4979      	ldr	r1, [pc, #484]	@ (8000e58 <main+0x330>)
 8000c74:	486c      	ldr	r0, [pc, #432]	@ (8000e28 <main+0x300>)
 8000c76:	f002 f957 	bl	8002f28 <arm_fir_fast_q15>

		// copy data to window buffers for cross correlation
		arm_copy_q15(mic0_filt, mic0_buff + window_ind * SAMPLE_SIZE, SAMPLE_SIZE);
 8000c7a:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8000c7e:	4613      	mov	r3, r2
 8000c80:	011b      	lsls	r3, r3, #4
 8000c82:	1a9b      	subs	r3, r3, r2
 8000c84:	019b      	lsls	r3, r3, #6
 8000c86:	461a      	mov	r2, r3
 8000c88:	4b74      	ldr	r3, [pc, #464]	@ (8000e5c <main+0x334>)
 8000c8a:	4413      	add	r3, r2
 8000c8c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000c90:	4619      	mov	r1, r3
 8000c92:	486c      	ldr	r0, [pc, #432]	@ (8000e44 <main+0x31c>)
 8000c94:	f002 fb10 	bl	80032b8 <arm_copy_q15>
		arm_copy_q15(mic1_filt, mic1_buff + window_ind * SAMPLE_SIZE, SAMPLE_SIZE);
 8000c98:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	011b      	lsls	r3, r3, #4
 8000ca0:	1a9b      	subs	r3, r3, r2
 8000ca2:	019b      	lsls	r3, r3, #6
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b6e      	ldr	r3, [pc, #440]	@ (8000e60 <main+0x338>)
 8000ca8:	4413      	add	r3, r2
 8000caa:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4866      	ldr	r0, [pc, #408]	@ (8000e4c <main+0x324>)
 8000cb2:	f002 fb01 	bl	80032b8 <arm_copy_q15>
		arm_copy_q15(mic2_filt, mic2_buff + window_ind * SAMPLE_SIZE, SAMPLE_SIZE);
 8000cb6:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8000cba:	4613      	mov	r3, r2
 8000cbc:	011b      	lsls	r3, r3, #4
 8000cbe:	1a9b      	subs	r3, r3, r2
 8000cc0:	019b      	lsls	r3, r3, #6
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4b67      	ldr	r3, [pc, #412]	@ (8000e64 <main+0x33c>)
 8000cc6:	4413      	add	r3, r2
 8000cc8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4861      	ldr	r0, [pc, #388]	@ (8000e54 <main+0x32c>)
 8000cd0:	f002 faf2 	bl	80032b8 <arm_copy_q15>

		// reference time is based on # ticks since last DMA buffer started
		float ref_time = prev_ticks * TIME_PERIOD;
 8000cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cd6:	ee07 3a90 	vmov	s15, r3
 8000cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cde:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8000e68 <main+0x340>
 8000ce2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ce6:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

		if (!detected_event && ref_time - last_update > UPDATE_PERIOD)
 8000cea:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f040 80f0 	bne.w	8000ed4 <main+0x3ac>
 8000cf4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000cf8:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8000cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d00:	ee17 0a90 	vmov	r0, s15
 8000d04:	f7ff fbcc 	bl	80004a0 <__aeabi_f2d>
 8000d08:	a33f      	add	r3, pc, #252	@ (adr r3, 8000e08 <main+0x2e0>)
 8000d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0e:	f7ff feaf 	bl	8000a70 <__aeabi_dcmpgt>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	f000 80dd 	beq.w	8000ed4 <main+0x3ac>
		{
			q15_t mic0_filt_peak, mic1_filt_peak, mic2_filt_peak;
			uint32_t mic0_filt_peak_ind, mic1_filt_peak_ind, mic2_filt_peak_ind;

			// find peaks on microphone
			arm_absmax_q15(mic0_filt, SAMPLE_SIZE, &mic0_filt_peak, &mic0_filt_peak_ind);
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	f107 0226 	add.w	r2, r7, #38	@ 0x26
 8000d22:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8000d26:	4847      	ldr	r0, [pc, #284]	@ (8000e44 <main+0x31c>)
 8000d28:	f002 f9af 	bl	800308a <arm_absmax_q15>
			arm_absmax_q15(mic1_filt, SAMPLE_SIZE, &mic1_filt_peak, &mic1_filt_peak_ind);
 8000d2c:	f107 0318 	add.w	r3, r7, #24
 8000d30:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000d34:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8000d38:	4844      	ldr	r0, [pc, #272]	@ (8000e4c <main+0x324>)
 8000d3a:	f002 f9a6 	bl	800308a <arm_absmax_q15>
			arm_absmax_q15(mic2_filt, SAMPLE_SIZE, &mic2_filt_peak, &mic2_filt_peak_ind);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 8000d46:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8000d4a:	4842      	ldr	r0, [pc, #264]	@ (8000e54 <main+0x32c>)
 8000d4c:	f002 f99d 	bl	800308a <arm_absmax_q15>

			// find first peak above threshold --> this index is the start of the cross correlation
			if (mic0_filt_peak_ind < mic1_filt_peak_ind && mic0_filt_peak_ind < mic2_filt_peak_ind && abs(mic0_filt_peak) > ENERGY_THRESH)
 8000d50:	69fa      	ldr	r2, [r7, #28]
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d229      	bcs.n	8000dac <main+0x284>
 8000d58:	69fa      	ldr	r2, [r7, #28]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d225      	bcs.n	8000dac <main+0x284>
 8000d60:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	bfb8      	it	lt
 8000d68:	425b      	neglt	r3, r3
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000d70:	d91c      	bls.n	8000dac <main+0x284>
			{
				ref_sample = mic0_filt_peak_ind + window_ind * SAMPLE_SIZE;	// get global sample # for reference in buffer
 8000d72:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8000d76:	4613      	mov	r3, r2
 8000d78:	011b      	lsls	r3, r3, #4
 8000d7a:	1a9b      	subs	r3, r3, r2
 8000d7c:	015b      	lsls	r3, r3, #5
 8000d7e:	461a      	mov	r2, r3
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	4413      	add	r3, r2
 8000d84:	647b      	str	r3, [r7, #68]	@ 0x44
				last_update = ref_time + mic0_filt_peak_ind * SAMPLE_PERIOD;	// update last time peak was detected
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	ee07 3a90 	vmov	s15, r3
 8000d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d90:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8000e6c <main+0x344>
 8000d94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d98:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000da0:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
				detected_event = 1;
 8000da4:	2301      	movs	r3, #1
 8000da6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8000daa:	e092      	b.n	8000ed2 <main+0x3aa>
			}
			else if (mic1_filt_peak_ind < mic0_filt_peak_ind && mic1_filt_peak_ind < mic2_filt_peak_ind && abs(mic1_filt_peak) > ENERGY_THRESH)
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d25d      	bcs.n	8000e70 <main+0x348>
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d259      	bcs.n	8000e70 <main+0x348>
 8000dbc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	bfb8      	it	lt
 8000dc4:	425b      	neglt	r3, r3
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000dcc:	d950      	bls.n	8000e70 <main+0x348>
			{
				ref_sample = mic1_filt_peak_ind + window_ind * SAMPLE_SIZE;
 8000dce:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	011b      	lsls	r3, r3, #4
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	015b      	lsls	r3, r3, #5
 8000dda:	461a      	mov	r2, r3
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	4413      	add	r3, r2
 8000de0:	647b      	str	r3, [r7, #68]	@ 0x44
				last_update = ref_time + mic1_filt_peak_ind * SAMPLE_PERIOD;
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	ee07 3a90 	vmov	s15, r3
 8000de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dec:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000e6c <main+0x344>
 8000df0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000df4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000df8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dfc:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
				detected_event = 1;
 8000e00:	2301      	movs	r3, #1
 8000e02:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8000e06:	e064      	b.n	8000ed2 <main+0x3aa>
 8000e08:	9999999a 	.word	0x9999999a
 8000e0c:	3f999999 	.word	0x3f999999
 8000e10:	20002210 	.word	0x20002210
 8000e14:	080036a8 	.word	0x080036a8
 8000e18:	20000020 	.word	0x20000020
 8000e1c:	20002630 	.word	0x20002630
 8000e20:	2000002c 	.word	0x2000002c
 8000e24:	20002a50 	.word	0x20002a50
 8000e28:	20000038 	.word	0x20000038
 8000e2c:	0501bd00 	.word	0x0501bd00
 8000e30:	40020000 	.word	0x40020000
 8000e34:	40026410 	.word	0x40026410
 8000e38:	20002204 	.word	0x20002204
 8000e3c:	40000c00 	.word	0x40000c00
 8000e40:	40026400 	.word	0x40026400
 8000e44:	20002e70 	.word	0x20002e70
 8000e48:	200016c4 	.word	0x200016c4
 8000e4c:	20003230 	.word	0x20003230
 8000e50:	20001a84 	.word	0x20001a84
 8000e54:	200035f0 	.word	0x200035f0
 8000e58:	20001e44 	.word	0x20001e44
 8000e5c:	200039b0 	.word	0x200039b0
 8000e60:	20004130 	.word	0x20004130
 8000e64:	200048b0 	.word	0x200048b0
 8000e68:	3727c5ac 	.word	0x3727c5ac
 8000e6c:	37d1b717 	.word	0x37d1b717
			}
			else if (mic2_filt_peak_ind < mic0_filt_peak_ind && mic2_filt_peak_ind < mic1_filt_peak_ind && abs(mic2_filt_peak) > ENERGY_THRESH)
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	f080 80ec 	bcs.w	8001052 <main+0x52a>
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	f080 80e7 	bcs.w	8001052 <main+0x52a>
 8000e84:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	bfb8      	it	lt
 8000e8c:	425b      	neglt	r3, r3
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e94:	f240 80dd 	bls.w	8001052 <main+0x52a>
			{
				ref_sample = mic2_filt_peak_ind + window_ind * SAMPLE_SIZE;
 8000e98:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	011b      	lsls	r3, r3, #4
 8000ea0:	1a9b      	subs	r3, r3, r2
 8000ea2:	015b      	lsls	r3, r3, #5
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	647b      	str	r3, [r7, #68]	@ 0x44
				last_update = ref_time + mic2_filt_peak_ind * SAMPLE_PERIOD;
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	ee07 3a90 	vmov	s15, r3
 8000eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eb6:	ed1f 7a13 	vldr	s14, [pc, #-76]	@ 8000e6c <main+0x344>
 8000eba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ebe:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec6:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
				detected_event = 1;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
		{
 8000ed0:	e0bf      	b.n	8001052 <main+0x52a>
 8000ed2:	e0be      	b.n	8001052 <main+0x52a>
			}

		}
		else if (detected_event && ref_sample + SAMPLES_AFTER_DET < samples) 				// make sure enough samples have been taken after peak detected
 8000ed4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 80bb 	beq.w	8001054 <main+0x52c>
 8000ede:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ee0:	33bd      	adds	r3, #189	@ 0xbd
 8000ee2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	f240 80b5 	bls.w	8001054 <main+0x52c>
			// take 10 samples starting from before first peak, then 189 after first peak
			static q15_t mic0_corr_buff[CORR_SIZE], mic1_corr_buff[CORR_SIZE], mic2_corr_buff[CORR_SIZE];
			// output cross correlation sequences
			static q15_t corr_mic01[CORR_LEN], corr_mic02[CORR_LEN];

			int32_t start_sample = ref_sample - SAMPLES_BEFORE_DET;
 8000eea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000eec:	3b0a      	subs	r3, #10
 8000eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
			int32_t stop_sample = ref_sample + SAMPLES_AFTER_DET;
 8000ef0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ef2:	33bd      	adds	r3, #189	@ 0xbd
 8000ef4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if (start_sample > -1 && stop_sample < BUFFER_SIZE)			// full length of correlation input is contiguous
 8000ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db1f      	blt.n	8000f3c <main+0x414>
 8000efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000efe:	f5b3 7f70 	cmp.w	r3, #960	@ 0x3c0
 8000f02:	da1b      	bge.n	8000f3c <main+0x414>
			{
				arm_copy_q15(mic0_buff + start_sample, mic0_corr_buff, CORR_SIZE);
 8000f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	4a5c      	ldr	r2, [pc, #368]	@ (800107c <main+0x554>)
 8000f0a:	4413      	add	r3, r2
 8000f0c:	22c8      	movs	r2, #200	@ 0xc8
 8000f0e:	495c      	ldr	r1, [pc, #368]	@ (8001080 <main+0x558>)
 8000f10:	4618      	mov	r0, r3
 8000f12:	f002 f9d1 	bl	80032b8 <arm_copy_q15>
				arm_copy_q15(mic1_buff + start_sample, mic1_corr_buff, CORR_SIZE);
 8000f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	4a5a      	ldr	r2, [pc, #360]	@ (8001084 <main+0x55c>)
 8000f1c:	4413      	add	r3, r2
 8000f1e:	22c8      	movs	r2, #200	@ 0xc8
 8000f20:	4959      	ldr	r1, [pc, #356]	@ (8001088 <main+0x560>)
 8000f22:	4618      	mov	r0, r3
 8000f24:	f002 f9c8 	bl	80032b8 <arm_copy_q15>
				arm_copy_q15(mic2_buff + start_sample, mic2_corr_buff, CORR_SIZE);
 8000f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	4a57      	ldr	r2, [pc, #348]	@ (800108c <main+0x564>)
 8000f2e:	4413      	add	r3, r2
 8000f30:	22c8      	movs	r2, #200	@ 0xc8
 8000f32:	4957      	ldr	r1, [pc, #348]	@ (8001090 <main+0x568>)
 8000f34:	4618      	mov	r0, r3
 8000f36:	f002 f9bf 	bl	80032b8 <arm_copy_q15>
 8000f3a:	e033      	b.n	8000fa4 <main+0x47c>
			else 														// if correlation length wraps, copy separately
			{

				uint32_t curr_sample;

				if (start_sample < 0)
 8000f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	da04      	bge.n	8000f4c <main+0x424>
					curr_sample = BUFFER_SIZE + start_sample;			// if start is on other end of buffer, move pointer back
 8000f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f44:	f503 7370 	add.w	r3, r3, #960	@ 0x3c0
 8000f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000f4a:	e001      	b.n	8000f50 <main+0x428>
				else
					curr_sample = start_sample;
 8000f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c


				for (uint32_t i = 0; i < CORR_SIZE; i++)
 8000f50:	2300      	movs	r3, #0
 8000f52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000f54:	e023      	b.n	8000f9e <main+0x476>
				{
					mic0_corr_buff[i] = mic0_buff[curr_sample];
 8000f56:	4a49      	ldr	r2, [pc, #292]	@ (800107c <main+0x554>)
 8000f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f5a:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8000f5e:	4a48      	ldr	r2, [pc, #288]	@ (8001080 <main+0x558>)
 8000f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					mic1_corr_buff[i] = mic1_buff[curr_sample];
 8000f66:	4a47      	ldr	r2, [pc, #284]	@ (8001084 <main+0x55c>)
 8000f68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f6a:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8000f6e:	4a46      	ldr	r2, [pc, #280]	@ (8001088 <main+0x560>)
 8000f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					mic2_corr_buff[i] = mic2_buff[curr_sample];
 8000f76:	4a45      	ldr	r2, [pc, #276]	@ (800108c <main+0x564>)
 8000f78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f7a:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8000f7e:	4a44      	ldr	r2, [pc, #272]	@ (8001090 <main+0x568>)
 8000f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

					if (++curr_sample == BUFFER_SIZE)					// wrap pointer back to front on overflow
 8000f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f88:	3301      	adds	r3, #1
 8000f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000f8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f8e:	f5b3 7f70 	cmp.w	r3, #960	@ 0x3c0
 8000f92:	d101      	bne.n	8000f98 <main+0x470>
						curr_sample = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
				for (uint32_t i = 0; i < CORR_SIZE; i++)
 8000f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000fa0:	2bc7      	cmp	r3, #199	@ 0xc7
 8000fa2:	d9d8      	bls.n	8000f56 <main+0x42e>

			// Run cross correlation between mic 0 and mic 1 then mic 0 and mic 2
			uint32_t corr_peak_01_ind, corr_peak_02_ind;
			q15_t corr_peak_01, corr_peak_02;

			arm_fill_q15(0, corr_mic01, CORR_LEN);
 8000fa4:	f240 128f 	movw	r2, #399	@ 0x18f
 8000fa8:	493a      	ldr	r1, [pc, #232]	@ (8001094 <main+0x56c>)
 8000faa:	2000      	movs	r0, #0
 8000fac:	f002 f9a3 	bl	80032f6 <arm_fill_q15>
			arm_fill_q15(0, corr_mic02, CORR_LEN);
 8000fb0:	f240 128f 	movw	r2, #399	@ 0x18f
 8000fb4:	4938      	ldr	r1, [pc, #224]	@ (8001098 <main+0x570>)
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f002 f99d 	bl	80032f6 <arm_fill_q15>
			arm_correlate_fast_q15(mic0_corr_buff, CORR_SIZE, mic1_corr_buff, CORR_SIZE, corr_mic01);
 8000fbc:	4b35      	ldr	r3, [pc, #212]	@ (8001094 <main+0x56c>)
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	23c8      	movs	r3, #200	@ 0xc8
 8000fc2:	4a31      	ldr	r2, [pc, #196]	@ (8001088 <main+0x560>)
 8000fc4:	21c8      	movs	r1, #200	@ 0xc8
 8000fc6:	482e      	ldr	r0, [pc, #184]	@ (8001080 <main+0x558>)
 8000fc8:	f000 fb97 	bl	80016fa <arm_correlate_fast_q15>
			arm_correlate_fast_q15(mic0_corr_buff, CORR_SIZE, mic2_corr_buff, CORR_SIZE, corr_mic02);
 8000fcc:	4b32      	ldr	r3, [pc, #200]	@ (8001098 <main+0x570>)
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	23c8      	movs	r3, #200	@ 0xc8
 8000fd2:	4a2f      	ldr	r2, [pc, #188]	@ (8001090 <main+0x568>)
 8000fd4:	21c8      	movs	r1, #200	@ 0xc8
 8000fd6:	482a      	ldr	r0, [pc, #168]	@ (8001080 <main+0x558>)
 8000fd8:	f000 fb8f 	bl	80016fa <arm_correlate_fast_q15>

			// find peaks in cross correlation output to determine mic delay
			arm_absmax_q15(corr_mic01, CORR_LEN, &corr_peak_01, &corr_peak_01_ind);
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	f107 020a 	add.w	r2, r7, #10
 8000fe4:	f240 118f 	movw	r1, #399	@ 0x18f
 8000fe8:	482a      	ldr	r0, [pc, #168]	@ (8001094 <main+0x56c>)
 8000fea:	f002 f84e 	bl	800308a <arm_absmax_q15>
			arm_absmax_q15(corr_mic02, CORR_LEN, &corr_peak_02, &corr_peak_02_ind);
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	f107 0208 	add.w	r2, r7, #8
 8000ff6:	f240 118f 	movw	r1, #399	@ 0x18f
 8000ffa:	4827      	ldr	r0, [pc, #156]	@ (8001098 <main+0x570>)
 8000ffc:	f002 f845 	bl	800308a <arm_absmax_q15>

			// calculate time delay based on sample difference --> 0 sample delay rests at middle of cross correlation sequence SAMPLE_SIZE - 1
			mic1_delay = (corr_peak_01_ind - (CORR_SIZE - 1)) * SAMPLE_PERIOD;
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	3bc7      	subs	r3, #199	@ 0xc7
 8001004:	ee07 3a90 	vmov	s15, r3
 8001008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800100c:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 800109c <main+0x574>
 8001010:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001014:	4b22      	ldr	r3, [pc, #136]	@ (80010a0 <main+0x578>)
 8001016:	edc3 7a00 	vstr	s15, [r3]
			mic2_delay = (corr_peak_02_ind - (CORR_SIZE - 1)) * SAMPLE_PERIOD;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	3bc7      	subs	r3, #199	@ 0xc7
 800101e:	ee07 3a90 	vmov	s15, r3
 8001022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001026:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800109c <main+0x574>
 800102a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800102e:	4b1d      	ldr	r3, [pc, #116]	@ (80010a4 <main+0x57c>)
 8001030:	edc3 7a00 	vstr	s15, [r3]
			union {
				float fdel[2];			// (x, y)
				uint8_t serial[8];
			} delay;

			delay.fdel[0] = mic1_delay;
 8001034:	4b1a      	ldr	r3, [pc, #104]	@ (80010a0 <main+0x578>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	603b      	str	r3, [r7, #0]
			delay.fdel[1] = mic2_delay;
 800103a:	4b1a      	ldr	r3, [pc, #104]	@ (80010a4 <main+0x57c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	607b      	str	r3, [r7, #4]
			uart2_dma1_write(8, delay.serial);
 8001040:	463b      	mov	r3, r7
 8001042:	4619      	mov	r1, r3
 8001044:	2008      	movs	r0, #8
 8001046:	f002 fab9 	bl	80035bc <uart2_dma1_write>
//				uart2_dma1_write(8, coords.serial);
			}
			*/

			// reset event detection
			detected_event = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8001050:	e000      	b.n	8001054 <main+0x52c>
		{
 8001052:	bf00      	nop
		}

		if (++window_ind == WINDOW_SIZE)
 8001054:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001058:	3301      	adds	r3, #1
 800105a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800105e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001062:	2b02      	cmp	r3, #2
 8001064:	d102      	bne.n	800106c <main+0x544>
			window_ind = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

		GPIOA->ODR &= ~GPIO_ODR_OD8;
 800106c:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <main+0x580>)
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	4a0d      	ldr	r2, [pc, #52]	@ (80010a8 <main+0x580>)
 8001072:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001076:	6153      	str	r3, [r2, #20]
	{
 8001078:	e5ae      	b.n	8000bd8 <main+0xb0>
 800107a:	bf00      	nop
 800107c:	200039b0 	.word	0x200039b0
 8001080:	20005030 	.word	0x20005030
 8001084:	20004130 	.word	0x20004130
 8001088:	200051c0 	.word	0x200051c0
 800108c:	200048b0 	.word	0x200048b0
 8001090:	20005350 	.word	0x20005350
 8001094:	200054e0 	.word	0x200054e0
 8001098:	20005800 	.word	0x20005800
 800109c:	37d1b717 	.word	0x37d1b717
 80010a0:	20002208 	.word	0x20002208
 80010a4:	2000220c 	.word	0x2000220c
 80010a8:	40020000 	.word	0x40020000

080010ac <sysclock_config>:

	}
}

void sysclock_config(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
	// 16 MHz HSI oscillator is default on reset, but select anyways
	RCC->CR |= RCC_CR_HSION;
 80010b2:	4b42      	ldr	r3, [pc, #264]	@ (80011bc <sysclock_config+0x110>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a41      	ldr	r2, [pc, #260]	@ (80011bc <sysclock_config+0x110>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6013      	str	r3, [r2, #0]
	// wait for HSI to be ready
	while (!((RCC->CR) & RCC_CR_HSIRDY));
 80010be:	bf00      	nop
 80010c0:	4b3e      	ldr	r3, [pc, #248]	@ (80011bc <sysclock_config+0x110>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0f9      	beq.n	80010c0 <sysclock_config+0x14>

	// enable power interface clock for APB1
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80010cc:	4b3b      	ldr	r3, [pc, #236]	@ (80011bc <sysclock_config+0x110>)
 80010ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010d2:	641a      	str	r2, [r3, #64]	@ 0x40

	// configure VCO to scale 2 per CubeMX
	PWR->CR |= PWR_CR_VOS_1;
 80010d4:	4b3a      	ldr	r3, [pc, #232]	@ (80011c0 <sysclock_config+0x114>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a39      	ldr	r2, [pc, #228]	@ (80011c0 <sysclock_config+0x114>)
 80010da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010de:	6013      	str	r3, [r2, #0]
	PWR->CR &= ~PWR_CR_VOS_0;
 80010e0:	4b37      	ldr	r3, [pc, #220]	@ (80011c0 <sysclock_config+0x114>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a36      	ldr	r2, [pc, #216]	@ (80011c0 <sysclock_config+0x114>)
 80010e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80010ea:	6013      	str	r3, [r2, #0]

	// configure FLASH
	// instruction cache, prefetch enable, and data cache enabled
	uint32_t flash;
	flash = FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN;
 80010ec:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80010f0:	60fb      	str	r3, [r7, #12]
	flash |= 2;		// 2 wait states for flash
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	60fb      	str	r3, [r7, #12]
	FLASH->ACR = flash;
 80010fa:	4a32      	ldr	r2, [pc, #200]	@ (80011c4 <sysclock_config+0x118>)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6013      	str	r3, [r2, #0]

	// configure bus prescalers
	uint32_t cfgr = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_PPRE2_2;		// APB2 prescaler of 1 (84MHz)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800110a:	60bb      	str	r3, [r7, #8]
	cfgr |= RCC_CFGR_PPRE1_2;		// APB1 prescaler of 2 (42MHZ)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001112:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_HPRE;			// AHB prescaler of 1 (84MHz)
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800111a:	60bb      	str	r3, [r7, #8]
	RCC->CFGR = cfgr;
 800111c:	4a27      	ldr	r2, [pc, #156]	@ (80011bc <sysclock_config+0x110>)
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	6093      	str	r3, [r2, #8]

	// configure main PLL
	uint32_t pll_cfg = RCC->PLLCFGR;
 8001122:	4b26      	ldr	r3, [pc, #152]	@ (80011bc <sysclock_config+0x110>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	607b      	str	r3, [r7, #4]
	pll_cfg &= ~RCC_PLLCFGR_PLLQ;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800112e:	607b      	str	r3, [r7, #4]
	pll_cfg |= RCC_PLLCFGR_PLLQ_2; // configure Q prescaler for USB, SDIO, RNG clocks (/4)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001136:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLP;	// main PLL division factor of 2
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800113e:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLN;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001146:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800114a:	607b      	str	r3, [r7, #4]
	pll_cfg |= 168UL << 6;	// pll multiplication factor for VCO (x168)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f443 5328 	orr.w	r3, r3, #10752	@ 0x2a00
 8001152:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLM;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800115a:	607b      	str	r3, [r7, #4]
	pll_cfg |= 16UL << 0;	// pll division factor for main PLL and audio PLL (/16)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f043 0310 	orr.w	r3, r3, #16
 8001162:	607b      	str	r3, [r7, #4]

	RCC->PLLCFGR = pll_cfg;
 8001164:	4a15      	ldr	r2, [pc, #84]	@ (80011bc <sysclock_config+0x110>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6053      	str	r3, [r2, #4]

	// enable PLL and wait for ready
	RCC->CR |= RCC_CR_PLLON;
 800116a:	4b14      	ldr	r3, [pc, #80]	@ (80011bc <sysclock_config+0x110>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a13      	ldr	r2, [pc, #76]	@ (80011bc <sysclock_config+0x110>)
 8001170:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001174:	6013      	str	r3, [r2, #0]
	while (!((RCC->CR) & RCC_CR_PLLRDY));
 8001176:	bf00      	nop
 8001178:	4b10      	ldr	r3, [pc, #64]	@ (80011bc <sysclock_config+0x110>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0f9      	beq.n	8001178 <sysclock_config+0xcc>

	// select clock source
	cfgr = RCC->CFGR;
 8001184:	4b0d      	ldr	r3, [pc, #52]	@ (80011bc <sysclock_config+0x110>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	60bb      	str	r3, [r7, #8]
	cfgr |= RCC_CFGR_SW_1;		// select PLL as system clock
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_SW_0;
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	f023 0301 	bic.w	r3, r3, #1
 8001198:	60bb      	str	r3, [r7, #8]
	RCC->CFGR = cfgr;
 800119a:	4a08      	ldr	r2, [pc, #32]	@ (80011bc <sysclock_config+0x110>)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	6093      	str	r3, [r2, #8]

	// wait for PLL clock source to become active
	while (!((RCC->CFGR) & RCC_CFGR_SWS_1));
 80011a0:	bf00      	nop
 80011a2:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <sysclock_config+0x110>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f9      	beq.n	80011a2 <sysclock_config+0xf6>
}
 80011ae:	bf00      	nop
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40007000 	.word	0x40007000
 80011c4:	40023c00 	.word	0x40023c00

080011c8 <adc1_dma_config>:

void adc1_dma_config(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;				// enable ADC1 clock
 80011cc:	4b94      	ldr	r3, [pc, #592]	@ (8001420 <adc1_dma_config+0x258>)
 80011ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d0:	4a93      	ldr	r2, [pc, #588]	@ (8001420 <adc1_dma_config+0x258>)
 80011d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011d6:	6453      	str	r3, [r2, #68]	@ 0x44
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;			// enable GPIOA clock
 80011d8:	4b91      	ldr	r3, [pc, #580]	@ (8001420 <adc1_dma_config+0x258>)
 80011da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011dc:	4a90      	ldr	r2, [pc, #576]	@ (8001420 <adc1_dma_config+0x258>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6313      	str	r3, [r2, #48]	@ 0x30

	// PA0 as analog input
	GPIOA->MODER |= GPIO_MODER_MODER0_0 | GPIO_MODER_MODER0_1;
 80011e4:	4b8f      	ldr	r3, [pc, #572]	@ (8001424 <adc1_dma_config+0x25c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a8e      	ldr	r2, [pc, #568]	@ (8001424 <adc1_dma_config+0x25c>)
 80011ea:	f043 0303 	orr.w	r3, r3, #3
 80011ee:	6013      	str	r3, [r2, #0]
	// PA1 as analog input
	GPIOA->MODER |= GPIO_MODER_MODER1_0 | GPIO_MODER_MODER1_1;
 80011f0:	4b8c      	ldr	r3, [pc, #560]	@ (8001424 <adc1_dma_config+0x25c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a8b      	ldr	r2, [pc, #556]	@ (8001424 <adc1_dma_config+0x25c>)
 80011f6:	f043 030c 	orr.w	r3, r3, #12
 80011fa:	6013      	str	r3, [r2, #0]
	// PA4 as analog input
	GPIOA->MODER |= GPIO_MODER_MODER4_0 | GPIO_MODER_MODER4_1;
 80011fc:	4b89      	ldr	r3, [pc, #548]	@ (8001424 <adc1_dma_config+0x25c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a88      	ldr	r2, [pc, #544]	@ (8001424 <adc1_dma_config+0x25c>)
 8001202:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001206:	6013      	str	r3, [r2, #0]

	ADC1->CR2 &= ~ADC_CR2_ADON;						// turn off ADC to configure
 8001208:	4b87      	ldr	r3, [pc, #540]	@ (8001428 <adc1_dma_config+0x260>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	4a86      	ldr	r2, [pc, #536]	@ (8001428 <adc1_dma_config+0x260>)
 800120e:	f023 0301 	bic.w	r3, r3, #1
 8001212:	6093      	str	r3, [r2, #8]

	// APB2 clock (84 MHz) / 4 = 21 MHz
	// MAX ADC clock freq is 36 MHz (pg 106 datasheet)
	ADC->CCR &= ~ADC_CCR_ADCPRE;
 8001214:	4b85      	ldr	r3, [pc, #532]	@ (800142c <adc1_dma_config+0x264>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	4a84      	ldr	r2, [pc, #528]	@ (800142c <adc1_dma_config+0x264>)
 800121a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800121e:	6053      	str	r3, [r2, #4]
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 8001220:	4b82      	ldr	r3, [pc, #520]	@ (800142c <adc1_dma_config+0x264>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	4a81      	ldr	r2, [pc, #516]	@ (800142c <adc1_dma_config+0x264>)
 8001226:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800122a:	6053      	str	r3, [r2, #4]

	// trigger detection on rising edge
	ADC1->CR2 |= ADC_CR2_EXTEN_0;
 800122c:	4b7e      	ldr	r3, [pc, #504]	@ (8001428 <adc1_dma_config+0x260>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	4a7d      	ldr	r2, [pc, #500]	@ (8001428 <adc1_dma_config+0x260>)
 8001232:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001236:	6093      	str	r3, [r2, #8]
	ADC1->CR2 &= ~ADC_CR2_EXTEN_1;
 8001238:	4b7b      	ldr	r3, [pc, #492]	@ (8001428 <adc1_dma_config+0x260>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	4a7a      	ldr	r2, [pc, #488]	@ (8001428 <adc1_dma_config+0x260>)
 800123e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8001242:	6093      	str	r3, [r2, #8]

	// TIM2 TRGO event
	ADC1->CR2 |= ADC_CR2_EXTSEL_1 | ADC_CR2_EXTSEL_2;
 8001244:	4b78      	ldr	r3, [pc, #480]	@ (8001428 <adc1_dma_config+0x260>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	4a77      	ldr	r2, [pc, #476]	@ (8001428 <adc1_dma_config+0x260>)
 800124a:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 800124e:	6093      	str	r3, [r2, #8]
	ADC1->CR2 &= ~(ADC_CR2_EXTSEL_0 | ADC_CR2_EXTSEL_3);
 8001250:	4b75      	ldr	r3, [pc, #468]	@ (8001428 <adc1_dma_config+0x260>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	4a74      	ldr	r2, [pc, #464]	@ (8001428 <adc1_dma_config+0x260>)
 8001256:	f023 6310 	bic.w	r3, r3, #150994944	@ 0x9000000
 800125a:	6093      	str	r3, [r2, #8]

	// Scan mode to convert all 3 channels
	ADC1->CR1 |= ADC_CR1_SCAN;
 800125c:	4b72      	ldr	r3, [pc, #456]	@ (8001428 <adc1_dma_config+0x260>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	4a71      	ldr	r2, [pc, #452]	@ (8001428 <adc1_dma_config+0x260>)
 8001262:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001266:	6053      	str	r3, [r2, #4]

	// EOC bit set at end of each sequence of regular conversions
	ADC1->CR2 &= ~ADC_CR2_EOCS;
 8001268:	4b6f      	ldr	r3, [pc, #444]	@ (8001428 <adc1_dma_config+0x260>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	4a6e      	ldr	r2, [pc, #440]	@ (8001428 <adc1_dma_config+0x260>)
 800126e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001272:	6093      	str	r3, [r2, #8]

	// 3 cycles before sample
	ADC1->SMPR2 &= ~(ADC_SMPR2_SMP0 | ADC_SMPR2_SMP1 | ADC_SMPR2_SMP2);
 8001274:	4b6c      	ldr	r3, [pc, #432]	@ (8001428 <adc1_dma_config+0x260>)
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	4a6b      	ldr	r2, [pc, #428]	@ (8001428 <adc1_dma_config+0x260>)
 800127a:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800127e:	f023 0301 	bic.w	r3, r3, #1
 8001282:	6113      	str	r3, [r2, #16]

	// 3 conversions per sequence
	ADC1->SQR1 &= ~ADC_SQR1_L;
 8001284:	4b68      	ldr	r3, [pc, #416]	@ (8001428 <adc1_dma_config+0x260>)
 8001286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001288:	4a67      	ldr	r2, [pc, #412]	@ (8001428 <adc1_dma_config+0x260>)
 800128a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800128e:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC1->SQR1 |= ADC_SQR1_L_1;
 8001290:	4b65      	ldr	r3, [pc, #404]	@ (8001428 <adc1_dma_config+0x260>)
 8001292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001294:	4a64      	ldr	r2, [pc, #400]	@ (8001428 <adc1_dma_config+0x260>)
 8001296:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800129a:	62d3      	str	r3, [r2, #44]	@ 0x2c

	// channel 0 (PA0 --> ADC1_IN0) is first conversion
	ADC1->SQR3 &= ~ADC_SQR3_SQ1;
 800129c:	4b62      	ldr	r3, [pc, #392]	@ (8001428 <adc1_dma_config+0x260>)
 800129e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012a0:	4a61      	ldr	r2, [pc, #388]	@ (8001428 <adc1_dma_config+0x260>)
 80012a2:	f023 031f 	bic.w	r3, r3, #31
 80012a6:	6353      	str	r3, [r2, #52]	@ 0x34

	// channel 1 (PA1 --> ADC1_IN1) is second conversion
	ADC1->SQR3 &= ~ADC_SQR3_SQ2;
 80012a8:	4b5f      	ldr	r3, [pc, #380]	@ (8001428 <adc1_dma_config+0x260>)
 80012aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012ac:	4a5e      	ldr	r2, [pc, #376]	@ (8001428 <adc1_dma_config+0x260>)
 80012ae:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 80012b2:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC1->SQR3 |= ADC_SQR3_SQ2_0;
 80012b4:	4b5c      	ldr	r3, [pc, #368]	@ (8001428 <adc1_dma_config+0x260>)
 80012b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012b8:	4a5b      	ldr	r2, [pc, #364]	@ (8001428 <adc1_dma_config+0x260>)
 80012ba:	f043 0320 	orr.w	r3, r3, #32
 80012be:	6353      	str	r3, [r2, #52]	@ 0x34

	// channel 4 (PA4 --> ADC1_IN4) is third conversion
	ADC1->SQR3 &= ~ADC_SQR3_SQ3;
 80012c0:	4b59      	ldr	r3, [pc, #356]	@ (8001428 <adc1_dma_config+0x260>)
 80012c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012c4:	4a58      	ldr	r2, [pc, #352]	@ (8001428 <adc1_dma_config+0x260>)
 80012c6:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80012ca:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC1->SQR3 |= ADC_SQR3_SQ3_2;
 80012cc:	4b56      	ldr	r3, [pc, #344]	@ (8001428 <adc1_dma_config+0x260>)
 80012ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012d0:	4a55      	ldr	r2, [pc, #340]	@ (8001428 <adc1_dma_config+0x260>)
 80012d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012d6:	6353      	str	r3, [r2, #52]	@ 0x34


	/* DMA2 Channel 0, Stream 0 --> ADC1 */
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;		// enable DMA2 clock
 80012d8:	4b51      	ldr	r3, [pc, #324]	@ (8001420 <adc1_dma_config+0x258>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012dc:	4a50      	ldr	r2, [pc, #320]	@ (8001420 <adc1_dma_config+0x258>)
 80012de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012e2:	6313      	str	r3, [r2, #48]	@ 0x30

	DMA2_Stream0->CR &= ~DMA_SxCR_EN;		// disable stream
 80012e4:	4b52      	ldr	r3, [pc, #328]	@ (8001430 <adc1_dma_config+0x268>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a51      	ldr	r2, [pc, #324]	@ (8001430 <adc1_dma_config+0x268>)
 80012ea:	f023 0301 	bic.w	r3, r3, #1
 80012ee:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream0->CR & DMA_SxCR_EN);	// wait for stream to disable
 80012f0:	bf00      	nop
 80012f2:	4b4f      	ldr	r3, [pc, #316]	@ (8001430 <adc1_dma_config+0x268>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f9      	bne.n	80012f2 <adc1_dma_config+0x12a>

	DMA2_Stream0->PAR = (uint32_t)&(ADC1->DR);// peripheral address
 80012fe:	4b4c      	ldr	r3, [pc, #304]	@ (8001430 <adc1_dma_config+0x268>)
 8001300:	4a4c      	ldr	r2, [pc, #304]	@ (8001434 <adc1_dma_config+0x26c>)
 8001302:	609a      	str	r2, [r3, #8]
	DMA2_Stream0->M0AR = (uint32_t)stream0;	// destination memory address (CT = 0)
 8001304:	4b4a      	ldr	r3, [pc, #296]	@ (8001430 <adc1_dma_config+0x268>)
 8001306:	4a4c      	ldr	r2, [pc, #304]	@ (8001438 <adc1_dma_config+0x270>)
 8001308:	60da      	str	r2, [r3, #12]
	DMA2_Stream0->M1AR = (uint32_t)stream1;	// destination memory address (CT = 1)
 800130a:	4b49      	ldr	r3, [pc, #292]	@ (8001430 <adc1_dma_config+0x268>)
 800130c:	4a4b      	ldr	r2, [pc, #300]	@ (800143c <adc1_dma_config+0x274>)
 800130e:	611a      	str	r2, [r3, #16]
	DMA2_Stream0->NDTR = BLOCK_SIZE;		// number of units to be transmitted
 8001310:	4b47      	ldr	r3, [pc, #284]	@ (8001430 <adc1_dma_config+0x268>)
 8001312:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8001316:	605a      	str	r2, [r3, #4]

	DMA2_Stream0->CR &= ~DMA_SxCR_CHSEL;	// channel 0 selected
 8001318:	4b45      	ldr	r3, [pc, #276]	@ (8001430 <adc1_dma_config+0x268>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a44      	ldr	r2, [pc, #272]	@ (8001430 <adc1_dma_config+0x268>)
 800131e:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8001322:	6013      	str	r3, [r2, #0]

	DMA2_Stream0->CR &= ~DMA_SxCR_PFCTRL;	// DMA is the flow controller
 8001324:	4b42      	ldr	r3, [pc, #264]	@ (8001430 <adc1_dma_config+0x268>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a41      	ldr	r2, [pc, #260]	@ (8001430 <adc1_dma_config+0x268>)
 800132a:	f023 0320 	bic.w	r3, r3, #32
 800132e:	6013      	str	r3, [r2, #0]

	// priority level: medium
	DMA2_Stream0->CR |= DMA_SxCR_PL_0;
 8001330:	4b3f      	ldr	r3, [pc, #252]	@ (8001430 <adc1_dma_config+0x268>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a3e      	ldr	r2, [pc, #248]	@ (8001430 <adc1_dma_config+0x268>)
 8001336:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800133a:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~DMA_SxCR_PL_1;
 800133c:	4b3c      	ldr	r3, [pc, #240]	@ (8001430 <adc1_dma_config+0x268>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a3b      	ldr	r2, [pc, #236]	@ (8001430 <adc1_dma_config+0x268>)
 8001342:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001346:	6013      	str	r3, [r2, #0]

	// disable direct mode
	// FIFO threshold of 1/2 before transfer
	DMA2_Stream0->FCR |= DMA_SxFCR_DMDIS;
 8001348:	4b39      	ldr	r3, [pc, #228]	@ (8001430 <adc1_dma_config+0x268>)
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	4a38      	ldr	r2, [pc, #224]	@ (8001430 <adc1_dma_config+0x268>)
 800134e:	f043 0304 	orr.w	r3, r3, #4
 8001352:	6153      	str	r3, [r2, #20]
	DMA2_Stream0->FCR |= DMA_SxFCR_FTH_0;
 8001354:	4b36      	ldr	r3, [pc, #216]	@ (8001430 <adc1_dma_config+0x268>)
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	4a35      	ldr	r2, [pc, #212]	@ (8001430 <adc1_dma_config+0x268>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	6153      	str	r3, [r2, #20]
	DMA2_Stream0->FCR &= ~DMA_SxFCR_FTH_1;
 8001360:	4b33      	ldr	r3, [pc, #204]	@ (8001430 <adc1_dma_config+0x268>)
 8001362:	695b      	ldr	r3, [r3, #20]
 8001364:	4a32      	ldr	r2, [pc, #200]	@ (8001430 <adc1_dma_config+0x268>)
 8001366:	f023 0302 	bic.w	r3, r3, #2
 800136a:	6153      	str	r3, [r2, #20]

	// memory data size: half word (16 bits)
	DMA2_Stream0->CR |= DMA_SxCR_MSIZE_0;
 800136c:	4b30      	ldr	r3, [pc, #192]	@ (8001430 <adc1_dma_config+0x268>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a2f      	ldr	r2, [pc, #188]	@ (8001430 <adc1_dma_config+0x268>)
 8001372:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001376:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~DMA_SxCR_MSIZE_1;
 8001378:	4b2d      	ldr	r3, [pc, #180]	@ (8001430 <adc1_dma_config+0x268>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a2c      	ldr	r2, [pc, #176]	@ (8001430 <adc1_dma_config+0x268>)
 800137e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001382:	6013      	str	r3, [r2, #0]

	// peripheral data size: half word (16 bits)
	DMA2_Stream0->CR |= DMA_SxCR_PSIZE_0;
 8001384:	4b2a      	ldr	r3, [pc, #168]	@ (8001430 <adc1_dma_config+0x268>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a29      	ldr	r2, [pc, #164]	@ (8001430 <adc1_dma_config+0x268>)
 800138a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800138e:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~DMA_SxCR_PSIZE_1;
 8001390:	4b27      	ldr	r3, [pc, #156]	@ (8001430 <adc1_dma_config+0x268>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a26      	ldr	r2, [pc, #152]	@ (8001430 <adc1_dma_config+0x268>)
 8001396:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800139a:	6013      	str	r3, [r2, #0]

	// increment memory address after every transfer
	DMA2_Stream0->CR |= DMA_SxCR_MINC;
 800139c:	4b24      	ldr	r3, [pc, #144]	@ (8001430 <adc1_dma_config+0x268>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a23      	ldr	r2, [pc, #140]	@ (8001430 <adc1_dma_config+0x268>)
 80013a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013a6:	6013      	str	r3, [r2, #0]

	// disable peripheral address increment
	DMA2_Stream0->CR &= ~DMA_SxCR_PINC;
 80013a8:	4b21      	ldr	r3, [pc, #132]	@ (8001430 <adc1_dma_config+0x268>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a20      	ldr	r2, [pc, #128]	@ (8001430 <adc1_dma_config+0x268>)
 80013ae:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80013b2:	6013      	str	r3, [r2, #0]

	// peripheral to memory data direction
	DMA2_Stream0->CR &= ~DMA_SxCR_DIR;
 80013b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001430 <adc1_dma_config+0x268>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001430 <adc1_dma_config+0x268>)
 80013ba:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80013be:	6013      	str	r3, [r2, #0]

	// circular mode --> reload NDTR after every transfer complete
	DMA2_Stream0->CR |= DMA_SxCR_CIRC;
 80013c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001430 <adc1_dma_config+0x268>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001430 <adc1_dma_config+0x268>)
 80013c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ca:	6013      	str	r3, [r2, #0]

	// double buffer mode; current target is memory 0 (DMA_SxM0AR)
	DMA2_Stream0->CR |= DMA_SxCR_DBM;
 80013cc:	4b18      	ldr	r3, [pc, #96]	@ (8001430 <adc1_dma_config+0x268>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a17      	ldr	r2, [pc, #92]	@ (8001430 <adc1_dma_config+0x268>)
 80013d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013d6:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~DMA_SxCR_CT;
 80013d8:	4b15      	ldr	r3, [pc, #84]	@ (8001430 <adc1_dma_config+0x268>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a14      	ldr	r2, [pc, #80]	@ (8001430 <adc1_dma_config+0x268>)
 80013de:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80013e2:	6013      	str	r3, [r2, #0]


	DMA2_Stream0->CR |= DMA_SxCR_EN;		// enable DMA stream
 80013e4:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <adc1_dma_config+0x268>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a11      	ldr	r2, [pc, #68]	@ (8001430 <adc1_dma_config+0x268>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	6013      	str	r3, [r2, #0]

	ADC1->CR2 |= ADC_CR2_DMA;				// enable DMA
 80013f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001428 <adc1_dma_config+0x260>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001428 <adc1_dma_config+0x260>)
 80013f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013fa:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_DDS;				// DMA requests issued as long as DMA=1
 80013fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <adc1_dma_config+0x260>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	4a09      	ldr	r2, [pc, #36]	@ (8001428 <adc1_dma_config+0x260>)
 8001402:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001406:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_ADON;				// turn on ADC
 8001408:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <adc1_dma_config+0x260>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	4a06      	ldr	r2, [pc, #24]	@ (8001428 <adc1_dma_config+0x260>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	6093      	str	r3, [r2, #8]
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800
 8001424:	40020000 	.word	0x40020000
 8001428:	40012000 	.word	0x40012000
 800142c:	40012300 	.word	0x40012300
 8001430:	40026410 	.word	0x40026410
 8001434:	4001204c 	.word	0x4001204c
 8001438:	20000044 	.word	0x20000044
 800143c:	20000b84 	.word	0x20000b84

08001440 <tim2_trig_config>:

void tim2_trig_config(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;				// enable TIM2 clock
 8001444:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <tim2_trig_config+0x7c>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001448:	4a1c      	ldr	r2, [pc, #112]	@ (80014bc <tim2_trig_config+0x7c>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6413      	str	r3, [r2, #64]	@ 0x40

	TIM2->CR1 &= ~TIM_CR1_DIR;			// upcounting
 8001450:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800145a:	f023 0310 	bic.w	r3, r3, #16
 800145e:	6013      	str	r3, [r2, #0]
	TIM2->PSC = 0;						// /1 prescaler
 8001460:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001464:	2200      	movs	r2, #0
 8001466:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 2099;					// 40kHz frequency
 8001468:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800146c:	f640 0233 	movw	r2, #2099	@ 0x833
 8001470:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM2->CR2 |= TIM_CR2_MMS_1;
 8001472:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800147c:	f043 0320 	orr.w	r3, r3, #32
 8001480:	6053      	str	r3, [r2, #4]
	TIM2->CR2 &= ~(TIM_CR2_MMS_0 | TIM_CR2_MMS_2);		// update event as TRGO
 8001482:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800148c:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8001490:	6053      	str	r3, [r2, #4]

	TIM2->EGR |= TIM_EGR_UG;			// generate update event
 8001492:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6153      	str	r3, [r2, #20]

	TIM2->CR1 |= TIM_CR1_CEN;			// enable counter
 80014a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6013      	str	r3, [r2, #0]
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	40023800 	.word	0x40023800

080014c0 <tim5_time_config>:

void tim5_time_config(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;				// enable TIM2 clock
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <tim5_time_config+0x50>)
 80014c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c8:	4a11      	ldr	r2, [pc, #68]	@ (8001510 <tim5_time_config+0x50>)
 80014ca:	f043 0308 	orr.w	r3, r3, #8
 80014ce:	6413      	str	r3, [r2, #64]	@ 0x40

	TIM5->CR1 &= ~TIM_CR1_DIR;			// upcounting
 80014d0:	4b10      	ldr	r3, [pc, #64]	@ (8001514 <tim5_time_config+0x54>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001514 <tim5_time_config+0x54>)
 80014d6:	f023 0310 	bic.w	r3, r3, #16
 80014da:	6013      	str	r3, [r2, #0]
	TIM5->PSC = 839;					// 100kHz frequency
 80014dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001514 <tim5_time_config+0x54>)
 80014de:	f240 3247 	movw	r2, #839	@ 0x347
 80014e2:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM5->ARR = 0xffffffff;
 80014e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001514 <tim5_time_config+0x54>)
 80014e6:	f04f 32ff 	mov.w	r2, #4294967295
 80014ea:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM5->EGR |= TIM_EGR_UG;			// generate update event
 80014ec:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <tim5_time_config+0x54>)
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	4a08      	ldr	r2, [pc, #32]	@ (8001514 <tim5_time_config+0x54>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6153      	str	r3, [r2, #20]

	TIM5->CR1 |= TIM_CR1_CEN;			// enable counter
 80014f8:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <tim5_time_config+0x54>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a05      	ldr	r2, [pc, #20]	@ (8001514 <tim5_time_config+0x54>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	6013      	str	r3, [r2, #0]
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	40000c00 	.word	0x40000c00

08001518 <stream_splice>:

void stream_splice(void)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < BLOCK_SIZE; i += 3)
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	e065      	b.n	80015f0 <stream_splice+0xd8>
	{
		uint32_t ind = i / 3;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a38      	ldr	r2, [pc, #224]	@ (8001608 <stream_splice+0xf0>)
 8001528:	fba2 2303 	umull	r2, r3, r2, r3
 800152c:	085b      	lsrs	r3, r3, #1
 800152e:	603b      	str	r3, [r7, #0]

		// DMA is targeting M1AR ---> read from M0AR memory
		// TO DO: check ranges of mic0
		if (dma_tgt)
 8001530:	4b36      	ldr	r3, [pc, #216]	@ (800160c <stream_splice+0xf4>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d02c      	beq.n	8001592 <stream_splice+0x7a>
		{
			// convert from uint16_t in range [0, 4095] from ADC to q15_t range [-1, 1]
			mic0_samp[ind] = ((int16_t)stream0[i] - 2048) << 4;
 8001538:	4a35      	ldr	r2, [pc, #212]	@ (8001610 <stream_splice+0xf8>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001540:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001544:	b29b      	uxth	r3, r3
 8001546:	b21b      	sxth	r3, r3
 8001548:	011b      	lsls	r3, r3, #4
 800154a:	b219      	sxth	r1, r3
 800154c:	4a31      	ldr	r2, [pc, #196]	@ (8001614 <stream_splice+0xfc>)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			mic1_samp[ind] = ((int16_t)stream0[i+1] - 2048) << 4;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3301      	adds	r3, #1
 8001558:	4a2d      	ldr	r2, [pc, #180]	@ (8001610 <stream_splice+0xf8>)
 800155a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800155e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001562:	b29b      	uxth	r3, r3
 8001564:	b21b      	sxth	r3, r3
 8001566:	011b      	lsls	r3, r3, #4
 8001568:	b219      	sxth	r1, r3
 800156a:	4a2b      	ldr	r2, [pc, #172]	@ (8001618 <stream_splice+0x100>)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			mic2_samp[ind] = ((int16_t)stream0[i+2] - 2048) << 4;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3302      	adds	r3, #2
 8001576:	4a26      	ldr	r2, [pc, #152]	@ (8001610 <stream_splice+0xf8>)
 8001578:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800157c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001580:	b29b      	uxth	r3, r3
 8001582:	b21b      	sxth	r3, r3
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	b219      	sxth	r1, r3
 8001588:	4a24      	ldr	r2, [pc, #144]	@ (800161c <stream_splice+0x104>)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001590:	e02b      	b.n	80015ea <stream_splice+0xd2>
		}
		else
		{
			mic0_samp[ind] = ((int16_t)stream1[i] - 2048) << 4;
 8001592:	4a23      	ldr	r2, [pc, #140]	@ (8001620 <stream_splice+0x108>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800159a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800159e:	b29b      	uxth	r3, r3
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	b219      	sxth	r1, r3
 80015a6:	4a1b      	ldr	r2, [pc, #108]	@ (8001614 <stream_splice+0xfc>)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			mic1_samp[ind] = ((int16_t)stream1[i+1] - 2048) << 4;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3301      	adds	r3, #1
 80015b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001620 <stream_splice+0x108>)
 80015b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015b8:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80015bc:	b29b      	uxth	r3, r3
 80015be:	b21b      	sxth	r3, r3
 80015c0:	011b      	lsls	r3, r3, #4
 80015c2:	b219      	sxth	r1, r3
 80015c4:	4a14      	ldr	r2, [pc, #80]	@ (8001618 <stream_splice+0x100>)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			mic2_samp[ind] = ((int16_t)stream1[i+2] - 2048) << 4;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3302      	adds	r3, #2
 80015d0:	4a13      	ldr	r2, [pc, #76]	@ (8001620 <stream_splice+0x108>)
 80015d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015d6:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80015da:	b29b      	uxth	r3, r3
 80015dc:	b21b      	sxth	r3, r3
 80015de:	011b      	lsls	r3, r3, #4
 80015e0:	b219      	sxth	r1, r3
 80015e2:	4a0e      	ldr	r2, [pc, #56]	@ (800161c <stream_splice+0x104>)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint32_t i = 0; i < BLOCK_SIZE; i += 3)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3303      	adds	r3, #3
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 80015f6:	d395      	bcc.n	8001524 <stream_splice+0xc>
		}
	}
}
 80015f8:	bf00      	nop
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	aaaaaaab 	.word	0xaaaaaaab
 800160c:	20002204 	.word	0x20002204
 8001610:	20000044 	.word	0x20000044
 8001614:	200016c4 	.word	0x200016c4
 8001618:	20001a84 	.word	0x20001a84
 800161c:	20001e44 	.word	0x20001e44
 8001620:	20000b84 	.word	0x20000b84

08001624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <NMI_Handler+0x4>

0800162c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <HardFault_Handler+0x4>

08001634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <MemManage_Handler+0x4>

0800163c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <BusFault_Handler+0x4>

08001644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <UsageFault_Handler+0x4>

0800164c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800167a:	f001 fe59 	bl	8003330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <SystemInit+0x20>)
 800168a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800168e:	4a05      	ldr	r2, [pc, #20]	@ (80016a4 <SystemInit+0x20>)
 8001690:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001694:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016ac:	f7ff ffea 	bl	8001684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016b0:	480c      	ldr	r0, [pc, #48]	@ (80016e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016b2:	490d      	ldr	r1, [pc, #52]	@ (80016e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016b4:	4a0d      	ldr	r2, [pc, #52]	@ (80016ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b8:	e002      	b.n	80016c0 <LoopCopyDataInit>

080016ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016be:	3304      	adds	r3, #4

080016c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c4:	d3f9      	bcc.n	80016ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016c6:	4a0a      	ldr	r2, [pc, #40]	@ (80016f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016c8:	4c0a      	ldr	r4, [pc, #40]	@ (80016f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016cc:	e001      	b.n	80016d2 <LoopFillZerobss>

080016ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d0:	3204      	adds	r2, #4

080016d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d4:	d3fb      	bcc.n	80016ce <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80016d6:	f001 ffb7 	bl	8003648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016da:	f7ff fa25 	bl	8000b28 <main>
  bx  lr    
 80016de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80016ec:	08003710 	.word	0x08003710
  ldr r2, =_sbss
 80016f0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80016f4:	20005b28 	.word	0x20005b28

080016f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016f8:	e7fe      	b.n	80016f8 <ADC_IRQHandler>

080016fa <arm_correlate_fast_q15>:
  const q15_t * pSrcA,
        uint32_t srcALen,
  const q15_t * pSrcB,
        uint32_t srcBLen,
        q15_t * pDst)
{
 80016fa:	b490      	push	{r4, r7}
 80016fc:	f5ad 7d46 	sub.w	sp, sp, #792	@ 0x318
 8001700:	af00      	add	r7, sp, #0
 8001702:	f507 7446 	add.w	r4, r7, #792	@ 0x318
 8001706:	f5a4 7443 	sub.w	r4, r4, #780	@ 0x30c
 800170a:	6020      	str	r0, [r4, #0]
 800170c:	f507 7046 	add.w	r0, r7, #792	@ 0x318
 8001710:	f5a0 7044 	sub.w	r0, r0, #784	@ 0x310
 8001714:	6001      	str	r1, [r0, #0]
 8001716:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 800171a:	f5a1 7145 	sub.w	r1, r1, #788	@ 0x314
 800171e:	600a      	str	r2, [r1, #0]
 8001720:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 8001724:	f5a2 7246 	sub.w	r2, r2, #792	@ 0x318
 8001728:	6013      	str	r3, [r2, #0]
  const q15_t *pIn1;                                   /* InputA pointer */
  const q15_t *pIn2;                                   /* InputB pointer */
        q15_t *pOut = pDst;                            /* Output pointer */
 800172a:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 800172e:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
  const q15_t *pSrc1;                                  /* Intermediate pointers */
        q31_t x0, x1, x2, x3, c0;                      /* Temporary variables for holding input and coefficient values */
        uint32_t blockSize1, blockSize2, blockSize3;   /* Loop counters */
        uint32_t j, k, count, blkCnt;                  /* Loop counters */
        uint32_t outBlockSize;
        int32_t inc = 1;                               /* Destination address modifier */
 8001732:	2301      	movs	r3, #1
 8001734:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
   * we include zeroes in the output instead of zero padding either of the the inputs*/
  /* If srcALen > srcBLen,
   * (srcALen - srcBLen) zeroes has to included in the starting of the output buffer */
  /* If srcALen < srcBLen,
   * (srcALen - srcBLen) zeroes has to included in the ending of the output buffer */
  if (srcALen >= srcBLen)
 8001738:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800173c:	f5a3 7244 	sub.w	r2, r3, #784	@ 0x310
 8001740:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001744:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8001748:	6812      	ldr	r2, [r2, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	d330      	bcc.n	80017b2 <arm_correlate_fast_q15+0xb8>
  {
    /* Initialization of inputA pointer */
    pIn1 = pSrcA;
 8001750:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001754:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314

    /* Initialization of inputB pointer */
    pIn2 = pSrcB;
 800175e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001762:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310

    /* Number of output samples is calculated */
    outBlockSize = (2U * srcALen) - 1U;
 800176c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001770:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	3b01      	subs	r3, #1
 800177a:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc

    /* When srcALen > srcBLen, zero padding is done to srcB
     * to make their lengths equal.
     * Instead, (outBlockSize - (srcALen + srcBLen - 1))
     * number of output samples are made zero */
    j = outBlockSize - (srcALen + (srcBLen - 1U));
 800177e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001782:	f5a3 7246 	sub.w	r2, r3, #792	@ 0x318
 8001786:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800178a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800178e:	6812      	ldr	r2, [r2, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	f8d7 22cc 	ldr.w	r2, [r7, #716]	@ 0x2cc
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	3301      	adds	r3, #1
 800179c:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0

    /* Updating the pointer position to non zero value */
    pOut += j;
 80017a0:	f8d7 32d0 	ldr.w	r3, [r7, #720]	@ 0x2d0
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 80017aa:	4413      	add	r3, r2
 80017ac:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 80017b0:	e03d      	b.n	800182e <arm_correlate_fast_q15+0x134>

  }
  else
  {
    /* Initialization of inputA pointer */
    pIn1 = pSrcB;
 80017b2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80017b6:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314

    /* Initialization of inputB pointer */
    pIn2 = pSrcA;
 80017c0:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80017c4:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310

    /* srcBLen is always considered as shorter or equal to srcALen */
    j = srcBLen;
 80017ce:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80017d2:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
    srcBLen = srcALen;
 80017dc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80017e0:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 80017e4:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 80017e8:	f5a2 7244 	sub.w	r2, r2, #784	@ 0x310
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	601a      	str	r2, [r3, #0]
    srcALen = j;
 80017f0:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80017f4:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80017f8:	f8d7 22d0 	ldr.w	r2, [r7, #720]	@ 0x2d0
 80017fc:	601a      	str	r2, [r3, #0]

    /* CORR(x, y) = Reverse order(CORR(y, x)) */
    /* Hence set the destination pointer to point to the last output sample */
    pOut = pDst + ((srcALen + srcBLen) - 2U);
 80017fe:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001802:	f5a3 7244 	sub.w	r2, r3, #784	@ 0x310
 8001806:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800180a:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4413      	add	r3, r2
 8001814:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8001818:	3b02      	subs	r3, #2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	f8d7 2320 	ldr.w	r2, [r7, #800]	@ 0x320
 8001820:	4413      	add	r3, r2
 8001822:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c

    /* Destination address modifier is set to -1 */
    inc = -1;
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
 800182a:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
   * In the third stage of the algorithm, the multiplications decrease by one
   * for every iteration. */

  /* The algorithm is implemented in three stages.
     The loop counters of each stage is initiated here. */
  blockSize1 = srcBLen - 1U;
 800182e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001832:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	3b01      	subs	r3, #1
 800183a:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
  blockSize2 = srcALen - (srcBLen - 1U);
 800183e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001842:	f5a3 7244 	sub.w	r2, r3, #784	@ 0x310
 8001846:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800184a:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	3301      	adds	r3, #1
 8001856:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
  blockSize3 = blockSize1;
 800185a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 800185e:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
   * sum = x[0] * y[0] + x[1] * y[1] +...+ x[srcBLen - 1] * y[srcBLen - 1]
   */

  /* In this stage the MAC operations are increased by 1 for every iteration.
     The count variable holds the number of MAC operations performed */
  count = 1U;
 8001862:	2301      	movs	r3, #1
 8001864:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc

  /* Working pointer of inputA */
  px = pIn1;
 8001868:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800186c:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001870:	f8d7 2314 	ldr.w	r2, [r7, #788]	@ 0x314
 8001874:	601a      	str	r2, [r3, #0]

  /* Working pointer of inputB */
  pSrc1 = pIn2 + (srcBLen - 1U);
 8001876:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800187a:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8001884:	3b01      	subs	r3, #1
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	f8d7 2310 	ldr.w	r2, [r7, #784]	@ 0x310
 800188c:	4413      	add	r3, r2
 800188e:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
  py = pSrc1;
 8001892:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001896:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800189a:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 800189e:	601a      	str	r2, [r3, #0]
  /* ------------------------
   * Stage1 process
   * ----------------------*/

  /* The first loop starts here */
  while (blockSize1 > 0U)
 80018a0:	e114      	b.n	8001acc <arm_correlate_fast_q15+0x3d2>
  {
    /* Accumulator is made zero for every iteration */
    sum = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308

    /* Apply loop unrolling and compute 4 MACs simultaneously. */
    k = count >> 2U;
 80018a8:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 80018ac:	089b      	lsrs	r3, r3, #2
 80018ae:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0

    /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
     ** a second loop below computes MACs for the remaining 1 to 3 samples. */
    while (k > 0U)
 80018b2:	e098      	b.n	80019e6 <arm_correlate_fast_q15+0x2ec>
    {
      /* x[0] * y[srcBLen - 4] , x[1] * y[srcBLen - 3] */
      sum = __SMLAD(read_q15x2_ia ((q15_t **) &px), read_q15x2_ia ((q15_t **) &py), sum);
 80018b4:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80018be:	3204      	adds	r2, #4
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	3b04      	subs	r3, #4
 80018c6:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
  q15_t const * pQ15)
{
  q31_t val;

#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (&val, pQ15, 4);
 80018ca:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80018d6:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 80018da:	601a      	str	r2, [r3, #0]
#else
  val = (pQ15[1] << 16) | (pQ15[0] & 0x0FFFF) ;
#endif

  return (val);
 80018dc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80018e0:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4619      	mov	r1, r3
 80018e8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80018f2:	3204      	adds	r2, #4
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	3b04      	subs	r3, #4
 80018fa:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
  memcpy (&val, pQ15, 4);
 80018fe:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	461a      	mov	r2, r3
 8001906:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800190a:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 800190e:	601a      	str	r2, [r3, #0]
  return (val);
 8001910:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001914:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8001920:	f8c7 12a0 	str.w	r1, [r7, #672]	@ 0x2a0
 8001924:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 8001928:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800192c:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001930:	f8d7 229c 	ldr.w	r2, [r7, #668]	@ 0x29c
 8001934:	f8d7 1298 	ldr.w	r1, [r7, #664]	@ 0x298
 8001938:	fb23 1302 	smlad	r3, r3, r2, r1
 800193c:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
  return(result);
 8001940:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8001944:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
      /* x[3] * y[srcBLen - 1] , x[2] * y[srcBLen - 2] */
      sum = __SMLAD(read_q15x2_ia ((q15_t **) &px), read_q15x2_ia ((q15_t **) &py), sum);
 8001948:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001952:	3204      	adds	r2, #4
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	3b04      	subs	r3, #4
 800195a:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
  memcpy (&val, pQ15, 4);
 800195e:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800196a:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 800196e:	601a      	str	r2, [r3, #0]
  return (val);
 8001970:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001974:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4619      	mov	r1, r3
 800197c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001986:	3204      	adds	r2, #4
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	3b04      	subs	r3, #4
 800198e:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
  memcpy (&val, pQ15, 4);
 8001992:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800199e:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80019a2:	601a      	str	r2, [r3, #0]
  return (val);
 80019a4:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80019a8:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 80019b4:	f8c7 12b8 	str.w	r1, [r7, #696]	@ 0x2b8
 80019b8:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 80019bc:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80019c0:	f8d7 32b8 	ldr.w	r3, [r7, #696]	@ 0x2b8
 80019c4:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 80019c8:	f8d7 12b0 	ldr.w	r1, [r7, #688]	@ 0x2b0
 80019cc:	fb23 1302 	smlad	r3, r3, r2, r1
 80019d0:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
  return(result);
 80019d4:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 80019d8:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308

      /* Decrement loop counter */
      k--;
 80019dc:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 80019e0:	3b01      	subs	r3, #1
 80019e2:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
    while (k > 0U)
 80019e6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f47f af62 	bne.w	80018b4 <arm_correlate_fast_q15+0x1ba>
    }

    /* If the count is not a multiple of 4, compute any remaining MACs here.
       No loop unrolling is used. */
    k = count % 0x4U;
 80019f0:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0

    while (k > 0U)
 80019fc:	e036      	b.n	8001a6c <arm_correlate_fast_q15+0x372>
    {
      /* Perform the multiply-accumulates */
      /* x[0] * y[srcBLen - 1] */
      sum = __SMLAD(*px++, *py++, sum);
 80019fe:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001a02:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	1c99      	adds	r1, r3, #2
 8001a0a:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 8001a0e:	f5a2 7228 	sub.w	r2, r2, #672	@ 0x2a0
 8001a12:	6011      	str	r1, [r2, #0]
 8001a14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001a1e:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	1c99      	adds	r1, r3, #2
 8001a26:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 8001a2a:	f5a2 7229 	sub.w	r2, r2, #676	@ 0x2a4
 8001a2e:	6011      	str	r1, [r2, #0]
 8001a30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a34:	461a      	mov	r2, r3
 8001a36:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8001a3a:	f8c7 0288 	str.w	r0, [r7, #648]	@ 0x288
 8001a3e:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 8001a42:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001a46:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
 8001a4a:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8001a4e:	f8d7 1280 	ldr.w	r1, [r7, #640]	@ 0x280
 8001a52:	fb23 1302 	smlad	r3, r3, r2, r1
 8001a56:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
  return(result);
 8001a5a:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8001a5e:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308

      /* Decrement the loop counter */
      k--;
 8001a62:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8001a66:	3b01      	subs	r3, #1
 8001a68:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
    while (k > 0U)
 8001a6c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1c4      	bne.n	80019fe <arm_correlate_fast_q15+0x304>
    }

    /* Store the result in the accumulator in the destination buffer. */
    *pOut = (q15_t) (sum >> 15);
 8001a74:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8001a78:	13db      	asrs	r3, r3, #15
 8001a7a:	b21a      	sxth	r2, r3
 8001a7c:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8001a80:	801a      	strh	r2, [r3, #0]
    /* Destination pointer is updated according to the address modifier, inc */
    pOut += inc;
 8001a82:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 8001a8c:	4413      	add	r3, r2
 8001a8e:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c

    /* Update the inputA and inputB pointers for next MAC calculation */
    py = pSrc1 - count;
 8001a92:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	425b      	negs	r3, r3
 8001a9a:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 8001a9e:	441a      	add	r2, r3
 8001aa0:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001aa4:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001aa8:	601a      	str	r2, [r3, #0]
    px = pIn1;
 8001aaa:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001aae:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001ab2:	f8d7 2314 	ldr.w	r2, [r7, #788]	@ 0x314
 8001ab6:	601a      	str	r2, [r3, #0]

    /* Increment MAC count */
    count++;
 8001ab8:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8001abc:	3301      	adds	r3, #1
 8001abe:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc

    /* Decrement loop counter */
    blockSize1--;
 8001ac2:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
  while (blockSize1 > 0U)
 8001acc:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f47f aee6 	bne.w	80018a2 <arm_correlate_fast_q15+0x1a8>
   * ....
   * sum = x[srcALen-srcBLen-2] * y[0] + x[srcALen-srcBLen-1] * y[1] +...+ x[srcALen-1] * y[srcBLen-1]
   */

  /* Working pointer of inputA */
  px = pIn1;
 8001ad6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001ada:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001ade:	f8d7 2314 	ldr.w	r2, [r7, #788]	@ 0x314
 8001ae2:	601a      	str	r2, [r3, #0]

  /* Working pointer of inputB */
  py = pIn2;
 8001ae4:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001ae8:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001aec:	f8d7 2310 	ldr.w	r2, [r7, #784]	@ 0x310
 8001af0:	601a      	str	r2, [r3, #0]

  /* count is the index by which the pointer pIn1 to be incremented */
  count = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
   * -------------------*/

  /* Stage2 depends on srcBLen as in this stage srcBLen number of MACS are performed.
   * So, to loop unroll over blockSize2,
   * srcBLen should be greater than or equal to 4 */
  if (srcBLen >= 4U)
 8001af8:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001afc:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	f240 87fc 	bls.w	8002b00 <arm_correlate_fast_q15+0x1406>
  {
    /* Loop unroll over blockSize2, by 4 */
    blkCnt = blockSize2 >> 2U;
 8001b08:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 8001b0c:	089b      	lsrs	r3, r3, #2
 8001b0e:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8

    while (blkCnt > 0U)
 8001b12:	f000 bee5 	b.w	80028e0 <arm_correlate_fast_q15+0x11e6>
    {
      /* Set all accumulators to zero */
      acc0 = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
      acc1 = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
      acc2 = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
      acc3 = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8

      /* read x[0], x[1] samples */
      x0 = read_q15x2 ((q15_t *) px);
 8001b2e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001b32:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
  memcpy (&val, pQ15, 4);
 8001b3c:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001b48:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 8001b4c:	601a      	str	r2, [r3, #0]
  return (val);
 8001b4e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001b52:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
      /* read x[1], x[2] samples */
      x1 = read_q15x2 ((q15_t *) px + 1);
 8001b5c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001b60:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	3302      	adds	r3, #2
 8001b68:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
  memcpy (&val, pQ15, 4);
 8001b6c:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001b78:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 8001b7c:	601a      	str	r2, [r3, #0]
  return (val);
 8001b7e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001b82:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
	  px += 2U;
 8001b8c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001b90:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	1d1a      	adds	r2, r3, #4
 8001b98:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001b9c:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001ba0:	601a      	str	r2, [r3, #0]

      /* Apply loop unrolling and compute 4 MACs simultaneously. */
      k = srcBLen >> 2U;
 8001ba2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001ba6:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	089b      	lsrs	r3, r3, #2
 8001bae:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
       ** a second loop below computes MACs for the remaining 1 to 3 samples. */
      do
      {
        /* Read the first two inputB samples using SIMD:
         * y[0] and y[1] */
        c0 = read_q15x2_ia ((q15_t **) &py);
 8001bb2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001bbc:	3204      	adds	r2, #4
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	1f1a      	subs	r2, r3, #4
 8001bc4:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001bc8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001bcc:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8001bce:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001bd2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001be0:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001be4:	601a      	str	r2, [r3, #0]
  return (val);
 8001be6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001bea:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4

        /* acc0 +=  x[0] * y[0] + x[1] * y[1] */
        acc0 = __SMLAD(x0, c0, acc0);
 8001bf4:	f8d7 02f0 	ldr.w	r0, [r7, #752]	@ 0x2f0
 8001bf8:	f8d7 12c4 	ldr.w	r1, [r7, #708]	@ 0x2c4
 8001bfc:	f8d7 2304 	ldr.w	r2, [r7, #772]	@ 0x304
 8001c00:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001c04:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001c08:	6018      	str	r0, [r3, #0]
 8001c0a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001c0e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001c12:	6019      	str	r1, [r3, #0]
 8001c14:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001c18:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001c1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001c1e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001c22:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 8001c2c:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8001c30:	6812      	ldr	r2, [r2, #0]
 8001c32:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 8001c36:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 8001c3a:	6809      	ldr	r1, [r1, #0]
 8001c3c:	fb23 1202 	smlad	r2, r3, r2, r1
 8001c40:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001c44:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001c48:	601a      	str	r2, [r3, #0]
  return(result);
 8001c4a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001c4e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304

        /* acc1 +=  x[1] * y[0] + x[2] * y[1] */
        acc1 = __SMLAD(x1, c0, acc1);
 8001c58:	f8d7 02ec 	ldr.w	r0, [r7, #748]	@ 0x2ec
 8001c5c:	f8d7 12c4 	ldr.w	r1, [r7, #708]	@ 0x2c4
 8001c60:	f8d7 2300 	ldr.w	r2, [r7, #768]	@ 0x300
 8001c64:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001c68:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001c6c:	6018      	str	r0, [r3, #0]
 8001c6e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001c72:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001c76:	6019      	str	r1, [r3, #0]
 8001c78:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001c7c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001c80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001c82:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001c86:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 8001c90:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 8001c94:	6812      	ldr	r2, [r2, #0]
 8001c96:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 8001c9a:	f5a1 7192 	sub.w	r1, r1, #292	@ 0x124
 8001c9e:	6809      	ldr	r1, [r1, #0]
 8001ca0:	fb23 1202 	smlad	r2, r3, r2, r1
 8001ca4:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001ca8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001cac:	601a      	str	r2, [r3, #0]
  return(result);
 8001cae:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001cb2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300

        /* Read x[2], x[3] */
        x2 = read_q15x2 ((q15_t *) px);
 8001cbc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001cc0:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001cca:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001cce:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8001cd0:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001cd4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001ce2:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8001ce6:	601a      	str	r2, [r3, #0]
  return (val);
 8001ce8:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001cec:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0

        /* Read x[3], x[4] */
        x3 = read_q15x2 ((q15_t *) px + 1);
 8001cf6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001cfa:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	1c9a      	adds	r2, r3, #2
 8001d02:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001d06:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d0a:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8001d0c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001d10:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001d1e:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8001d22:	601a      	str	r2, [r3, #0]
  return (val);
 8001d24:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001d28:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc

        /* acc2 +=  x[2] * y[0] + x[3] * y[1] */
        acc2 = __SMLAD(x2, c0, acc2);
 8001d32:	f8d7 02c0 	ldr.w	r0, [r7, #704]	@ 0x2c0
 8001d36:	f8d7 12c4 	ldr.w	r1, [r7, #708]	@ 0x2c4
 8001d3a:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 8001d3e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001d42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d46:	6018      	str	r0, [r3, #0]
 8001d48:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001d4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001d50:	6019      	str	r1, [r3, #0]
 8001d52:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001d56:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001d5c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001d60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 8001d6a:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 8001d74:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8001d78:	6809      	ldr	r1, [r1, #0]
 8001d7a:	fb23 1202 	smlad	r2, r3, r2, r1
 8001d7e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001d82:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d86:	601a      	str	r2, [r3, #0]
  return(result);
 8001d88:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001d8c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc

        /* acc3 +=  x[3] * y[0] + x[4] * y[1] */
        acc3 = __SMLAD(x3, c0, acc3);
 8001d96:	f8d7 12bc 	ldr.w	r1, [r7, #700]	@ 0x2bc
 8001d9a:	f8d7 22c4 	ldr.w	r2, [r7, #708]	@ 0x2c4
 8001d9e:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8001da2:	f8c7 1224 	str.w	r1, [r7, #548]	@ 0x224
 8001da6:	f8c7 2220 	str.w	r2, [r7, #544]	@ 0x220
 8001daa:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001dae:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8001db2:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8001db6:	f8d7 121c 	ldr.w	r1, [r7, #540]	@ 0x21c
 8001dba:	fb23 1202 	smlad	r2, r3, r2, r1
 8001dbe:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001dc2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001dc6:	601a      	str	r2, [r3, #0]
  return(result);
 8001dc8:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001dcc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8

        /* Read y[2] and y[3] */
        c0 = read_q15x2_ia ((q15_t **) &py);
 8001dd6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001de0:	3204      	adds	r2, #4
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	3b04      	subs	r3, #4
 8001de8:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
  memcpy (&val, pQ15, 4);
 8001dec:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001df8:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8001dfc:	601a      	str	r2, [r3, #0]
  return (val);
 8001dfe:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001e02:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4

        /* acc0 +=  x[2] * y[2] + x[3] * y[3] */
        acc0 = __SMLAD(x2, c0, acc0);
 8001e0c:	f8d7 12c0 	ldr.w	r1, [r7, #704]	@ 0x2c0
 8001e10:	f8d7 22c4 	ldr.w	r2, [r7, #708]	@ 0x2c4
 8001e14:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8001e18:	f8c7 1238 	str.w	r1, [r7, #568]	@ 0x238
 8001e1c:	f8c7 2234 	str.w	r2, [r7, #564]	@ 0x234
 8001e20:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001e24:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8001e28:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8001e2c:	f8d7 1230 	ldr.w	r1, [r7, #560]	@ 0x230
 8001e30:	fb23 1302 	smlad	r3, r3, r2, r1
 8001e34:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
  return(result);
 8001e38:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8001e3c:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304

        /* acc1 +=  x[3] * y[2] + x[4] * y[3] */
        acc1 = __SMLAD(x3, c0, acc1);
 8001e40:	f8d7 12bc 	ldr.w	r1, [r7, #700]	@ 0x2bc
 8001e44:	f8d7 22c4 	ldr.w	r2, [r7, #708]	@ 0x2c4
 8001e48:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8001e4c:	f8c7 1248 	str.w	r1, [r7, #584]	@ 0x248
 8001e50:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 8001e54:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001e58:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8001e5c:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8001e60:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
 8001e64:	fb23 1302 	smlad	r3, r3, r2, r1
 8001e68:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  return(result);
 8001e6c:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8001e70:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300

        /* Read x[4], x[5] */
        x0 = read_q15x2 ((q15_t *) px + 2);
 8001e74:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001e78:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	3304      	adds	r3, #4
 8001e80:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
  memcpy (&val, pQ15, 4);
 8001e84:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001e90:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8001e94:	601a      	str	r2, [r3, #0]
  return (val);
 8001e96:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001e9a:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0

        /* Read x[5], x[6] */
        x1 = read_q15x2 ((q15_t *) px + 3);
 8001ea4:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001ea8:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	3306      	adds	r3, #6
 8001eb0:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
  memcpy (&val, pQ15, 4);
 8001eb4:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001ec0:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8001ec4:	601a      	str	r2, [r3, #0]
  return (val);
 8001ec6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001eca:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
		px += 4U;
 8001ed4:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001ed8:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f103 0208 	add.w	r2, r3, #8
 8001ee2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001ee6:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001eea:	601a      	str	r2, [r3, #0]

        /* acc2 +=  x[4] * y[2] + x[5] * y[3] */
        acc2 = __SMLAD(x0, c0, acc2);
 8001eec:	f8d7 12f0 	ldr.w	r1, [r7, #752]	@ 0x2f0
 8001ef0:	f8d7 22c4 	ldr.w	r2, [r7, #708]	@ 0x2c4
 8001ef4:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8001ef8:	f8c7 1260 	str.w	r1, [r7, #608]	@ 0x260
 8001efc:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 8001f00:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001f04:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8001f08:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8001f0c:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8001f10:	fb23 1302 	smlad	r3, r3, r2, r1
 8001f14:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
  return(result);
 8001f18:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8001f1c:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc

        /* acc3 +=  x[5] * y[2] + x[6] * y[3] */
        acc3 = __SMLAD(x1, c0, acc3);
 8001f20:	f8d7 12ec 	ldr.w	r1, [r7, #748]	@ 0x2ec
 8001f24:	f8d7 22c4 	ldr.w	r2, [r7, #708]	@ 0x2c4
 8001f28:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8001f2c:	f8c7 1270 	str.w	r1, [r7, #624]	@ 0x270
 8001f30:	f8c7 226c 	str.w	r2, [r7, #620]	@ 0x26c
 8001f34:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001f38:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 8001f3c:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 8001f40:	f8d7 1268 	ldr.w	r1, [r7, #616]	@ 0x268
 8001f44:	fb23 1302 	smlad	r3, r3, r2, r1
 8001f48:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
  return(result);
 8001f4c:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8001f50:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8

      } while (--k);
 8001f54:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 8001f5e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f47f ae25 	bne.w	8001bb2 <arm_correlate_fast_q15+0x4b8>
      /* For the next MAC operations, SIMD is not used
       * So, the 16 bit pointer if inputB, py is updated */

      /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.
       ** No loop unrolling is used. */
      k = srcBLen % 0x4U;
 8001f68:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001f6c:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0

      if (k == 1U)
 8001f7a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	f040 80fe 	bne.w	8002180 <arm_correlate_fast_q15+0xa86>
      {
        /* Read y[4] */
        c0 = *py;
 8001f84:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001f88:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f92:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4

#ifdef  ARM_MATH_BIG_ENDIAN
        c0 = c0 << 16U;
#else
        c0 = c0 & 0x0000FFFF;
 8001f96:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
#endif /* #ifdef  ARM_MATH_BIG_ENDIAN */

        /* Read x[7] */
        x3 = read_q15x2 ((q15_t *) px);
 8001fa0:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001fa4:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001fae:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001fb2:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8001fb4:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001fb8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001fc6:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8001fca:	601a      	str	r2, [r3, #0]
  return (val);
 8001fcc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001fd0:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
		px++;
 8001fda:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001fde:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	1c9a      	adds	r2, r3, #2
 8001fe6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001fea:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001fee:	601a      	str	r2, [r3, #0]

        /* Perform the multiply-accumulates */
        acc0 = __SMLAD (x0, c0, acc0);
 8001ff0:	f8d7 02f0 	ldr.w	r0, [r7, #752]	@ 0x2f0
 8001ff4:	f8d7 12c4 	ldr.w	r1, [r7, #708]	@ 0x2c4
 8001ff8:	f8d7 2304 	ldr.w	r2, [r7, #772]	@ 0x304
 8001ffc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002000:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002004:	6018      	str	r0, [r3, #0]
 8002006:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800200a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800200e:	6019      	str	r1, [r3, #0]
 8002010:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002014:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002018:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800201a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800201e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 8002028:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 800202c:	6812      	ldr	r2, [r2, #0]
 800202e:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 8002032:	f5a1 71bc 	sub.w	r1, r1, #376	@ 0x178
 8002036:	6809      	ldr	r1, [r1, #0]
 8002038:	fb23 1202 	smlad	r2, r3, r2, r1
 800203c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002040:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8002044:	601a      	str	r2, [r3, #0]
  return(result);
 8002046:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800204a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
        acc1 = __SMLAD (x1, c0, acc1);
 8002054:	f8d7 02ec 	ldr.w	r0, [r7, #748]	@ 0x2ec
 8002058:	f8d7 12c4 	ldr.w	r1, [r7, #708]	@ 0x2c4
 800205c:	f8d7 2300 	ldr.w	r2, [r7, #768]	@ 0x300
 8002060:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002064:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002068:	6018      	str	r0, [r3, #0]
 800206a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800206e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002072:	6019      	str	r1, [r3, #0]
 8002074:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002078:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800207c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800207e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002082:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 800208c:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 8002096:	f5a1 71b4 	sub.w	r1, r1, #360	@ 0x168
 800209a:	6809      	ldr	r1, [r1, #0]
 800209c:	fb23 1202 	smlad	r2, r3, r2, r1
 80020a0:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80020a4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80020a8:	601a      	str	r2, [r3, #0]
  return(result);
 80020aa:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80020ae:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
        acc2 = __SMLADX(x1, c0, acc2);
 80020b8:	f8d7 02ec 	ldr.w	r0, [r7, #748]	@ 0x2ec
 80020bc:	f8d7 12c4 	ldr.w	r1, [r7, #708]	@ 0x2c4
 80020c0:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 80020c4:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80020c8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80020cc:	6018      	str	r0, [r3, #0]
 80020ce:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80020d2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80020d6:	6019      	str	r1, [r3, #0]
 80020d8:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80020dc:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80020e0:	601a      	str	r2, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SMLADX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80020e2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80020e6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 80020f0:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 80020fa:	f5a1 71ac 	sub.w	r1, r1, #344	@ 0x158
 80020fe:	6809      	ldr	r1, [r1, #0]
 8002100:	fb23 1212 	smladx	r2, r3, r2, r1
 8002104:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002108:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800210c:	601a      	str	r2, [r3, #0]
  return(result);
 800210e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002112:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
        acc3 = __SMLADX(x3, c0, acc3);
 800211c:	f8d7 02bc 	ldr.w	r0, [r7, #700]	@ 0x2bc
 8002120:	f8d7 12c4 	ldr.w	r1, [r7, #708]	@ 0x2c4
 8002124:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 8002128:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800212c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002130:	6018      	str	r0, [r3, #0]
 8002132:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002136:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800213a:	6019      	str	r1, [r3, #0]
 800213c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002140:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002144:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002146:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800214a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 8002154:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 800215e:	f5a1 71a4 	sub.w	r1, r1, #328	@ 0x148
 8002162:	6809      	ldr	r1, [r1, #0]
 8002164:	fb23 1212 	smladx	r2, r3, r2, r1
 8002168:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800216c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002170:	601a      	str	r2, [r3, #0]
  return(result);
 8002172:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002176:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
      }

      if (k == 2U)
 8002180:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8002184:	2b02      	cmp	r3, #2
 8002186:	f040 812b 	bne.w	80023e0 <arm_correlate_fast_q15+0xce6>
      {
        /* Read y[4], y[5] */
        c0 = read_q15x2 ((q15_t *) py);
 800218a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800218e:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002198:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800219c:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 800219e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80021a2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80021b0:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 80021b4:	601a      	str	r2, [r3, #0]
  return (val);
 80021b6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80021ba:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4

        /* Read x[7], x[8] */
        x3 = read_q15x2 ((q15_t *) px);
 80021c4:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80021c8:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80021d2:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80021d6:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80021d8:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80021dc:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	461a      	mov	r2, r3
 80021e6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80021ea:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 80021ee:	601a      	str	r2, [r3, #0]
  return (val);
 80021f0:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80021f4:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc

        /* Read x[9] */
        x2 = read_q15x2 ((q15_t *) px + 1);
 80021fe:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002202:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	1c9a      	adds	r2, r3, #2
 800220a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800220e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002212:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8002214:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002218:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002226:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 800222a:	601a      	str	r2, [r3, #0]
  return (val);
 800222c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002230:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
		px += 2U;
 800223a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800223e:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	1d1a      	adds	r2, r3, #4
 8002246:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800224a:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800224e:	601a      	str	r2, [r3, #0]

        /* Perform the multiply-accumulates */
        acc0 = __SMLAD(x0, c0, acc0);
 8002250:	f8d7 02f0 	ldr.w	r0, [r7, #752]	@ 0x2f0
 8002254:	f8d7 12c4 	ldr.w	r1, [r7, #708]	@ 0x2c4
 8002258:	f8d7 2304 	ldr.w	r2, [r7, #772]	@ 0x304
 800225c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002260:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002264:	6018      	str	r0, [r3, #0]
 8002266:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800226a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800226e:	6019      	str	r1, [r3, #0]
 8002270:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002274:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002278:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800227a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800227e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 8002288:	f5a2 72dc 	sub.w	r2, r2, #440	@ 0x1b8
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 8002292:	f5a1 71de 	sub.w	r1, r1, #444	@ 0x1bc
 8002296:	6809      	ldr	r1, [r1, #0]
 8002298:	fb23 1202 	smlad	r2, r3, r2, r1
 800229c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80022a0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80022a4:	601a      	str	r2, [r3, #0]
  return(result);
 80022a6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80022aa:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
        acc1 = __SMLAD(x1, c0, acc1);
 80022b4:	f8d7 02ec 	ldr.w	r0, [r7, #748]	@ 0x2ec
 80022b8:	f8d7 12c4 	ldr.w	r1, [r7, #708]	@ 0x2c4
 80022bc:	f8d7 2300 	ldr.w	r2, [r7, #768]	@ 0x300
 80022c0:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80022c4:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 80022c8:	6018      	str	r0, [r3, #0]
 80022ca:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80022ce:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80022d2:	6019      	str	r1, [r3, #0]
 80022d4:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80022d8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80022dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80022de:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80022e2:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 80022ec:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 80022f6:	f5a1 71d6 	sub.w	r1, r1, #428	@ 0x1ac
 80022fa:	6809      	ldr	r1, [r1, #0]
 80022fc:	fb23 1202 	smlad	r2, r3, r2, r1
 8002300:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002304:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002308:	601a      	str	r2, [r3, #0]
  return(result);
 800230a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800230e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
        acc2 = __SMLAD(x3, c0, acc2);
 8002318:	f8d7 02bc 	ldr.w	r0, [r7, #700]	@ 0x2bc
 800231c:	f8d7 12c4 	ldr.w	r1, [r7, #708]	@ 0x2c4
 8002320:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 8002324:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002328:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800232c:	6018      	str	r0, [r3, #0]
 800232e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002332:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002336:	6019      	str	r1, [r3, #0]
 8002338:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800233c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002340:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002342:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002346:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 8002350:	f5a2 72cc 	sub.w	r2, r2, #408	@ 0x198
 8002354:	6812      	ldr	r2, [r2, #0]
 8002356:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 800235a:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 800235e:	6809      	ldr	r1, [r1, #0]
 8002360:	fb23 1202 	smlad	r2, r3, r2, r1
 8002364:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002368:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800236c:	601a      	str	r2, [r3, #0]
  return(result);
 800236e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002372:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
        acc3 = __SMLAD(x2, c0, acc3);
 800237c:	f8d7 02c0 	ldr.w	r0, [r7, #704]	@ 0x2c0
 8002380:	f8d7 12c4 	ldr.w	r1, [r7, #708]	@ 0x2c4
 8002384:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 8002388:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800238c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002390:	6018      	str	r0, [r3, #0]
 8002392:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002396:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800239a:	6019      	str	r1, [r3, #0]
 800239c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80023a0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80023a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80023a6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80023aa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 80023b4:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 80023be:	f5a1 71c6 	sub.w	r1, r1, #396	@ 0x18c
 80023c2:	6809      	ldr	r1, [r1, #0]
 80023c4:	fb23 1202 	smlad	r2, r3, r2, r1
 80023c8:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80023cc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80023d0:	601a      	str	r2, [r3, #0]
  return(result);
 80023d2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80023d6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
      }

      if (k == 3U)
 80023e0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	f040 8223 	bne.w	8002830 <arm_correlate_fast_q15+0x1136>
      {
        /* Read y[4], y[5] */
        c0 = read_q15x2_ia ((q15_t **) &py);
 80023ea:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80023f4:	3204      	adds	r2, #4
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	1f1a      	subs	r2, r3, #4
 80023fc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002400:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8002404:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8002406:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800240a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002418:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 800241c:	601a      	str	r2, [r3, #0]
  return (val);
 800241e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002422:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4

        /* Read x[7], x[8] */
        x3 = read_q15x2 ((q15_t *) px);
 800242c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002430:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800243a:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800243e:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8002440:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002444:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002452:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8002456:	601a      	str	r2, [r3, #0]
  return (val);
 8002458:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800245c:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc

        /* Read x[9] */
        x2 = read_q15x2 ((q15_t *) px + 1);
 8002466:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800246a:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	1c9a      	adds	r2, r3, #2
 8002472:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002476:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800247a:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 800247c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002480:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	461a      	mov	r2, r3
 800248a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800248e:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8002492:	601a      	str	r2, [r3, #0]
  return (val);
 8002494:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002498:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0

        /* Perform the multiply-accumulates */
        acc0 = __SMLAD(x0, c0, acc0);
 80024a2:	f8d7 02f0 	ldr.w	r0, [r7, #752]	@ 0x2f0
 80024a6:	f8d7 12c4 	ldr.w	r1, [r7, #708]	@ 0x2c4
 80024aa:	f8d7 2304 	ldr.w	r2, [r7, #772]	@ 0x304
 80024ae:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80024b2:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80024b6:	6018      	str	r0, [r3, #0]
 80024b8:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80024bc:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80024c0:	6019      	str	r1, [r3, #0]
 80024c2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80024c6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80024ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80024cc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80024d0:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 80024da:	f5a2 7212 	sub.w	r2, r2, #584	@ 0x248
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 80024e4:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 80024e8:	6809      	ldr	r1, [r1, #0]
 80024ea:	fb23 1202 	smlad	r2, r3, r2, r1
 80024ee:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80024f2:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80024f6:	601a      	str	r2, [r3, #0]
  return(result);
 80024f8:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80024fc:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
        acc1 = __SMLAD(x1, c0, acc1);
 8002506:	f8d7 02ec 	ldr.w	r0, [r7, #748]	@ 0x2ec
 800250a:	f8d7 12c4 	ldr.w	r1, [r7, #708]	@ 0x2c4
 800250e:	f8d7 2300 	ldr.w	r2, [r7, #768]	@ 0x300
 8002512:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002516:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 800251a:	6018      	str	r0, [r3, #0]
 800251c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002520:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8002524:	6019      	str	r1, [r3, #0]
 8002526:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800252a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800252e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002530:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002534:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 800253e:	f5a2 720e 	sub.w	r2, r2, #568	@ 0x238
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 8002548:	f5a1 710f 	sub.w	r1, r1, #572	@ 0x23c
 800254c:	6809      	ldr	r1, [r1, #0]
 800254e:	fb23 1202 	smlad	r2, r3, r2, r1
 8002552:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002556:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800255a:	601a      	str	r2, [r3, #0]
  return(result);
 800255c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002560:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
        acc2 = __SMLAD(x3, c0, acc2);
 800256a:	f8d7 02bc 	ldr.w	r0, [r7, #700]	@ 0x2bc
 800256e:	f8d7 12c4 	ldr.w	r1, [r7, #708]	@ 0x2c4
 8002572:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 8002576:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800257a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800257e:	6018      	str	r0, [r3, #0]
 8002580:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002584:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 8002588:	6019      	str	r1, [r3, #0]
 800258a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800258e:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8002592:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002594:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002598:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 80025a2:	f5a2 720a 	sub.w	r2, r2, #552	@ 0x228
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 80025ac:	f5a1 710b 	sub.w	r1, r1, #556	@ 0x22c
 80025b0:	6809      	ldr	r1, [r1, #0]
 80025b2:	fb23 1202 	smlad	r2, r3, r2, r1
 80025b6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80025ba:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80025be:	601a      	str	r2, [r3, #0]
  return(result);
 80025c0:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80025c4:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
        acc3 = __SMLAD(x2, c0, acc3);
 80025ce:	f8d7 02c0 	ldr.w	r0, [r7, #704]	@ 0x2c0
 80025d2:	f8d7 12c4 	ldr.w	r1, [r7, #708]	@ 0x2c4
 80025d6:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 80025da:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80025de:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80025e2:	6018      	str	r0, [r3, #0]
 80025e4:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80025e8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80025ec:	6019      	str	r1, [r3, #0]
 80025ee:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80025f2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80025f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80025f8:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80025fc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 8002606:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 8002610:	f5a1 7107 	sub.w	r1, r1, #540	@ 0x21c
 8002614:	6809      	ldr	r1, [r1, #0]
 8002616:	fb23 1202 	smlad	r2, r3, r2, r1
 800261a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800261e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002622:	601a      	str	r2, [r3, #0]
  return(result);
 8002624:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002628:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8

        c0 = (*py);
 8002632:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002636:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002640:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
        /* Read y[6] */
#ifdef  ARM_MATH_BIG_ENDIAN
        c0 = c0 << 16U;
#else
        c0 = c0 & 0x0000FFFF;
 8002644:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 8002648:	b29b      	uxth	r3, r3
 800264a:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
#endif /* #ifdef  ARM_MATH_BIG_ENDIAN */

        /* Read x[10] */
        x3 = read_q15x2 ((q15_t *) px + 2);
 800264e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002652:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	1d1a      	adds	r2, r3, #4
 800265a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800265e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002662:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8002664:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002668:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	461a      	mov	r2, r3
 8002672:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002676:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 800267a:	601a      	str	r2, [r3, #0]
  return (val);
 800267c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002680:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
		px += 3U;
 800268a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800268e:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	1d9a      	adds	r2, r3, #6
 8002696:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800269a:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800269e:	601a      	str	r2, [r3, #0]

        /* Perform the multiply-accumulates */
        acc0 = __SMLADX(x1, c0, acc0);
 80026a0:	f8d7 02ec 	ldr.w	r0, [r7, #748]	@ 0x2ec
 80026a4:	f8d7 12c4 	ldr.w	r1, [r7, #708]	@ 0x2c4
 80026a8:	f8d7 2304 	ldr.w	r2, [r7, #772]	@ 0x304
 80026ac:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80026b0:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80026b4:	6018      	str	r0, [r3, #0]
 80026b6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80026ba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026be:	6019      	str	r1, [r3, #0]
 80026c0:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80026c4:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80026c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80026ca:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80026ce:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 80026d8:	f5a2 7201 	sub.w	r2, r2, #516	@ 0x204
 80026dc:	6812      	ldr	r2, [r2, #0]
 80026de:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 80026e2:	f5a1 7102 	sub.w	r1, r1, #520	@ 0x208
 80026e6:	6809      	ldr	r1, [r1, #0]
 80026e8:	fb23 1212 	smladx	r2, r3, r2, r1
 80026ec:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80026f0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80026f4:	601a      	str	r2, [r3, #0]
  return(result);
 80026f6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80026fa:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
        acc1 = __SMLAD (x2, c0, acc1);
 8002704:	f8d7 02c0 	ldr.w	r0, [r7, #704]	@ 0x2c0
 8002708:	f8d7 12c4 	ldr.w	r1, [r7, #708]	@ 0x2c4
 800270c:	f8d7 2300 	ldr.w	r2, [r7, #768]	@ 0x300
 8002710:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002714:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002718:	6018      	str	r0, [r3, #0]
 800271a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800271e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002722:	6019      	str	r1, [r3, #0]
 8002724:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002728:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800272c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800272e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002732:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 800273c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 8002746:	f5a1 71fc 	sub.w	r1, r1, #504	@ 0x1f8
 800274a:	6809      	ldr	r1, [r1, #0]
 800274c:	fb23 1202 	smlad	r2, r3, r2, r1
 8002750:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002754:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002758:	601a      	str	r2, [r3, #0]
  return(result);
 800275a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800275e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
        acc2 = __SMLADX(x2, c0, acc2);
 8002768:	f8d7 02c0 	ldr.w	r0, [r7, #704]	@ 0x2c0
 800276c:	f8d7 12c4 	ldr.w	r1, [r7, #708]	@ 0x2c4
 8002770:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 8002774:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002778:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800277c:	6018      	str	r0, [r3, #0]
 800277e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002782:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002786:	6019      	str	r1, [r3, #0]
 8002788:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800278c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002790:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002792:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002796:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 80027a0:	f5a2 72f2 	sub.w	r2, r2, #484	@ 0x1e4
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 80027aa:	f5a1 71f4 	sub.w	r1, r1, #488	@ 0x1e8
 80027ae:	6809      	ldr	r1, [r1, #0]
 80027b0:	fb23 1212 	smladx	r2, r3, r2, r1
 80027b4:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80027b8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80027bc:	601a      	str	r2, [r3, #0]
  return(result);
 80027be:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80027c2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
        acc3 = __SMLADX(x3, c0, acc3);
 80027cc:	f8d7 02bc 	ldr.w	r0, [r7, #700]	@ 0x2bc
 80027d0:	f8d7 12c4 	ldr.w	r1, [r7, #708]	@ 0x2c4
 80027d4:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 80027d8:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80027dc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80027e0:	6018      	str	r0, [r3, #0]
 80027e2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80027e6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80027ea:	6019      	str	r1, [r3, #0]
 80027ec:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80027f0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80027f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80027f6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80027fa:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 8002804:	f5a2 72ea 	sub.w	r2, r2, #468	@ 0x1d4
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 800280e:	f5a1 71ec 	sub.w	r1, r1, #472	@ 0x1d8
 8002812:	6809      	ldr	r1, [r1, #0]
 8002814:	fb23 1212 	smladx	r2, r3, r2, r1
 8002818:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800281c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002820:	601a      	str	r2, [r3, #0]
  return(result);
 8002822:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002826:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
      }

      /* Store the result in the accumulator in the destination buffer. */
      *pOut = (q15_t) (acc0 >> 15);
 8002830:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8002834:	13db      	asrs	r3, r3, #15
 8002836:	b21a      	sxth	r2, r3
 8002838:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 800283c:	801a      	strh	r2, [r3, #0]
      /* Destination pointer is updated according to the address modifier, inc */
      pOut += inc;
 800283e:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 8002848:	4413      	add	r3, r2
 800284a:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c

      *pOut = (q15_t) (acc1 >> 15);
 800284e:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8002852:	13db      	asrs	r3, r3, #15
 8002854:	b21a      	sxth	r2, r3
 8002856:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 800285a:	801a      	strh	r2, [r3, #0]
      pOut += inc;
 800285c:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 8002866:	4413      	add	r3, r2
 8002868:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c

      *pOut = (q15_t) (acc2 >> 15);
 800286c:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8002870:	13db      	asrs	r3, r3, #15
 8002872:	b21a      	sxth	r2, r3
 8002874:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8002878:	801a      	strh	r2, [r3, #0]
      pOut += inc;
 800287a:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 8002884:	4413      	add	r3, r2
 8002886:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c

      *pOut = (q15_t) (acc3 >> 15);
 800288a:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 800288e:	13db      	asrs	r3, r3, #15
 8002890:	b21a      	sxth	r2, r3
 8002892:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8002896:	801a      	strh	r2, [r3, #0]
      pOut += inc;
 8002898:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 80028a2:	4413      	add	r3, r2
 80028a4:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c

      /* Increment the pointer pIn1 index, count by 4 */
      count += 4U;
 80028a8:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 80028ac:	3304      	adds	r3, #4
 80028ae:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc

      /* Update the inputA and inputB pointers for next MAC calculation */
      px = pIn1 + count;
 80028b2:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	f8d7 2314 	ldr.w	r2, [r7, #788]	@ 0x314
 80028bc:	441a      	add	r2, r3
 80028be:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80028c2:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80028c6:	601a      	str	r2, [r3, #0]
      py = pIn2;
 80028c8:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80028cc:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80028d0:	f8d7 2310 	ldr.w	r2, [r7, #784]	@ 0x310
 80028d4:	601a      	str	r2, [r3, #0]

      /* Decrement loop counter */
      blkCnt--;
 80028d6:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 80028da:	3b01      	subs	r3, #1
 80028dc:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
    while (blkCnt > 0U)
 80028e0:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f47f a916 	bne.w	8001b16 <arm_correlate_fast_q15+0x41c>
    }

    /* If the blockSize2 is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = blockSize2 % 0x4U;
 80028ea:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8

    while (blkCnt > 0U)
 80028f6:	e0fd      	b.n	8002af4 <arm_correlate_fast_q15+0x13fa>
    {
      /* Accumulator is made zero for every iteration */
      sum = 0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308

      /* Apply loop unrolling and compute 4 MACs simultaneously. */
      k = srcBLen >> 2U;
 80028fe:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002902:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	089b      	lsrs	r3, r3, #2
 800290a:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0

      /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
       ** a second loop below computes MACs for the remaining 1 to 3 samples. */
      while (k > 0U)
 800290e:	e08c      	b.n	8002a2a <arm_correlate_fast_q15+0x1330>
      {
        /* Perform the multiply-accumulates */
        sum += ((q31_t) *px++ * *py++);
 8002910:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002914:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	1c99      	adds	r1, r3, #2
 800291c:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 8002920:	f5a2 7228 	sub.w	r2, r2, #672	@ 0x2a0
 8002924:	6011      	str	r1, [r2, #0]
 8002926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800292a:	4618      	mov	r0, r3
 800292c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002930:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	1c99      	adds	r1, r3, #2
 8002938:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 800293c:	f5a2 7229 	sub.w	r2, r2, #676	@ 0x2a4
 8002940:	6011      	str	r1, [r2, #0]
 8002942:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002946:	fb00 f303 	mul.w	r3, r0, r3
 800294a:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 800294e:	4413      	add	r3, r2
 8002950:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
        sum += ((q31_t) *px++ * *py++);
 8002954:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002958:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	1c99      	adds	r1, r3, #2
 8002960:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 8002964:	f5a2 7228 	sub.w	r2, r2, #672	@ 0x2a0
 8002968:	6011      	str	r1, [r2, #0]
 800296a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800296e:	4618      	mov	r0, r3
 8002970:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002974:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	1c99      	adds	r1, r3, #2
 800297c:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 8002980:	f5a2 7229 	sub.w	r2, r2, #676	@ 0x2a4
 8002984:	6011      	str	r1, [r2, #0]
 8002986:	f9b3 3000 	ldrsh.w	r3, [r3]
 800298a:	fb00 f303 	mul.w	r3, r0, r3
 800298e:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 8002992:	4413      	add	r3, r2
 8002994:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
        sum += ((q31_t) *px++ * *py++);
 8002998:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800299c:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	1c99      	adds	r1, r3, #2
 80029a4:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 80029a8:	f5a2 7228 	sub.w	r2, r2, #672	@ 0x2a0
 80029ac:	6011      	str	r1, [r2, #0]
 80029ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80029b8:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	1c99      	adds	r1, r3, #2
 80029c0:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 80029c4:	f5a2 7229 	sub.w	r2, r2, #676	@ 0x2a4
 80029c8:	6011      	str	r1, [r2, #0]
 80029ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ce:	fb00 f303 	mul.w	r3, r0, r3
 80029d2:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 80029d6:	4413      	add	r3, r2
 80029d8:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
        sum += ((q31_t) *px++ * *py++);
 80029dc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80029e0:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	1c99      	adds	r1, r3, #2
 80029e8:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 80029ec:	f5a2 7228 	sub.w	r2, r2, #672	@ 0x2a0
 80029f0:	6011      	str	r1, [r2, #0]
 80029f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80029fc:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	1c99      	adds	r1, r3, #2
 8002a04:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 8002a08:	f5a2 7229 	sub.w	r2, r2, #676	@ 0x2a4
 8002a0c:	6011      	str	r1, [r2, #0]
 8002a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a12:	fb00 f303 	mul.w	r3, r0, r3
 8002a16:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308

        /* Decrement loop counter */
        k--;
 8002a20:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8002a24:	3b01      	subs	r3, #1
 8002a26:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
      while (k > 0U)
 8002a2a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f47f af6e 	bne.w	8002910 <arm_correlate_fast_q15+0x1216>
      }

      /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.
       ** No loop unrolling is used. */
      k = srcBLen % 0x4U;
 8002a34:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002a38:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0

      while (k > 0U)
 8002a46:	e026      	b.n	8002a96 <arm_correlate_fast_q15+0x139c>
      {
        /* Perform the multiply-accumulates */
        sum += ((q31_t) * px++ * *py++);
 8002a48:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002a4c:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	1c99      	adds	r1, r3, #2
 8002a54:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 8002a58:	f5a2 7228 	sub.w	r2, r2, #672	@ 0x2a0
 8002a5c:	6011      	str	r1, [r2, #0]
 8002a5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002a68:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	1c99      	adds	r1, r3, #2
 8002a70:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 8002a74:	f5a2 7229 	sub.w	r2, r2, #676	@ 0x2a4
 8002a78:	6011      	str	r1, [r2, #0]
 8002a7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a7e:	fb00 f303 	mul.w	r3, r0, r3
 8002a82:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 8002a86:	4413      	add	r3, r2
 8002a88:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308

        /* Decrement loop counter */
        k--;
 8002a8c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8002a90:	3b01      	subs	r3, #1
 8002a92:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
      while (k > 0U)
 8002a96:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1d4      	bne.n	8002a48 <arm_correlate_fast_q15+0x134e>
      }

      /* Store the result in the accumulator in the destination buffer. */
      *pOut = (q15_t) (sum >> 15);
 8002a9e:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8002aa2:	13db      	asrs	r3, r3, #15
 8002aa4:	b21a      	sxth	r2, r3
 8002aa6:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8002aaa:	801a      	strh	r2, [r3, #0]
      /* Destination pointer is updated according to the address modifier, inc */
      pOut += inc;
 8002aac:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c

      /* Increment the pointer pIn1 index, count by 1 */
      count++;
 8002abc:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc

      /* Update the inputA and inputB pointers for next MAC calculation */
      px = pIn1 + count;
 8002ac6:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	f8d7 2314 	ldr.w	r2, [r7, #788]	@ 0x314
 8002ad0:	441a      	add	r2, r3
 8002ad2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002ad6:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8002ada:	601a      	str	r2, [r3, #0]
      py = pIn2;
 8002adc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002ae0:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002ae4:	f8d7 2310 	ldr.w	r2, [r7, #784]	@ 0x310
 8002ae8:	601a      	str	r2, [r3, #0]

      /* Decrement loop counter */
      blkCnt--;
 8002aea:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8002aee:	3b01      	subs	r3, #1
 8002af0:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
    while (blkCnt > 0U)
 8002af4:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f47f aefd 	bne.w	80028f8 <arm_correlate_fast_q15+0x11fe>
 8002afe:	e069      	b.n	8002bd4 <arm_correlate_fast_q15+0x14da>
  }
  else
  {
    /* If the srcBLen is not a multiple of 4,
     * the blockSize2 loop cannot be unrolled by 4 */
    blkCnt = blockSize2;
 8002b00:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 8002b04:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8

    while (blkCnt > 0U)
 8002b08:	e060      	b.n	8002bcc <arm_correlate_fast_q15+0x14d2>
    {
      /* Accumulator is made zero for every iteration */
      sum = 0;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308

      /* srcBLen number of MACS should be performed */
      k = srcBLen;
 8002b10:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002b14:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0

      while (k > 0U)
 8002b1e:	e026      	b.n	8002b6e <arm_correlate_fast_q15+0x1474>
      {
        /* Perform the multiply-accumulate */
        sum += ((q31_t) *px++ * *py++);
 8002b20:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002b24:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	1c99      	adds	r1, r3, #2
 8002b2c:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 8002b30:	f5a2 7228 	sub.w	r2, r2, #672	@ 0x2a0
 8002b34:	6011      	str	r1, [r2, #0]
 8002b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002b40:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	1c99      	adds	r1, r3, #2
 8002b48:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 8002b4c:	f5a2 7229 	sub.w	r2, r2, #676	@ 0x2a4
 8002b50:	6011      	str	r1, [r2, #0]
 8002b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b56:	fb00 f303 	mul.w	r3, r0, r3
 8002b5a:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 8002b5e:	4413      	add	r3, r2
 8002b60:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308

        /* Decrement loop counter */
        k--;
 8002b64:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
      while (k > 0U)
 8002b6e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1d4      	bne.n	8002b20 <arm_correlate_fast_q15+0x1426>
      }

      /* Store the result in the accumulator in the destination buffer. */
      *pOut = (q15_t) (sum >> 15);
 8002b76:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8002b7a:	13db      	asrs	r3, r3, #15
 8002b7c:	b21a      	sxth	r2, r3
 8002b7e:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8002b82:	801a      	strh	r2, [r3, #0]
      /* Destination pointer is updated according to the address modifier, inc */
      pOut += inc;
 8002b84:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 8002b8e:	4413      	add	r3, r2
 8002b90:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c

      /* Increment MAC count */
      count++;
 8002b94:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8002b98:	3301      	adds	r3, #1
 8002b9a:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc

      /* Update the inputA and inputB pointers for next MAC calculation */
      px = pIn1 + count;
 8002b9e:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	f8d7 2314 	ldr.w	r2, [r7, #788]	@ 0x314
 8002ba8:	441a      	add	r2, r3
 8002baa:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002bae:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8002bb2:	601a      	str	r2, [r3, #0]
      py = pIn2;
 8002bb4:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002bb8:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002bbc:	f8d7 2310 	ldr.w	r2, [r7, #784]	@ 0x310
 8002bc0:	601a      	str	r2, [r3, #0]

      /* Decrement loop counter */
      blkCnt--;
 8002bc2:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
    while (blkCnt > 0U)
 8002bcc:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d19a      	bne.n	8002b0a <arm_correlate_fast_q15+0x1410>
   * sum +=  x[srcALen-1] * y[0]
   */

  /* In this stage the MAC operations are decreased by 1 for every iteration.
     The count variable holds the number of MAC operations performed */
  count = srcBLen - 1U;
 8002bd4:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002bd8:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc

  /* Working pointer of inputA */
  pSrc1 = (pIn1 + srcALen) - (srcBLen - 1U);
 8002be4:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002be8:	f5a3 7244 	sub.w	r2, r3, #784	@ 0x310
 8002bec:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002bf0:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8002bf4:	6812      	ldr	r2, [r2, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	f8d7 2314 	ldr.w	r2, [r7, #788]	@ 0x314
 8002c02:	4413      	add	r3, r2
 8002c04:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
  px = pSrc1;
 8002c08:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002c0c:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8002c10:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 8002c14:	601a      	str	r2, [r3, #0]

  /* Working pointer of inputB */
  py = pIn2;
 8002c16:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002c1a:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002c1e:	f8d7 2310 	ldr.w	r2, [r7, #784]	@ 0x310
 8002c22:	601a      	str	r2, [r3, #0]

  /* -------------------
   * Stage3 process
   * ------------------*/

  while (blockSize3 > 0U)
 8002c24:	e174      	b.n	8002f10 <arm_correlate_fast_q15+0x1816>
  {
    /* Accumulator is made zero for every iteration */
    sum = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308

    /* Apply loop unrolling and compute 4 MACs simultaneously. */
    k = count >> 2U;
 8002c2c:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8002c30:	089b      	lsrs	r3, r3, #2
 8002c32:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0

    /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
     ** a second loop below computes MACs for the remaining 1 to 3 samples. */
    while (k > 0U)
 8002c36:	e0e0      	b.n	8002dfa <arm_correlate_fast_q15+0x1700>
    {
      /* Perform the multiply-accumulates */
      /* sum += x[srcALen - srcBLen + 4] * y[3] , sum += x[srcALen - srcBLen + 3] * y[2] */
      sum = __SMLAD(read_q15x2_ia ((q15_t **) &px), read_q15x2_ia ((q15_t **) &py), sum);
 8002c38:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002c42:	3204      	adds	r2, #4
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	1f1a      	subs	r2, r3, #4
 8002c4a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002c4e:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8002c52:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8002c54:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002c58:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	461a      	mov	r2, r3
 8002c62:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002c66:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8002c6a:	601a      	str	r2, [r3, #0]
  return (val);
 8002c6c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002c70:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002c82:	3204      	adds	r2, #4
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	1f1a      	subs	r2, r3, #4
 8002c8a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002c8e:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8002c92:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8002c94:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002c98:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002ca6:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002caa:	601a      	str	r2, [r3, #0]
  return (val);
 8002cac:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002cb0:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 8002cbc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002cc0:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8002cc4:	6018      	str	r0, [r3, #0]
 8002cc6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002cca:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8002cce:	6019      	str	r1, [r3, #0]
 8002cd0:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002cd4:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8002cd8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002cda:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002cde:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 8002ce8:	f5a2 721f 	sub.w	r2, r2, #636	@ 0x27c
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 8002cf2:	f5a1 7120 	sub.w	r1, r1, #640	@ 0x280
 8002cf6:	6809      	ldr	r1, [r1, #0]
 8002cf8:	fb23 1202 	smlad	r2, r3, r2, r1
 8002cfc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002d00:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8002d04:	601a      	str	r2, [r3, #0]
  return(result);
 8002d06:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002d0a:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
      /* sum += x[srcALen - srcBLen + 2] * y[1] , sum += x[srcALen - srcBLen + 1] * y[0] */
      sum = __SMLAD(read_q15x2_ia ((q15_t **) &px), read_q15x2_ia ((q15_t **) &py), sum);
 8002d14:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002d1e:	3204      	adds	r2, #4
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	1f1a      	subs	r2, r3, #4
 8002d26:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002d2a:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8002d2e:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8002d30:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002d34:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002d42:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002d46:	601a      	str	r2, [r3, #0]
  return (val);
 8002d48:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002d4c:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002d5e:	3204      	adds	r2, #4
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	1f1a      	subs	r2, r3, #4
 8002d66:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002d6a:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8002d6e:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8002d70:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002d74:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002d82:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002d86:	601a      	str	r2, [r3, #0]
  return (val);
 8002d88:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002d8c:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4619      	mov	r1, r3
 8002d94:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 8002d98:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002d9c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002da0:	6018      	str	r0, [r3, #0]
 8002da2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002da6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8002daa:	6019      	str	r1, [r3, #0]
 8002dac:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002db0:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8002db4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002db6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002dba:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 8002dc4:	f5a2 7219 	sub.w	r2, r2, #612	@ 0x264
 8002dc8:	6812      	ldr	r2, [r2, #0]
 8002dca:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 8002dce:	f5a1 711a 	sub.w	r1, r1, #616	@ 0x268
 8002dd2:	6809      	ldr	r1, [r1, #0]
 8002dd4:	fb23 1202 	smlad	r2, r3, r2, r1
 8002dd8:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002ddc:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8002de0:	601a      	str	r2, [r3, #0]
  return(result);
 8002de2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002de6:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308

      /* Decrement loop counter */
      k--;
 8002df0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8002df4:	3b01      	subs	r3, #1
 8002df6:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
    while (k > 0U)
 8002dfa:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f47f af1a 	bne.w	8002c38 <arm_correlate_fast_q15+0x153e>
    }

    /* If the count is not a multiple of 4, compute any remaining MACs here.
     ** No loop unrolling is used. */
    k = count % 0x4U;
 8002e04:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0

    while (k > 0U)
 8002e10:	e04e      	b.n	8002eb0 <arm_correlate_fast_q15+0x17b6>
    {
      /* Perform the multiply-accumulates */
      sum = __SMLAD(*px++, *py++, sum);
 8002e12:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002e16:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	1c99      	adds	r1, r3, #2
 8002e1e:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 8002e22:	f5a2 7228 	sub.w	r2, r2, #672	@ 0x2a0
 8002e26:	6011      	str	r1, [r2, #0]
 8002e28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002e32:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	1c99      	adds	r1, r3, #2
 8002e3a:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 8002e3e:	f5a2 7229 	sub.w	r2, r2, #676	@ 0x2a4
 8002e42:	6011      	str	r1, [r2, #0]
 8002e44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e48:	4619      	mov	r1, r3
 8002e4a:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 8002e4e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002e52:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8002e56:	6018      	str	r0, [r3, #0]
 8002e58:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002e5c:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8002e60:	6019      	str	r1, [r3, #0]
 8002e62:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002e66:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8002e6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002e6c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002e70:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 8002e7a:	f5a2 7225 	sub.w	r2, r2, #660	@ 0x294
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 8002e84:	f5a1 7126 	sub.w	r1, r1, #664	@ 0x298
 8002e88:	6809      	ldr	r1, [r1, #0]
 8002e8a:	fb23 1202 	smlad	r2, r3, r2, r1
 8002e8e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002e92:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8002e96:	601a      	str	r2, [r3, #0]
  return(result);
 8002e98:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002e9c:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308

      /* Decrement loop counter */
      k--;
 8002ea6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
    while (k > 0U)
 8002eb0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1ac      	bne.n	8002e12 <arm_correlate_fast_q15+0x1718>
    }

    /* Store the result in the accumulator in the destination buffer. */
    *pOut = (q15_t) (sum >> 15);
 8002eb8:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8002ebc:	13db      	asrs	r3, r3, #15
 8002ebe:	b21a      	sxth	r2, r3
 8002ec0:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8002ec4:	801a      	strh	r2, [r3, #0]
    /* Destination pointer is updated according to the address modifier, inc */
    pOut += inc;
 8002ec6:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c

    /* Update the inputA and inputB pointers for next MAC calculation */
    px = ++pSrc1;
 8002ed6:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8002eda:	3302      	adds	r3, #2
 8002edc:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 8002ee0:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002ee4:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8002ee8:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 8002eec:	601a      	str	r2, [r3, #0]
    py = pIn2;
 8002eee:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002ef2:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002ef6:	f8d7 2310 	ldr.w	r2, [r7, #784]	@ 0x310
 8002efa:	601a      	str	r2, [r3, #0]

    /* Decrement the MAC count */
    count--;
 8002efc:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8002f00:	3b01      	subs	r3, #1
 8002f02:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc

    /* Decrement the loop counter */
    blockSize3--;
 8002f06:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
  while (blockSize3 > 0U)
 8002f10:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f47f ae86 	bne.w	8002c26 <arm_correlate_fast_q15+0x152c>
  }

}
 8002f1a:	bf00      	nop
 8002f1c:	bf00      	nop
 8002f1e:	f507 7746 	add.w	r7, r7, #792	@ 0x318
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc90      	pop	{r4, r7}
 8002f26:	4770      	bx	lr

08002f28 <arm_fir_fast_q15>:
ARM_DSP_ATTRIBUTE void arm_fir_fast_q15(
  const arm_fir_instance_q15 * S,
  const q15_t * pSrc,
        q15_t * pDst,
        uint32_t blockSize)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b091      	sub	sp, #68	@ 0x44
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	603b      	str	r3, [r7, #0]
        q15_t *pState = S->pState;                     /* State pointer */
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const q15_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	623b      	str	r3, [r7, #32]
        q15_t *pStateCurnt;                            /* Points to the current sample of the state */
        q15_t *px;                                     /* Temporary pointer for state buffer */
  const q15_t *pb;                                     /* Temporary pointer for coefficient buffer */
        q31_t acc0;                                    /* Accumulators */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	61fb      	str	r3, [r7, #28]
        q31_t x0, x1, x2, c0;                          /* Temporary variables to hold state and coefficient values */
#endif

  /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
  /* pStateCurnt points to the location where the new input data should be written */
  pStateCurnt = &(S->pState[(numTaps - 1U)]);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8002f52:	3b01      	subs	r3, #1
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	4413      	add	r3, r2
 8002f58:	63bb      	str	r3, [r7, #56]	@ 0x38
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of taps */
  blkCnt = blockSize;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8002f5e:	e04a      	b.n	8002ff6 <arm_fir_fast_q15+0xce>
  {
    /* Copy two samples into state buffer */
    *pStateCurnt++ = *pSrc++;
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	1c93      	adds	r3, r2, #2
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f68:	1c99      	adds	r1, r3, #2
 8002f6a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002f6c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002f70:	801a      	strh	r2, [r3, #0]

    /* Set the accumulator to zero */
    acc0 = 0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Use SIMD to hold states and coefficients */
    px = pState;
 8002f76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f78:	637b      	str	r3, [r7, #52]	@ 0x34
    pb = pCoeffs;
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	633b      	str	r3, [r7, #48]	@ 0x30

    tapCnt = numTaps >> 1U;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	085b      	lsrs	r3, r3, #1
 8002f82:	62bb      	str	r3, [r7, #40]	@ 0x28

    do
    {
      acc0 += (q31_t) *px++ * *pb++;
 8002f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f86:	1c9a      	adds	r2, r3, #2
 8002f88:	637a      	str	r2, [r7, #52]	@ 0x34
 8002f8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f8e:	4619      	mov	r1, r3
 8002f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f92:	1c9a      	adds	r2, r3, #2
 8002f94:	633a      	str	r2, [r7, #48]	@ 0x30
 8002f96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f9a:	fb01 f303 	mul.w	r3, r1, r3
 8002f9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fa0:	4413      	add	r3, r2
 8002fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  acc0 += (q31_t) *px++ * *pb++;
 8002fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa6:	1c9a      	adds	r2, r3, #2
 8002fa8:	637a      	str	r2, [r7, #52]	@ 0x34
 8002faa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fae:	4619      	mov	r1, r3
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb2:	1c9a      	adds	r2, r3, #2
 8002fb4:	633a      	str	r2, [r7, #48]	@ 0x30
 8002fb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fba:	fb01 f303 	mul.w	r3, r1, r3
 8002fbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fc0:	4413      	add	r3, r2
 8002fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

      tapCnt--;
 8002fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
    while (tapCnt > 0U);
 8002fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1d9      	bne.n	8002f84 <arm_fir_fast_q15+0x5c>

    /* The result is in 2.30 format. Convert to 1.15 with saturation.
       Then store the output in the destination buffer. */
    *pDst++ = (q15_t) (__SSAT((acc0 >> 15), 16));
 8002fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fd2:	13db      	asrs	r3, r3, #15
 8002fd4:	61bb      	str	r3, [r7, #24]
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	f303 030f 	ssat	r3, #16, r3
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	6979      	ldr	r1, [r7, #20]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	1c9a      	adds	r2, r3, #2
 8002fe4:	607a      	str	r2, [r7, #4]
 8002fe6:	b20a      	sxth	r2, r1
 8002fe8:	801a      	strh	r2, [r3, #0]

    /* Advance state pointer by 1 for the next sample */
    pState = pState + 1U;
 8002fea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fec:	3302      	adds	r3, #2
 8002fee:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Decrement loop counter */
    blkCnt--;
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (blkCnt > 0U)
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1b1      	bne.n	8002f60 <arm_fir_fast_q15+0x38>
  /* Processing is complete.
     Now copy the last numTaps - 1 samples to the start of the state buffer.
     This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCurnt = S->pState;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	63bb      	str	r3, [r7, #56]	@ 0x38
  tapCnt = (numTaps - 1U) % 0x4U;

#else

  /* Initialize tapCnt with number of taps */
  tapCnt = (numTaps - 1U);
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3b01      	subs	r3, #1
 8003006:	62bb      	str	r3, [r7, #40]	@ 0x28

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy remaining data */
  while (tapCnt > 0U)
 8003008:	e00b      	b.n	8003022 <arm_fir_fast_q15+0xfa>
  {
    *pStateCurnt++ = *pState++;
 800300a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800300c:	1c93      	adds	r3, r2, #2
 800300e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003012:	1c99      	adds	r1, r3, #2
 8003014:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003016:	f9b2 2000 	ldrsh.w	r2, [r2]
 800301a:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    tapCnt--;
 800301c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800301e:	3b01      	subs	r3, #1
 8003020:	62bb      	str	r3, [r7, #40]	@ 0x28
  while (tapCnt > 0U)
 8003022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1f0      	bne.n	800300a <arm_fir_fast_q15+0xe2>
  }

}
 8003028:	bf00      	nop
 800302a:	bf00      	nop
 800302c:	3744      	adds	r7, #68	@ 0x44
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <arm_fir_init_q15>:
        arm_fir_instance_q15 * S,
        uint16_t numTaps,
  const q15_t * pCoeffs,
        q15_t * pState,
        uint32_t blockSize)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b086      	sub	sp, #24
 800303a:	af00      	add	r7, sp, #0
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	607a      	str	r2, [r7, #4]
 8003040:	603b      	str	r3, [r7, #0]
 8003042:	460b      	mov	r3, r1
 8003044:	817b      	strh	r3, [r7, #10]
  arm_status status;

#if defined (ARM_MATH_DSP)

  /* The Number of filter coefficients in the filter must be even and at least 4 */
  if (numTaps & 0x1U)
 8003046:	897b      	ldrh	r3, [r7, #10]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <arm_fir_init_q15+0x20>
  {
    status = ARM_MATH_ARGUMENT_ERROR;
 8003050:	23ff      	movs	r3, #255	@ 0xff
 8003052:	75fb      	strb	r3, [r7, #23]
 8003054:	e013      	b.n	800307e <arm_fir_init_q15+0x48>
  }
  else
  {
    /* Assign filter taps */
    S->numTaps = numTaps;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	897a      	ldrh	r2, [r7, #10]
 800305a:	801a      	strh	r2, [r3, #0]

    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	609a      	str	r2, [r3, #8]

    /* Clear the state buffer.  The size is always (blockSize + numTaps ) */
    memset(pState, 0, (numTaps + (blockSize)) * sizeof(q15_t));
 8003062:	897a      	ldrh	r2, [r7, #10]
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	4413      	add	r3, r2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	461a      	mov	r2, r3
 800306c:	2100      	movs	r1, #0
 800306e:	6838      	ldr	r0, [r7, #0]
 8003070:	f000 fae2 	bl	8003638 <memset>

    /* Assign state pointer */
    S->pState = pState;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	605a      	str	r2, [r3, #4]

    status = ARM_MATH_SUCCESS;
 800307a:	2300      	movs	r3, #0
 800307c:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 800307e:	f997 3017 	ldrsb.w	r3, [r7, #23]

  return (status);

#endif /* #if defined (ARM_MATH_DSP) */

}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <arm_absmax_q15>:
ARM_DSP_ATTRIBUTE void arm_absmax_q15(
  const q15_t * pSrc,
        uint32_t blockSize,
        q15_t * pResult,
        uint32_t * pIndex)
{
 800308a:	b480      	push	{r7}
 800308c:	b09d      	sub	sp, #116	@ 0x74
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	607a      	str	r2, [r7, #4]
 8003096:	603b      	str	r3, [r7, #0]
        q15_t cur_absmax, out;                     /* Temporary variables to store the output value. */\
        uint32_t blkCnt, outIndex;                     /* Loop counter */                                   \
        uint32_t index;                                /* index of maximum value */                         \
                                                                                                            \
  /* Initialize index value to zero. */                                                                     \
  outIndex = 0U;                                                                                            \
 8003098:	2300      	movs	r3, #0
 800309a:	667b      	str	r3, [r7, #100]	@ 0x64
  /* Load first input value that act as reference value for comparison */                                  \
  out = *pSrc++;                                                                                            \
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	1c9a      	adds	r2, r3, #2
 80030a0:	60fa      	str	r2, [r7, #12]
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  out = (out > 0) ? out : (q15_t)__QSUB16(0, out);                                                                           \
 80030a8:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	dc0c      	bgt.n	80030ca <arm_absmax_q15+0x40>
 80030b0:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 80030b4:	2200      	movs	r2, #0
 80030b6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80030b8:	657b      	str	r3, [r7, #84]	@ 0x54
  __ASM ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80030ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80030be:	fad3 f312 	qsub16	r3, r3, r2
 80030c2:	653b      	str	r3, [r7, #80]	@ 0x50
  return(result);
 80030c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030c6:	b21b      	sxth	r3, r3
 80030c8:	e001      	b.n	80030ce <arm_absmax_q15+0x44>
 80030ca:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 80030ce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  /* Initialize index of extrema value. */                                                                  \
  index = 0U;                                                                                               \
 80030d2:	2300      	movs	r3, #0
 80030d4:	663b      	str	r3, [r7, #96]	@ 0x60
                                                                                                            \
  /* Loop unrolling: Compute 4 outputs at a time */                                                         \
  blkCnt = (blockSize - 1U) >> 2U;                                                                          \
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	3b01      	subs	r3, #1
 80030da:	089b      	lsrs	r3, r3, #2
 80030dc:	66bb      	str	r3, [r7, #104]	@ 0x68
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 80030de:	e0a5      	b.n	800322c <arm_absmax_q15+0x1a2>
  {                                                                                                         \
    /* Initialize cur_absmax to next consecutive values one by one */                                         \
    cur_absmax = *pSrc++;                                                                                     \
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	1c9a      	adds	r2, r3, #2
 80030e4:	60fa      	str	r2, [r7, #12]
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 80030ec:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	dc0c      	bgt.n	800310e <arm_absmax_q15+0x84>
 80030f4:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80030f8:	2200      	movs	r2, #0
 80030fa:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80030fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80030fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003100:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003102:	fad3 f312 	qsub16	r3, r3, r2
 8003106:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8003108:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800310a:	b21b      	sxth	r3, r3
 800310c:	e001      	b.n	8003112 <arm_absmax_q15+0x88>
 800310e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8003112:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    /* compare for the extrema value */                                                                     \
    if (cur_absmax > out)                                                                         \
 8003116:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 800311a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800311e:	429a      	cmp	r2, r3
 8003120:	dd06      	ble.n	8003130 <arm_absmax_q15+0xa6>
    {                                                                                                       \
      /* Update the extrema value and it's index */                                                         \
      out = cur_absmax;                                                                                       \
 8003122:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8003126:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = index + 1U;                                                                                \
 800312a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800312c:	3301      	adds	r3, #1
 800312e:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	1c9a      	adds	r2, r3, #2
 8003134:	60fa      	str	r2, [r7, #12]
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 800313c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8003140:	2b00      	cmp	r3, #0
 8003142:	dc0c      	bgt.n	800315e <arm_absmax_q15+0xd4>
 8003144:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8003148:	2200      	movs	r2, #0
 800314a:	643a      	str	r2, [r7, #64]	@ 0x40
 800314c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800314e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003150:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003152:	fad3 f312 	qsub16	r3, r3, r2
 8003156:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8003158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800315a:	b21b      	sxth	r3, r3
 800315c:	e001      	b.n	8003162 <arm_absmax_q15+0xd8>
 800315e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8003162:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    if (cur_absmax > out)                                                                         \
 8003166:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 800316a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800316e:	429a      	cmp	r2, r3
 8003170:	dd06      	ble.n	8003180 <arm_absmax_q15+0xf6>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8003172:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8003176:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = index + 2U;                                                                                \
 800317a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800317c:	3302      	adds	r3, #2
 800317e:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	1c9a      	adds	r2, r3, #2
 8003184:	60fa      	str	r2, [r7, #12]
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 800318c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8003190:	2b00      	cmp	r3, #0
 8003192:	dc0c      	bgt.n	80031ae <arm_absmax_q15+0x124>
 8003194:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8003198:	2200      	movs	r2, #0
 800319a:	637a      	str	r2, [r7, #52]	@ 0x34
 800319c:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800319e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031a2:	fad3 f312 	qsub16	r3, r3, r2
 80031a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80031a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031aa:	b21b      	sxth	r3, r3
 80031ac:	e001      	b.n	80031b2 <arm_absmax_q15+0x128>
 80031ae:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80031b2:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    if (cur_absmax > out)                                                                          \
 80031b6:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 80031ba:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 80031be:	429a      	cmp	r2, r3
 80031c0:	dd06      	ble.n	80031d0 <arm_absmax_q15+0x146>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 80031c2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80031c6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = index + 3U;                                                                                \
 80031ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031cc:	3303      	adds	r3, #3
 80031ce:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	1c9a      	adds	r2, r3, #2
 80031d4:	60fa      	str	r2, [r7, #12]
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 80031dc:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	dc0c      	bgt.n	80031fe <arm_absmax_q15+0x174>
 80031e4:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80031e8:	2200      	movs	r2, #0
 80031ea:	62ba      	str	r2, [r7, #40]	@ 0x28
 80031ec:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80031ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031f2:	fad3 f312 	qsub16	r3, r3, r2
 80031f6:	623b      	str	r3, [r7, #32]
  return(result);
 80031f8:	6a3b      	ldr	r3, [r7, #32]
 80031fa:	b21b      	sxth	r3, r3
 80031fc:	e001      	b.n	8003202 <arm_absmax_q15+0x178>
 80031fe:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8003202:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    if (cur_absmax > out)                                                                          \
 8003206:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 800320a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800320e:	429a      	cmp	r2, r3
 8003210:	dd06      	ble.n	8003220 <arm_absmax_q15+0x196>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8003212:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8003216:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = index + 4U;                                                                                \
 800321a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800321c:	3304      	adds	r3, #4
 800321e:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    index += 4U;                                                                                            \
 8003220:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003222:	3304      	adds	r3, #4
 8003224:	663b      	str	r3, [r7, #96]	@ 0x60
                                                                                                            \
    /* Decrement loop counter */                                                                            \
    blkCnt--;                                                                                               \
 8003226:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003228:	3b01      	subs	r3, #1
 800322a:	66bb      	str	r3, [r7, #104]	@ 0x68
  while (blkCnt > 0U)                                                                                       \
 800322c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800322e:	2b00      	cmp	r3, #0
 8003230:	f47f af56 	bne.w	80030e0 <arm_absmax_q15+0x56>
  }                                                                                                         \
                                                                                                            \
  /* Loop unrolling: Compute remaining outputs */                                                           \
  blkCnt = (blockSize - 1U) % 4U;                                                                           \
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	3b01      	subs	r3, #1
 8003238:	f003 0303 	and.w	r3, r3, #3
 800323c:	66bb      	str	r3, [r7, #104]	@ 0x68
                                                                                                            \
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 800323e:	e02b      	b.n	8003298 <arm_absmax_q15+0x20e>
  {                                                                                                         \
    cur_absmax = *pSrc++;                                                                                     \
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	1c9a      	adds	r2, r3, #2
 8003244:	60fa      	str	r2, [r7, #12]
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 800324c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8003250:	2b00      	cmp	r3, #0
 8003252:	dc0c      	bgt.n	800326e <arm_absmax_q15+0x1e4>
 8003254:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8003258:	2200      	movs	r2, #0
 800325a:	61fa      	str	r2, [r7, #28]
 800325c:	61bb      	str	r3, [r7, #24]
  __ASM ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	fad3 f312 	qsub16	r3, r3, r2
 8003266:	617b      	str	r3, [r7, #20]
  return(result);
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	b21b      	sxth	r3, r3
 800326c:	e001      	b.n	8003272 <arm_absmax_q15+0x1e8>
 800326e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8003272:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    if (cur_absmax > out)                                                                         \
 8003276:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 800327a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800327e:	429a      	cmp	r2, r3
 8003280:	dd07      	ble.n	8003292 <arm_absmax_q15+0x208>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8003282:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8003286:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = blockSize - blkCnt;                                                                        \
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    /* Decrement loop counter */                                                                            \
    blkCnt--;                                                                                               \
 8003292:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003294:	3b01      	subs	r3, #1
 8003296:	66bb      	str	r3, [r7, #104]	@ 0x68
  while (blkCnt > 0U)                                                                                       \
 8003298:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1d0      	bne.n	8003240 <arm_absmax_q15+0x1b6>
  }                                                                                                         \
                                                                                                            \
  /* Store the extrema value and it's index into destination pointers */                                    \
  *pResult = out;                                                                                           \
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80032a4:	801a      	strh	r2, [r3, #0]
  *pIndex = outIndex;  
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80032aa:	601a      	str	r2, [r3, #0]
}
 80032ac:	bf00      	nop
 80032ae:	3774      	adds	r7, #116	@ 0x74
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <arm_copy_q15>:
#else
ARM_DSP_ATTRIBUTE void arm_copy_q15(
  const q15_t * pSrc,
        q15_t * pDst,
        uint32_t blockSize)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80032c8:	e00b      	b.n	80032e2 <arm_copy_q15+0x2a>
  {
    /* C = A */

    /* Copy and store result in destination buffer */
    *pDst++ = *pSrc++;
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	1c93      	adds	r3, r2, #2
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	1c99      	adds	r1, r3, #2
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80032da:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    blkCnt--;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	3b01      	subs	r3, #1
 80032e0:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1f0      	bne.n	80032ca <arm_copy_q15+0x12>
  }
}
 80032e8:	bf00      	nop
 80032ea:	bf00      	nop
 80032ec:	371c      	adds	r7, #28
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <arm_fill_q15>:
#else
ARM_DSP_ATTRIBUTE void arm_fill_q15(
  q15_t value,
  q15_t * pDst,
  uint32_t blockSize)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b087      	sub	sp, #28
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	4603      	mov	r3, r0
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	607a      	str	r2, [r7, #4]
 8003302:	81fb      	strh	r3, [r7, #14]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8003308:	e007      	b.n	800331a <arm_fill_q15+0x24>
  {
    /* C = value */

    /* Fill value in destination buffer */
    *pDst++ = value;
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	1c9a      	adds	r2, r3, #2
 800330e:	60ba      	str	r2, [r7, #8]
 8003310:	89fa      	ldrh	r2, [r7, #14]
 8003312:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    blkCnt--;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	3b01      	subs	r3, #1
 8003318:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1f4      	bne.n	800330a <arm_fill_q15+0x14>
  }
}
 8003320:	bf00      	nop
 8003322:	bf00      	nop
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
	...

08003330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003334:	4b06      	ldr	r3, [pc, #24]	@ (8003350 <HAL_IncTick+0x20>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	461a      	mov	r2, r3
 800333a:	4b06      	ldr	r3, [pc, #24]	@ (8003354 <HAL_IncTick+0x24>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4413      	add	r3, r2
 8003340:	4a04      	ldr	r2, [pc, #16]	@ (8003354 <HAL_IncTick+0x24>)
 8003342:	6013      	str	r3, [r2, #0]
}
 8003344:	bf00      	nop
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	20000000 	.word	0x20000000
 8003354:	20005b20 	.word	0x20005b20

08003358 <uart2_set_fcpu>:

unsigned long f_cpu;

/** Functions ----------------------------------------------------------------*/
void uart2_set_fcpu(unsigned long freq)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
	f_cpu = freq;
 8003360:	4a04      	ldr	r2, [pc, #16]	@ (8003374 <uart2_set_fcpu+0x1c>)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6013      	str	r3, [r2, #0]
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	20005b24 	.word	0x20005b24

08003378 <uart2_dma1_config>:

	return USART_OK;
}

uart_err_type_t uart2_dma1_config(uint32_t baud, uart_data_type_t ndata, uart_stop_type_t nstop)
{
 8003378:	b5b0      	push	{r4, r5, r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	460b      	mov	r3, r1
 8003382:	72fb      	strb	r3, [r7, #11]
 8003384:	4613      	mov	r3, r2
 8003386:	72bb      	strb	r3, [r7, #10]
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;	// enable UART2 clock
 8003388:	4b85      	ldr	r3, [pc, #532]	@ (80035a0 <uart2_dma1_config+0x228>)
 800338a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338c:	4a84      	ldr	r2, [pc, #528]	@ (80035a0 <uart2_dma1_config+0x228>)
 800338e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003392:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;	// enable GPIOA clock
 8003394:	4b82      	ldr	r3, [pc, #520]	@ (80035a0 <uart2_dma1_config+0x228>)
 8003396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003398:	4a81      	ldr	r2, [pc, #516]	@ (80035a0 <uart2_dma1_config+0x228>)
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN;		// enable DMA1 clock
 80033a0:	4b7f      	ldr	r3, [pc, #508]	@ (80035a0 <uart2_dma1_config+0x228>)
 80033a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a4:	4a7e      	ldr	r2, [pc, #504]	@ (80035a0 <uart2_dma1_config+0x228>)
 80033a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80033aa:	6313      	str	r3, [r2, #48]	@ 0x30

	/* Setup DMA1 for transmission */
	// disable DMA1 to configure
	DMA1_Stream6->CR &= ~DMA_SxCR_EN;
 80033ac:	4b7d      	ldr	r3, [pc, #500]	@ (80035a4 <uart2_dma1_config+0x22c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a7c      	ldr	r2, [pc, #496]	@ (80035a4 <uart2_dma1_config+0x22c>)
 80033b2:	f023 0301 	bic.w	r3, r3, #1
 80033b6:	6013      	str	r3, [r2, #0]
	while (DMA1_Stream6->CR & DMA_SxCR_EN);
 80033b8:	bf00      	nop
 80033ba:	4b7a      	ldr	r3, [pc, #488]	@ (80035a4 <uart2_dma1_config+0x22c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f9      	bne.n	80033ba <uart2_dma1_config+0x42>

	// select stream 6, channel 4 for USART2_TX
	DMA1_Stream6->CR &= ~DMA_SxCR_CHSEL;
 80033c6:	4b77      	ldr	r3, [pc, #476]	@ (80035a4 <uart2_dma1_config+0x22c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a76      	ldr	r2, [pc, #472]	@ (80035a4 <uart2_dma1_config+0x22c>)
 80033cc:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 80033d0:	6013      	str	r3, [r2, #0]
	DMA1_Stream6->CR |= DMA_SxCR_CHSEL_2;
 80033d2:	4b74      	ldr	r3, [pc, #464]	@ (80035a4 <uart2_dma1_config+0x22c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a73      	ldr	r2, [pc, #460]	@ (80035a4 <uart2_dma1_config+0x22c>)
 80033d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80033dc:	6013      	str	r3, [r2, #0]

	// disable direct mode
	DMA1_Stream6->FCR |= DMA_SxFCR_DMDIS;
 80033de:	4b71      	ldr	r3, [pc, #452]	@ (80035a4 <uart2_dma1_config+0x22c>)
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	4a70      	ldr	r2, [pc, #448]	@ (80035a4 <uart2_dma1_config+0x22c>)
 80033e4:	f043 0304 	orr.w	r3, r3, #4
 80033e8:	6153      	str	r3, [r2, #20]

	// normal mode, low priority, 1 byte data size (memory and peripheral)
	DMA1_Stream6->CR &= ~(DMA_SxCR_DBM | DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE);
 80033ea:	4b6e      	ldr	r3, [pc, #440]	@ (80035a4 <uart2_dma1_config+0x22c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a6d      	ldr	r2, [pc, #436]	@ (80035a4 <uart2_dma1_config+0x22c>)
 80033f0:	f423 23ef 	bic.w	r3, r3, #489472	@ 0x77800
 80033f4:	6013      	str	r3, [r2, #0]

	// memory increment mode
	DMA1_Stream6->CR |= DMA_SxCR_MINC;
 80033f6:	4b6b      	ldr	r3, [pc, #428]	@ (80035a4 <uart2_dma1_config+0x22c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a6a      	ldr	r2, [pc, #424]	@ (80035a4 <uart2_dma1_config+0x22c>)
 80033fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003400:	6013      	str	r3, [r2, #0]

	// fixed peripheral pointer
	DMA1_Stream6->CR &= ~DMA_SxCR_PINC;
 8003402:	4b68      	ldr	r3, [pc, #416]	@ (80035a4 <uart2_dma1_config+0x22c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a67      	ldr	r2, [pc, #412]	@ (80035a4 <uart2_dma1_config+0x22c>)
 8003408:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800340c:	6013      	str	r3, [r2, #0]

	// disable circular mode
	DMA1_Stream6->CR &= ~DMA_SxCR_CIRC;
 800340e:	4b65      	ldr	r3, [pc, #404]	@ (80035a4 <uart2_dma1_config+0x22c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a64      	ldr	r2, [pc, #400]	@ (80035a4 <uart2_dma1_config+0x22c>)
 8003414:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003418:	6013      	str	r3, [r2, #0]

	// memory to peripheral mode
	DMA1_Stream6->CR &= ~DMA_SxCR_DIR_1;
 800341a:	4b62      	ldr	r3, [pc, #392]	@ (80035a4 <uart2_dma1_config+0x22c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a61      	ldr	r2, [pc, #388]	@ (80035a4 <uart2_dma1_config+0x22c>)
 8003420:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003424:	6013      	str	r3, [r2, #0]
	DMA1_Stream6->CR |= DMA_SxCR_DIR_0;
 8003426:	4b5f      	ldr	r3, [pc, #380]	@ (80035a4 <uart2_dma1_config+0x22c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a5e      	ldr	r2, [pc, #376]	@ (80035a4 <uart2_dma1_config+0x22c>)
 800342c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003430:	6013      	str	r3, [r2, #0]

	// peripheral address is USART2_DR
	DMA1_Stream6->PAR = (uint32_t)&(USART2->DR);
 8003432:	4b5c      	ldr	r3, [pc, #368]	@ (80035a4 <uart2_dma1_config+0x22c>)
 8003434:	4a5c      	ldr	r2, [pc, #368]	@ (80035a8 <uart2_dma1_config+0x230>)
 8003436:	609a      	str	r2, [r3, #8]

	/* Setup UART2 for transmission using DMA1 */
	// alternate function mode on TX (PA2) and RX (PA3)
	GPIOA->MODER |= GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1;
 8003438:	4b5c      	ldr	r3, [pc, #368]	@ (80035ac <uart2_dma1_config+0x234>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a5b      	ldr	r2, [pc, #364]	@ (80035ac <uart2_dma1_config+0x234>)
 800343e:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8003442:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_0 | GPIO_MODER_MODER3_0);
 8003444:	4b59      	ldr	r3, [pc, #356]	@ (80035ac <uart2_dma1_config+0x234>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a58      	ldr	r2, [pc, #352]	@ (80035ac <uart2_dma1_config+0x234>)
 800344a:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 800344e:	6013      	str	r3, [r2, #0]

	// select alternate function mode 7 for each
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL2 | GPIO_AFRL_AFRL3);
 8003450:	4b56      	ldr	r3, [pc, #344]	@ (80035ac <uart2_dma1_config+0x234>)
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	4a55      	ldr	r2, [pc, #340]	@ (80035ac <uart2_dma1_config+0x234>)
 8003456:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800345a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL2_0 | GPIO_AFRL_AFRL3_0 |
 800345c:	4b53      	ldr	r3, [pc, #332]	@ (80035ac <uart2_dma1_config+0x234>)
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	4a52      	ldr	r2, [pc, #328]	@ (80035ac <uart2_dma1_config+0x234>)
 8003462:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8003466:	6213      	str	r3, [r2, #32]
					GPIO_AFRL_AFRL2_1 | GPIO_AFRL_AFRL3_1 |
					GPIO_AFRL_AFRL2_2 | GPIO_AFRL_AFRL3_2;

	USART2->CR1 |= USART_CR1_UE;			// UART2 enable
 8003468:	4b51      	ldr	r3, [pc, #324]	@ (80035b0 <uart2_dma1_config+0x238>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	4a50      	ldr	r2, [pc, #320]	@ (80035b0 <uart2_dma1_config+0x238>)
 800346e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003472:	60d3      	str	r3, [r2, #12]

	if (ndata == USART_DATA_8)
 8003474:	7afb      	ldrb	r3, [r7, #11]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <uart2_dma1_config+0x110>
	{
		USART2->CR1 &= ~USART_CR1_M;		// 1 start, 8 data, n stop
 800347a:	4b4d      	ldr	r3, [pc, #308]	@ (80035b0 <uart2_dma1_config+0x238>)
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	4a4c      	ldr	r2, [pc, #304]	@ (80035b0 <uart2_dma1_config+0x238>)
 8003480:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003484:	60d3      	str	r3, [r2, #12]
 8003486:	e00b      	b.n	80034a0 <uart2_dma1_config+0x128>
	}
	else if (ndata == USART_DATA_9)
 8003488:	7afb      	ldrb	r3, [r7, #11]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d106      	bne.n	800349c <uart2_dma1_config+0x124>
	{
		USART2->CR1 |= USART_CR1_M;			// 1 start, 9 data, n stop
 800348e:	4b48      	ldr	r3, [pc, #288]	@ (80035b0 <uart2_dma1_config+0x238>)
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	4a47      	ldr	r2, [pc, #284]	@ (80035b0 <uart2_dma1_config+0x238>)
 8003494:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003498:	60d3      	str	r3, [r2, #12]
 800349a:	e001      	b.n	80034a0 <uart2_dma1_config+0x128>
	}
	else
	{
		return USART_INVALID_NDATA;
 800349c:	2302      	movs	r3, #2
 800349e:	e07b      	b.n	8003598 <uart2_dma1_config+0x220>
	}

	if (nstop == USART_STOP_1)
 80034a0:	7abb      	ldrb	r3, [r7, #10]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d106      	bne.n	80034b4 <uart2_dma1_config+0x13c>
	{
		USART2->CR2 &= ~USART_CR2_STOP;		// 1 stop bit
 80034a6:	4b42      	ldr	r3, [pc, #264]	@ (80035b0 <uart2_dma1_config+0x238>)
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	4a41      	ldr	r2, [pc, #260]	@ (80035b0 <uart2_dma1_config+0x238>)
 80034ac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80034b0:	6113      	str	r3, [r2, #16]
 80034b2:	e021      	b.n	80034f8 <uart2_dma1_config+0x180>
	}
	else if (nstop == USART_STOP_HALF)
 80034b4:	7abb      	ldrb	r3, [r7, #10]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d10c      	bne.n	80034d4 <uart2_dma1_config+0x15c>
	{
		USART2->CR2 &= ~USART_CR2_STOP;		// half stop bit
 80034ba:	4b3d      	ldr	r3, [pc, #244]	@ (80035b0 <uart2_dma1_config+0x238>)
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	4a3c      	ldr	r2, [pc, #240]	@ (80035b0 <uart2_dma1_config+0x238>)
 80034c0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80034c4:	6113      	str	r3, [r2, #16]
		USART2->CR2 |= USART_CR2_STOP_0;
 80034c6:	4b3a      	ldr	r3, [pc, #232]	@ (80035b0 <uart2_dma1_config+0x238>)
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	4a39      	ldr	r2, [pc, #228]	@ (80035b0 <uart2_dma1_config+0x238>)
 80034cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80034d0:	6113      	str	r3, [r2, #16]
 80034d2:	e011      	b.n	80034f8 <uart2_dma1_config+0x180>
	}
	else if (nstop == USART_STOP_2)
 80034d4:	7abb      	ldrb	r3, [r7, #10]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d10c      	bne.n	80034f4 <uart2_dma1_config+0x17c>
	{
		USART2->CR2 &= ~USART_CR2_STOP;		// 2 stop bits
 80034da:	4b35      	ldr	r3, [pc, #212]	@ (80035b0 <uart2_dma1_config+0x238>)
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	4a34      	ldr	r2, [pc, #208]	@ (80035b0 <uart2_dma1_config+0x238>)
 80034e0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80034e4:	6113      	str	r3, [r2, #16]
		USART2->CR2 |= USART_CR2_STOP_1;
 80034e6:	4b32      	ldr	r3, [pc, #200]	@ (80035b0 <uart2_dma1_config+0x238>)
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	4a31      	ldr	r2, [pc, #196]	@ (80035b0 <uart2_dma1_config+0x238>)
 80034ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80034f0:	6113      	str	r3, [r2, #16]
 80034f2:	e001      	b.n	80034f8 <uart2_dma1_config+0x180>
	}
	else
	{
		return USART_INVALID_NSTOP;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e04f      	b.n	8003598 <uart2_dma1_config+0x220>
	}

	// pg. 519 STM32F401RE reference
	float usart_div = f_cpu / (2 * 16.0 * baud);		// APB1 bus is 1/2 clock speed of f_cpu
 80034f8:	4b2e      	ldr	r3, [pc, #184]	@ (80035b4 <uart2_dma1_config+0x23c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fc ffad 	bl	800045c <__aeabi_ui2d>
 8003502:	4604      	mov	r4, r0
 8003504:	460d      	mov	r5, r1
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f7fc ffa8 	bl	800045c <__aeabi_ui2d>
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	4b29      	ldr	r3, [pc, #164]	@ (80035b8 <uart2_dma1_config+0x240>)
 8003512:	f7fd f81d 	bl	8000550 <__aeabi_dmul>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4620      	mov	r0, r4
 800351c:	4629      	mov	r1, r5
 800351e:	f7fd f941 	bl	80007a4 <__aeabi_ddiv>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4610      	mov	r0, r2
 8003528:	4619      	mov	r1, r3
 800352a:	f7fd faab 	bl	8000a84 <__aeabi_d2f>
 800352e:	4603      	mov	r3, r0
 8003530:	617b      	str	r3, [r7, #20]
	uint16_t mantissa = (uint16_t) usart_div;
 8003532:	edd7 7a05 	vldr	s15, [r7, #20]
 8003536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800353a:	ee17 3a90 	vmov	r3, s15
 800353e:	827b      	strh	r3, [r7, #18]
	uint8_t fraction = (uint8_t) ((usart_div - mantissa) * 16);
 8003540:	8a7b      	ldrh	r3, [r7, #18]
 8003542:	ee07 3a90 	vmov	s15, r3
 8003546:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800354a:	ed97 7a05 	vldr	s14, [r7, #20]
 800354e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003552:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8003556:	ee67 7a87 	vmul.f32	s15, s15, s14
 800355a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800355e:	edc7 7a01 	vstr	s15, [r7, #4]
 8003562:	793b      	ldrb	r3, [r7, #4]
 8003564:	747b      	strb	r3, [r7, #17]
	USART2->BRR = mantissa << 4 | fraction;
 8003566:	8a7b      	ldrh	r3, [r7, #18]
 8003568:	011a      	lsls	r2, r3, #4
 800356a:	7c7b      	ldrb	r3, [r7, #17]
 800356c:	431a      	orrs	r2, r3
 800356e:	4b10      	ldr	r3, [pc, #64]	@ (80035b0 <uart2_dma1_config+0x238>)
 8003570:	609a      	str	r2, [r3, #8]

	USART2->CR3 |= USART_CR3_DMAT;		// enable DMA transmitter
 8003572:	4b0f      	ldr	r3, [pc, #60]	@ (80035b0 <uart2_dma1_config+0x238>)
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	4a0e      	ldr	r2, [pc, #56]	@ (80035b0 <uart2_dma1_config+0x238>)
 8003578:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800357c:	6153      	str	r3, [r2, #20]

	USART2->CR1 |= USART_CR1_TE;		// transmitter enable
 800357e:	4b0c      	ldr	r3, [pc, #48]	@ (80035b0 <uart2_dma1_config+0x238>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	4a0b      	ldr	r2, [pc, #44]	@ (80035b0 <uart2_dma1_config+0x238>)
 8003584:	f043 0308 	orr.w	r3, r3, #8
 8003588:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RE;		// receiver enable
 800358a:	4b09      	ldr	r3, [pc, #36]	@ (80035b0 <uart2_dma1_config+0x238>)
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	4a08      	ldr	r2, [pc, #32]	@ (80035b0 <uart2_dma1_config+0x238>)
 8003590:	f043 0304 	orr.w	r3, r3, #4
 8003594:	60d3      	str	r3, [r2, #12]

	return USART_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3718      	adds	r7, #24
 800359c:	46bd      	mov	sp, r7
 800359e:	bdb0      	pop	{r4, r5, r7, pc}
 80035a0:	40023800 	.word	0x40023800
 80035a4:	400260a0 	.word	0x400260a0
 80035a8:	40004404 	.word	0x40004404
 80035ac:	40020000 	.word	0x40020000
 80035b0:	40004400 	.word	0x40004400
 80035b4:	20005b24 	.word	0x20005b24
 80035b8:	40400000 	.word	0x40400000

080035bc <uart2_dma1_write>:

	return USART_OK;
}

void uart2_dma1_write(uint16_t n, uint8_t * data)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	6039      	str	r1, [r7, #0]
 80035c6:	80fb      	strh	r3, [r7, #6]
	while (!(USART2->SR & USART_SR_TXE));	// wait for transmit data register empty
 80035c8:	bf00      	nop
 80035ca:	4b18      	ldr	r3, [pc, #96]	@ (800362c <uart2_dma1_write+0x70>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f9      	beq.n	80035ca <uart2_dma1_write+0xe>
	USART2->SR &= ~USART_SR_TC;				// clear flag
 80035d6:	4b15      	ldr	r3, [pc, #84]	@ (800362c <uart2_dma1_write+0x70>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a14      	ldr	r2, [pc, #80]	@ (800362c <uart2_dma1_write+0x70>)
 80035dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035e0:	6013      	str	r3, [r2, #0]

	DMA1_Stream6->CR &= ~DMA_SxCR_EN;		// disable DMA stream
 80035e2:	4b13      	ldr	r3, [pc, #76]	@ (8003630 <uart2_dma1_write+0x74>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a12      	ldr	r2, [pc, #72]	@ (8003630 <uart2_dma1_write+0x74>)
 80035e8:	f023 0301 	bic.w	r3, r3, #1
 80035ec:	6013      	str	r3, [r2, #0]
	while (DMA1_Stream6->CR & DMA_SxCR_EN);
 80035ee:	bf00      	nop
 80035f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003630 <uart2_dma1_write+0x74>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1f9      	bne.n	80035f0 <uart2_dma1_write+0x34>

	// clear flags
	DMA1->HIFCR |= DMA_HIFCR_CTCIF6 | DMA_HIFCR_CHTIF6 | DMA_HIFCR_CTEIF6 | DMA_HIFCR_CDMEIF6 | DMA_HIFCR_CFEIF6;
 80035fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003634 <uart2_dma1_write+0x78>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	4a0c      	ldr	r2, [pc, #48]	@ (8003634 <uart2_dma1_write+0x78>)
 8003602:	f443 1374 	orr.w	r3, r3, #3997696	@ 0x3d0000
 8003606:	60d3      	str	r3, [r2, #12]

	DMA1_Stream6->NDTR = n;					// set # of data items to transfer
 8003608:	4a09      	ldr	r2, [pc, #36]	@ (8003630 <uart2_dma1_write+0x74>)
 800360a:	88fb      	ldrh	r3, [r7, #6]
 800360c:	6053      	str	r3, [r2, #4]
	DMA1_Stream6->M0AR = (uint32_t) data;	// pointer to data
 800360e:	4a08      	ldr	r2, [pc, #32]	@ (8003630 <uart2_dma1_write+0x74>)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	60d3      	str	r3, [r2, #12]
	DMA1_Stream6->CR |= DMA_SxCR_EN;		// enable DMA stream
 8003614:	4b06      	ldr	r3, [pc, #24]	@ (8003630 <uart2_dma1_write+0x74>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a05      	ldr	r2, [pc, #20]	@ (8003630 <uart2_dma1_write+0x74>)
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	6013      	str	r3, [r2, #0]
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	40004400 	.word	0x40004400
 8003630:	400260a0 	.word	0x400260a0
 8003634:	40026000 	.word	0x40026000

08003638 <memset>:
 8003638:	4402      	add	r2, r0
 800363a:	4603      	mov	r3, r0
 800363c:	4293      	cmp	r3, r2
 800363e:	d100      	bne.n	8003642 <memset+0xa>
 8003640:	4770      	bx	lr
 8003642:	f803 1b01 	strb.w	r1, [r3], #1
 8003646:	e7f9      	b.n	800363c <memset+0x4>

08003648 <__libc_init_array>:
 8003648:	b570      	push	{r4, r5, r6, lr}
 800364a:	4d0d      	ldr	r5, [pc, #52]	@ (8003680 <__libc_init_array+0x38>)
 800364c:	4c0d      	ldr	r4, [pc, #52]	@ (8003684 <__libc_init_array+0x3c>)
 800364e:	1b64      	subs	r4, r4, r5
 8003650:	10a4      	asrs	r4, r4, #2
 8003652:	2600      	movs	r6, #0
 8003654:	42a6      	cmp	r6, r4
 8003656:	d109      	bne.n	800366c <__libc_init_array+0x24>
 8003658:	4d0b      	ldr	r5, [pc, #44]	@ (8003688 <__libc_init_array+0x40>)
 800365a:	4c0c      	ldr	r4, [pc, #48]	@ (800368c <__libc_init_array+0x44>)
 800365c:	f000 f818 	bl	8003690 <_init>
 8003660:	1b64      	subs	r4, r4, r5
 8003662:	10a4      	asrs	r4, r4, #2
 8003664:	2600      	movs	r6, #0
 8003666:	42a6      	cmp	r6, r4
 8003668:	d105      	bne.n	8003676 <__libc_init_array+0x2e>
 800366a:	bd70      	pop	{r4, r5, r6, pc}
 800366c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003670:	4798      	blx	r3
 8003672:	3601      	adds	r6, #1
 8003674:	e7ee      	b.n	8003654 <__libc_init_array+0xc>
 8003676:	f855 3b04 	ldr.w	r3, [r5], #4
 800367a:	4798      	blx	r3
 800367c:	3601      	adds	r6, #1
 800367e:	e7f2      	b.n	8003666 <__libc_init_array+0x1e>
 8003680:	08003708 	.word	0x08003708
 8003684:	08003708 	.word	0x08003708
 8003688:	08003708 	.word	0x08003708
 800368c:	0800370c 	.word	0x0800370c

08003690 <_init>:
 8003690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003692:	bf00      	nop
 8003694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003696:	bc08      	pop	{r3}
 8003698:	469e      	mov	lr, r3
 800369a:	4770      	bx	lr

0800369c <_fini>:
 800369c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369e:	bf00      	nop
 80036a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036a2:	bc08      	pop	{r3}
 80036a4:	469e      	mov	lr, r3
 80036a6:	4770      	bx	lr
